// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  artist: (where?: ArtistWhereInput) => Promise<boolean>;
  artwork: (where?: ArtworkWhereInput) => Promise<boolean>;
  artworkLocation: (where?: ArtworkLocationWhereInput) => Promise<boolean>;
  auctionArtwork: (where?: AuctionArtworkWhereInput) => Promise<boolean>;
  auctionArtworkBid: (where?: AuctionArtworkBidWhereInput) => Promise<boolean>;
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  artist: (where: ArtistWhereUniqueInput) => ArtistNullablePromise;
  artists: (args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Artist>;
  artistsConnection: (args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ArtistConnectionPromise;
  artwork: (where: ArtworkWhereUniqueInput) => ArtworkNullablePromise;
  artworks: (args?: {
    where?: ArtworkWhereInput;
    orderBy?: ArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Artwork>;
  artworksConnection: (args?: {
    where?: ArtworkWhereInput;
    orderBy?: ArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ArtworkConnectionPromise;
  artworkLocation: (
    where: ArtworkLocationWhereUniqueInput
  ) => ArtworkLocationNullablePromise;
  artworkLocations: (args?: {
    where?: ArtworkLocationWhereInput;
    orderBy?: ArtworkLocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ArtworkLocation>;
  artworkLocationsConnection: (args?: {
    where?: ArtworkLocationWhereInput;
    orderBy?: ArtworkLocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ArtworkLocationConnectionPromise;
  auctionArtwork: (
    where: AuctionArtworkWhereUniqueInput
  ) => AuctionArtworkNullablePromise;
  auctionArtworks: (args?: {
    where?: AuctionArtworkWhereInput;
    orderBy?: AuctionArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<AuctionArtwork>;
  auctionArtworksConnection: (args?: {
    where?: AuctionArtworkWhereInput;
    orderBy?: AuctionArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AuctionArtworkConnectionPromise;
  auctionArtworkBid: (
    where: AuctionArtworkBidWhereUniqueInput
  ) => AuctionArtworkBidNullablePromise;
  auctionArtworkBids: (args?: {
    where?: AuctionArtworkBidWhereInput;
    orderBy?: AuctionArtworkBidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<AuctionArtworkBid>;
  auctionArtworkBidsConnection: (args?: {
    where?: AuctionArtworkBidWhereInput;
    orderBy?: AuctionArtworkBidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AuctionArtworkBidConnectionPromise;
  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createArtist: (data: ArtistCreateInput) => ArtistPromise;
  updateArtist: (args: {
    data: ArtistUpdateInput;
    where: ArtistWhereUniqueInput;
  }) => ArtistPromise;
  updateManyArtists: (args: {
    data: ArtistUpdateManyMutationInput;
    where?: ArtistWhereInput;
  }) => BatchPayloadPromise;
  upsertArtist: (args: {
    where: ArtistWhereUniqueInput;
    create: ArtistCreateInput;
    update: ArtistUpdateInput;
  }) => ArtistPromise;
  deleteArtist: (where: ArtistWhereUniqueInput) => ArtistPromise;
  deleteManyArtists: (where?: ArtistWhereInput) => BatchPayloadPromise;
  createArtwork: (data: ArtworkCreateInput) => ArtworkPromise;
  updateArtwork: (args: {
    data: ArtworkUpdateInput;
    where: ArtworkWhereUniqueInput;
  }) => ArtworkPromise;
  updateManyArtworks: (args: {
    data: ArtworkUpdateManyMutationInput;
    where?: ArtworkWhereInput;
  }) => BatchPayloadPromise;
  upsertArtwork: (args: {
    where: ArtworkWhereUniqueInput;
    create: ArtworkCreateInput;
    update: ArtworkUpdateInput;
  }) => ArtworkPromise;
  deleteArtwork: (where: ArtworkWhereUniqueInput) => ArtworkPromise;
  deleteManyArtworks: (where?: ArtworkWhereInput) => BatchPayloadPromise;
  createArtworkLocation: (
    data: ArtworkLocationCreateInput
  ) => ArtworkLocationPromise;
  updateArtworkLocation: (args: {
    data: ArtworkLocationUpdateInput;
    where: ArtworkLocationWhereUniqueInput;
  }) => ArtworkLocationPromise;
  updateManyArtworkLocations: (args: {
    data: ArtworkLocationUpdateManyMutationInput;
    where?: ArtworkLocationWhereInput;
  }) => BatchPayloadPromise;
  upsertArtworkLocation: (args: {
    where: ArtworkLocationWhereUniqueInput;
    create: ArtworkLocationCreateInput;
    update: ArtworkLocationUpdateInput;
  }) => ArtworkLocationPromise;
  deleteArtworkLocation: (
    where: ArtworkLocationWhereUniqueInput
  ) => ArtworkLocationPromise;
  deleteManyArtworkLocations: (
    where?: ArtworkLocationWhereInput
  ) => BatchPayloadPromise;
  createAuctionArtwork: (
    data: AuctionArtworkCreateInput
  ) => AuctionArtworkPromise;
  updateAuctionArtwork: (args: {
    data: AuctionArtworkUpdateInput;
    where: AuctionArtworkWhereUniqueInput;
  }) => AuctionArtworkPromise;
  updateManyAuctionArtworks: (args: {
    data: AuctionArtworkUpdateManyMutationInput;
    where?: AuctionArtworkWhereInput;
  }) => BatchPayloadPromise;
  upsertAuctionArtwork: (args: {
    where: AuctionArtworkWhereUniqueInput;
    create: AuctionArtworkCreateInput;
    update: AuctionArtworkUpdateInput;
  }) => AuctionArtworkPromise;
  deleteAuctionArtwork: (
    where: AuctionArtworkWhereUniqueInput
  ) => AuctionArtworkPromise;
  deleteManyAuctionArtworks: (
    where?: AuctionArtworkWhereInput
  ) => BatchPayloadPromise;
  createAuctionArtworkBid: (
    data: AuctionArtworkBidCreateInput
  ) => AuctionArtworkBidPromise;
  updateAuctionArtworkBid: (args: {
    data: AuctionArtworkBidUpdateInput;
    where: AuctionArtworkBidWhereUniqueInput;
  }) => AuctionArtworkBidPromise;
  updateManyAuctionArtworkBids: (args: {
    data: AuctionArtworkBidUpdateManyMutationInput;
    where?: AuctionArtworkBidWhereInput;
  }) => BatchPayloadPromise;
  upsertAuctionArtworkBid: (args: {
    where: AuctionArtworkBidWhereUniqueInput;
    create: AuctionArtworkBidCreateInput;
    update: AuctionArtworkBidUpdateInput;
  }) => AuctionArtworkBidPromise;
  deleteAuctionArtworkBid: (
    where: AuctionArtworkBidWhereUniqueInput
  ) => AuctionArtworkBidPromise;
  deleteManyAuctionArtworkBids: (
    where?: AuctionArtworkBidWhereInput
  ) => BatchPayloadPromise;
  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  artist: (
    where?: ArtistSubscriptionWhereInput
  ) => ArtistSubscriptionPayloadSubscription;
  artwork: (
    where?: ArtworkSubscriptionWhereInput
  ) => ArtworkSubscriptionPayloadSubscription;
  artworkLocation: (
    where?: ArtworkLocationSubscriptionWhereInput
  ) => ArtworkLocationSubscriptionPayloadSubscription;
  auctionArtwork: (
    where?: AuctionArtworkSubscriptionWhereInput
  ) => AuctionArtworkSubscriptionPayloadSubscription;
  auctionArtworkBid: (
    where?: AuctionArtworkBidSubscriptionWhereInput
  ) => AuctionArtworkBidSubscriptionPayloadSubscription;
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "easyId_ASC"
  | "easyId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "deletedAt_ASC"
  | "deletedAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "title_lcase_ASC"
  | "title_lcase_DESC"
  | "body_ASC"
  | "body_DESC"
  | "body_lcase_ASC"
  | "body_lcase_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "easyId_ASC"
  | "easyId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "deletedAt_ASC"
  | "deletedAt_DESC"
  | "text_ASC"
  | "text_DESC"
  | "text_lcase_ASC"
  | "text_lcase_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC";

export type ArtistOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "easyId_ASC"
  | "easyId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "deletedAt_ASC"
  | "deletedAt_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "wikiPage_ASC"
  | "wikiPage_DESC"
  | "wikiPhoto_ASC"
  | "wikiPhoto_DESC"
  | "imageLink_ASC"
  | "imageLink_DESC"
  | "birthName_ASC"
  | "birthName_DESC"
  | "commonName_ASC"
  | "commonName_DESC"
  | "dateOfBirth_ASC"
  | "dateOfBirth_DESC"
  | "dateOfBirthAccuracy_ASC"
  | "dateOfBirthAccuracy_DESC"
  | "dateOfDeath_ASC"
  | "dateOfDeath_DESC"
  | "dateOfDeathAccuracy_ASC"
  | "dateOfDeathAccuracy_DESC"
  | "nationality_ASC"
  | "nationality_DESC"
  | "knownFor_ASC"
  | "knownFor_DESC"
  | "movements_ASC"
  | "movements_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "deceased_ASC"
  | "deceased_DESC"
  | "birthCountry_ASC"
  | "birthCountry_DESC"
  | "birthLocation_ASC"
  | "birthLocation_DESC"
  | "birthLocationDetails_ASC"
  | "birthLocationDetails_DESC"
  | "deathCountry_ASC"
  | "deathCountry_DESC"
  | "deathLocation_ASC"
  | "deathLocation_DESC"
  | "deathLocationDetails_ASC"
  | "deathLocationDetails_DESC"
  | "imageMaxName_ASC"
  | "imageMaxName_DESC"
  | "imageMaxWidth_ASC"
  | "imageMaxWidth_DESC"
  | "imageMaxHeight_ASC"
  | "imageMaxHeight_DESC"
  | "imageOptName_ASC"
  | "imageOptName_DESC"
  | "imageOptWidth_ASC"
  | "imageOptWidth_DESC"
  | "imageOptHeight_ASC"
  | "imageOptHeight_DESC"
  | "imageThmName_ASC"
  | "imageThmName_DESC"
  | "imageThmWidth_ASC"
  | "imageThmWidth_DESC"
  | "imageThmHeight_ASC"
  | "imageThmHeight_DESC";

export type ArtworkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "easyId_ASC"
  | "easyId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "deletedAt_ASC"
  | "deletedAt_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "wikiPage_ASC"
  | "wikiPage_DESC"
  | "wikiPhoto_ASC"
  | "wikiPhoto_DESC"
  | "imageLink_ASC"
  | "imageLink_DESC"
  | "notableWork_ASC"
  | "notableWork_DESC"
  | "artworkLocationURL_ASC"
  | "artworkLocationURL_DESC"
  | "fileName_ASC"
  | "fileName_DESC"
  | "workName_ASC"
  | "workName_DESC"
  | "workName_english_ASC"
  | "workName_english_DESC"
  | "workName_ascii_ASC"
  | "workName_ascii_DESC"
  | "dateCompleted_ASC"
  | "dateCompleted_DESC"
  | "dateCompletedAccuracy_ASC"
  | "dateCompletedAccuracy_DESC"
  | "type_ASC"
  | "type_DESC"
  | "genre_ASC"
  | "genre_DESC"
  | "medium_ASC"
  | "medium_DESC"
  | "mediumSupport_ASC"
  | "mediumSupport_DESC"
  | "description_ASC"
  | "description_DESC"
  | "descriptionSource_ASC"
  | "descriptionSource_DESC"
  | "accession_ASC"
  | "accession_DESC"
  | "creditLine_ASC"
  | "creditLine_DESC"
  | "dimensionCoreW_mm_ASC"
  | "dimensionCoreW_mm_DESC"
  | "dimensionCoreH_mm_ASC"
  | "dimensionCoreH_mm_DESC"
  | "dimensionCoreD_mm_ASC"
  | "dimensionCoreD_mm_DESC"
  | "dimensionCoreWHD_in_ASC"
  | "dimensionCoreWHD_in_DESC"
  | "dimensionFramedW_mm_ASC"
  | "dimensionFramedW_mm_DESC"
  | "dimensionFramedH_mm_ASC"
  | "dimensionFramedH_mm_DESC"
  | "dimensionFramedD_mm_ASC"
  | "dimensionFramedD_mm_DESC"
  | "dimensionFramedWHD_in_ASC"
  | "dimensionFramedWHD_in_DESC"
  | "signature_ASC"
  | "signature_DESC"
  | "onviewAt_ASC"
  | "onviewAt_DESC"
  | "otherDescription_ASC"
  | "otherDescription_DESC"
  | "imageMaxName_ASC"
  | "imageMaxName_DESC"
  | "imageMaxWidth_ASC"
  | "imageMaxWidth_DESC"
  | "imageMaxHeight_ASC"
  | "imageMaxHeight_DESC"
  | "imageOptName_ASC"
  | "imageOptName_DESC"
  | "imageOptWidth_ASC"
  | "imageOptWidth_DESC"
  | "imageOptHeight_ASC"
  | "imageOptHeight_DESC"
  | "imageThmName_ASC"
  | "imageThmName_DESC"
  | "imageThmWidth_ASC"
  | "imageThmWidth_DESC"
  | "imageThmHeight_ASC"
  | "imageThmHeight_DESC";

export type AuctionArtworkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "deletedAt_ASC"
  | "deletedAt_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "endDate_ASC"
  | "endDate_DESC"
  | "withdrawnDate_ASC"
  | "withdrawnDate_DESC"
  | "saleDate_ASC"
  | "saleDate_DESC"
  | "refundDate_ASC"
  | "refundDate_DESC"
  | "reserve_ASC"
  | "reserve_DESC"
  | "initialPrice_ASC"
  | "initialPrice_DESC"
  | "buyoutPrice_ASC"
  | "buyoutPrice_DESC"
  | "salePrice_ASC"
  | "salePrice_DESC";

export type AuctionArtworkBidOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "deletedAt_ASC"
  | "deletedAt_DESC"
  | "amount_ASC"
  | "amount_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "easyId_ASC"
  | "easyId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "deletedAt_ASC"
  | "deletedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "name_lcase_ASC"
  | "name_lcase_DESC"
  | "email_ASC"
  | "email_DESC"
  | "email_lcase_ASC"
  | "email_lcase_DESC"
  | "emailValidated_ASC"
  | "emailValidated_DESC"
  | "active_ASC"
  | "active_DESC"
  | "password_ASC"
  | "password_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "resetTokenExpiry_ASC"
  | "resetTokenExpiry_DESC";

export type ArtworkLocationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "easyId_ASC"
  | "easyId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "deletedAt_ASC"
  | "deletedAt_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "wikiPage_ASC"
  | "wikiPage_DESC"
  | "wikiPhoto_ASC"
  | "wikiPhoto_DESC"
  | "imageLink_ASC"
  | "imageLink_DESC"
  | "name_ASC"
  | "name_DESC"
  | "nickname_ASC"
  | "nickname_DESC"
  | "description_ASC"
  | "description_DESC"
  | "dateFirstOpened_ASC"
  | "dateFirstOpened_DESC"
  | "streetAddress_ASC"
  | "streetAddress_DESC"
  | "city_ASC"
  | "city_DESC"
  | "state_ASC"
  | "state_DESC"
  | "postalCode_ASC"
  | "postalCode_DESC"
  | "country_ASC"
  | "country_DESC"
  | "coorE_ASC"
  | "coorE_DESC"
  | "coorN_ASC"
  | "coorN_DESC"
  | "website_ASC"
  | "website_DESC"
  | "isMuseum_ASC"
  | "isMuseum_DESC"
  | "imageMaxName_ASC"
  | "imageMaxName_DESC"
  | "imageMaxWidth_ASC"
  | "imageMaxWidth_DESC"
  | "imageMaxHeight_ASC"
  | "imageMaxHeight_DESC"
  | "imageOptName_ASC"
  | "imageOptName_DESC"
  | "imageOptWidth_ASC"
  | "imageOptWidth_DESC"
  | "imageOptHeight_ASC"
  | "imageOptHeight_DESC"
  | "imageThmName_ASC"
  | "imageThmName_DESC"
  | "imageThmWidth_ASC"
  | "imageThmWidth_DESC"
  | "imageThmHeight_ASC"
  | "imageThmHeight_DESC";

export type PermissionsType = "USER" | "ADMIN" | "USER_PERMISSIONS_UPDATE";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ArtistWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  easyId?: Maybe<String>;
}>;

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  easyId?: Maybe<String>;
  easyId_not?: Maybe<String>;
  easyId_in?: Maybe<String[] | String>;
  easyId_not_in?: Maybe<String[] | String>;
  easyId_lt?: Maybe<String>;
  easyId_lte?: Maybe<String>;
  easyId_gt?: Maybe<String>;
  easyId_gte?: Maybe<String>;
  easyId_contains?: Maybe<String>;
  easyId_not_contains?: Maybe<String>;
  easyId_starts_with?: Maybe<String>;
  easyId_not_starts_with?: Maybe<String>;
  easyId_ends_with?: Maybe<String>;
  easyId_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deletedAt?: Maybe<DateTimeInput>;
  deletedAt_not?: Maybe<DateTimeInput>;
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_lt?: Maybe<DateTimeInput>;
  deletedAt_lte?: Maybe<DateTimeInput>;
  deletedAt_gt?: Maybe<DateTimeInput>;
  deletedAt_gte?: Maybe<DateTimeInput>;
  owner?: Maybe<UserWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  title_lcase?: Maybe<String>;
  title_lcase_not?: Maybe<String>;
  title_lcase_in?: Maybe<String[] | String>;
  title_lcase_not_in?: Maybe<String[] | String>;
  title_lcase_lt?: Maybe<String>;
  title_lcase_lte?: Maybe<String>;
  title_lcase_gt?: Maybe<String>;
  title_lcase_gte?: Maybe<String>;
  title_lcase_contains?: Maybe<String>;
  title_lcase_not_contains?: Maybe<String>;
  title_lcase_starts_with?: Maybe<String>;
  title_lcase_not_starts_with?: Maybe<String>;
  title_lcase_ends_with?: Maybe<String>;
  title_lcase_not_ends_with?: Maybe<String>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  body_lcase?: Maybe<String>;
  body_lcase_not?: Maybe<String>;
  body_lcase_in?: Maybe<String[] | String>;
  body_lcase_not_in?: Maybe<String[] | String>;
  body_lcase_lt?: Maybe<String>;
  body_lcase_lte?: Maybe<String>;
  body_lcase_gt?: Maybe<String>;
  body_lcase_gte?: Maybe<String>;
  body_lcase_contains?: Maybe<String>;
  body_lcase_not_contains?: Maybe<String>;
  body_lcase_starts_with?: Maybe<String>;
  body_lcase_not_starts_with?: Maybe<String>;
  body_lcase_ends_with?: Maybe<String>;
  body_lcase_not_ends_with?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  easyId?: Maybe<String>;
  easyId_not?: Maybe<String>;
  easyId_in?: Maybe<String[] | String>;
  easyId_not_in?: Maybe<String[] | String>;
  easyId_lt?: Maybe<String>;
  easyId_lte?: Maybe<String>;
  easyId_gt?: Maybe<String>;
  easyId_gte?: Maybe<String>;
  easyId_contains?: Maybe<String>;
  easyId_not_contains?: Maybe<String>;
  easyId_starts_with?: Maybe<String>;
  easyId_not_starts_with?: Maybe<String>;
  easyId_ends_with?: Maybe<String>;
  easyId_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deletedAt?: Maybe<DateTimeInput>;
  deletedAt_not?: Maybe<DateTimeInput>;
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_lt?: Maybe<DateTimeInput>;
  deletedAt_lte?: Maybe<DateTimeInput>;
  deletedAt_gt?: Maybe<DateTimeInput>;
  deletedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  name_lcase?: Maybe<String>;
  name_lcase_not?: Maybe<String>;
  name_lcase_in?: Maybe<String[] | String>;
  name_lcase_not_in?: Maybe<String[] | String>;
  name_lcase_lt?: Maybe<String>;
  name_lcase_lte?: Maybe<String>;
  name_lcase_gt?: Maybe<String>;
  name_lcase_gte?: Maybe<String>;
  name_lcase_contains?: Maybe<String>;
  name_lcase_not_contains?: Maybe<String>;
  name_lcase_starts_with?: Maybe<String>;
  name_lcase_not_starts_with?: Maybe<String>;
  name_lcase_ends_with?: Maybe<String>;
  name_lcase_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  email_lcase?: Maybe<String>;
  email_lcase_not?: Maybe<String>;
  email_lcase_in?: Maybe<String[] | String>;
  email_lcase_not_in?: Maybe<String[] | String>;
  email_lcase_lt?: Maybe<String>;
  email_lcase_lte?: Maybe<String>;
  email_lcase_gt?: Maybe<String>;
  email_lcase_gte?: Maybe<String>;
  email_lcase_contains?: Maybe<String>;
  email_lcase_not_contains?: Maybe<String>;
  email_lcase_starts_with?: Maybe<String>;
  email_lcase_not_starts_with?: Maybe<String>;
  email_lcase_ends_with?: Maybe<String>;
  email_lcase_not_ends_with?: Maybe<String>;
  emailValidated?: Maybe<Boolean>;
  emailValidated_not?: Maybe<Boolean>;
  active?: Maybe<Boolean>;
  active_not?: Maybe<Boolean>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  artistRecords_every?: Maybe<ArtistWhereInput>;
  artistRecords_some?: Maybe<ArtistWhereInput>;
  artistRecords_none?: Maybe<ArtistWhereInput>;
  artworkRecords_every?: Maybe<ArtworkWhereInput>;
  artworkRecords_some?: Maybe<ArtworkWhereInput>;
  artworkRecords_none?: Maybe<ArtworkWhereInput>;
  artworkLocationRecords_every?: Maybe<ArtworkLocationWhereInput>;
  artworkLocationRecords_some?: Maybe<ArtworkLocationWhereInput>;
  artworkLocationRecords_none?: Maybe<ArtworkLocationWhereInput>;
  auctionArtworkSeller_every?: Maybe<AuctionArtworkWhereInput>;
  auctionArtworkSeller_some?: Maybe<AuctionArtworkWhereInput>;
  auctionArtworkSeller_none?: Maybe<AuctionArtworkWhereInput>;
  auctionArtworkBuyer_every?: Maybe<AuctionArtworkWhereInput>;
  auctionArtworkBuyer_some?: Maybe<AuctionArtworkWhereInput>;
  auctionArtworkBuyer_none?: Maybe<AuctionArtworkWhereInput>;
  auctionArtworkWatcher_every?: Maybe<AuctionArtworkWhereInput>;
  auctionArtworkWatcher_some?: Maybe<AuctionArtworkWhereInput>;
  auctionArtworkWatcher_none?: Maybe<AuctionArtworkWhereInput>;
  auctionArtworkBid_every?: Maybe<AuctionArtworkBidWhereInput>;
  auctionArtworkBid_some?: Maybe<AuctionArtworkBidWhereInput>;
  auctionArtworkBid_none?: Maybe<AuctionArtworkBidWhereInput>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetToken_not?: Maybe<String>;
  resetToken_in?: Maybe<String[] | String>;
  resetToken_not_in?: Maybe<String[] | String>;
  resetToken_lt?: Maybe<String>;
  resetToken_lte?: Maybe<String>;
  resetToken_gt?: Maybe<String>;
  resetToken_gte?: Maybe<String>;
  resetToken_contains?: Maybe<String>;
  resetToken_not_contains?: Maybe<String>;
  resetToken_starts_with?: Maybe<String>;
  resetToken_not_starts_with?: Maybe<String>;
  resetToken_ends_with?: Maybe<String>;
  resetToken_not_ends_with?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  resetTokenExpiry_not?: Maybe<String>;
  resetTokenExpiry_in?: Maybe<String[] | String>;
  resetTokenExpiry_not_in?: Maybe<String[] | String>;
  resetTokenExpiry_lt?: Maybe<String>;
  resetTokenExpiry_lte?: Maybe<String>;
  resetTokenExpiry_gt?: Maybe<String>;
  resetTokenExpiry_gte?: Maybe<String>;
  resetTokenExpiry_contains?: Maybe<String>;
  resetTokenExpiry_not_contains?: Maybe<String>;
  resetTokenExpiry_starts_with?: Maybe<String>;
  resetTokenExpiry_not_starts_with?: Maybe<String>;
  resetTokenExpiry_ends_with?: Maybe<String>;
  resetTokenExpiry_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  easyId?: Maybe<String>;
  easyId_not?: Maybe<String>;
  easyId_in?: Maybe<String[] | String>;
  easyId_not_in?: Maybe<String[] | String>;
  easyId_lt?: Maybe<String>;
  easyId_lte?: Maybe<String>;
  easyId_gt?: Maybe<String>;
  easyId_gte?: Maybe<String>;
  easyId_contains?: Maybe<String>;
  easyId_not_contains?: Maybe<String>;
  easyId_starts_with?: Maybe<String>;
  easyId_not_starts_with?: Maybe<String>;
  easyId_ends_with?: Maybe<String>;
  easyId_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deletedAt?: Maybe<DateTimeInput>;
  deletedAt_not?: Maybe<DateTimeInput>;
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_lt?: Maybe<DateTimeInput>;
  deletedAt_lte?: Maybe<DateTimeInput>;
  deletedAt_gt?: Maybe<DateTimeInput>;
  deletedAt_gte?: Maybe<DateTimeInput>;
  owner?: Maybe<UserWhereInput>;
  post?: Maybe<PostWhereInput>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  text_lcase?: Maybe<String>;
  text_lcase_not?: Maybe<String>;
  text_lcase_in?: Maybe<String[] | String>;
  text_lcase_not_in?: Maybe<String[] | String>;
  text_lcase_lt?: Maybe<String>;
  text_lcase_lte?: Maybe<String>;
  text_lcase_gt?: Maybe<String>;
  text_lcase_gte?: Maybe<String>;
  text_lcase_contains?: Maybe<String>;
  text_lcase_not_contains?: Maybe<String>;
  text_lcase_starts_with?: Maybe<String>;
  text_lcase_not_starts_with?: Maybe<String>;
  text_lcase_ends_with?: Maybe<String>;
  text_lcase_not_ends_with?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface ArtistWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  easyId?: Maybe<String>;
  easyId_not?: Maybe<String>;
  easyId_in?: Maybe<String[] | String>;
  easyId_not_in?: Maybe<String[] | String>;
  easyId_lt?: Maybe<String>;
  easyId_lte?: Maybe<String>;
  easyId_gt?: Maybe<String>;
  easyId_gte?: Maybe<String>;
  easyId_contains?: Maybe<String>;
  easyId_not_contains?: Maybe<String>;
  easyId_starts_with?: Maybe<String>;
  easyId_not_starts_with?: Maybe<String>;
  easyId_ends_with?: Maybe<String>;
  easyId_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deletedAt?: Maybe<DateTimeInput>;
  deletedAt_not?: Maybe<DateTimeInput>;
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_lt?: Maybe<DateTimeInput>;
  deletedAt_lte?: Maybe<DateTimeInput>;
  deletedAt_gt?: Maybe<DateTimeInput>;
  deletedAt_gte?: Maybe<DateTimeInput>;
  owner?: Maybe<UserWhereInput>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPage_not?: Maybe<String>;
  wikiPage_in?: Maybe<String[] | String>;
  wikiPage_not_in?: Maybe<String[] | String>;
  wikiPage_lt?: Maybe<String>;
  wikiPage_lte?: Maybe<String>;
  wikiPage_gt?: Maybe<String>;
  wikiPage_gte?: Maybe<String>;
  wikiPage_contains?: Maybe<String>;
  wikiPage_not_contains?: Maybe<String>;
  wikiPage_starts_with?: Maybe<String>;
  wikiPage_not_starts_with?: Maybe<String>;
  wikiPage_ends_with?: Maybe<String>;
  wikiPage_not_ends_with?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  wikiPhoto_not?: Maybe<String>;
  wikiPhoto_in?: Maybe<String[] | String>;
  wikiPhoto_not_in?: Maybe<String[] | String>;
  wikiPhoto_lt?: Maybe<String>;
  wikiPhoto_lte?: Maybe<String>;
  wikiPhoto_gt?: Maybe<String>;
  wikiPhoto_gte?: Maybe<String>;
  wikiPhoto_contains?: Maybe<String>;
  wikiPhoto_not_contains?: Maybe<String>;
  wikiPhoto_starts_with?: Maybe<String>;
  wikiPhoto_not_starts_with?: Maybe<String>;
  wikiPhoto_ends_with?: Maybe<String>;
  wikiPhoto_not_ends_with?: Maybe<String>;
  imageLink?: Maybe<String>;
  imageLink_not?: Maybe<String>;
  imageLink_in?: Maybe<String[] | String>;
  imageLink_not_in?: Maybe<String[] | String>;
  imageLink_lt?: Maybe<String>;
  imageLink_lte?: Maybe<String>;
  imageLink_gt?: Maybe<String>;
  imageLink_gte?: Maybe<String>;
  imageLink_contains?: Maybe<String>;
  imageLink_not_contains?: Maybe<String>;
  imageLink_starts_with?: Maybe<String>;
  imageLink_not_starts_with?: Maybe<String>;
  imageLink_ends_with?: Maybe<String>;
  imageLink_not_ends_with?: Maybe<String>;
  birthName?: Maybe<String>;
  birthName_not?: Maybe<String>;
  birthName_in?: Maybe<String[] | String>;
  birthName_not_in?: Maybe<String[] | String>;
  birthName_lt?: Maybe<String>;
  birthName_lte?: Maybe<String>;
  birthName_gt?: Maybe<String>;
  birthName_gte?: Maybe<String>;
  birthName_contains?: Maybe<String>;
  birthName_not_contains?: Maybe<String>;
  birthName_starts_with?: Maybe<String>;
  birthName_not_starts_with?: Maybe<String>;
  birthName_ends_with?: Maybe<String>;
  birthName_not_ends_with?: Maybe<String>;
  commonName?: Maybe<String>;
  commonName_not?: Maybe<String>;
  commonName_in?: Maybe<String[] | String>;
  commonName_not_in?: Maybe<String[] | String>;
  commonName_lt?: Maybe<String>;
  commonName_lte?: Maybe<String>;
  commonName_gt?: Maybe<String>;
  commonName_gte?: Maybe<String>;
  commonName_contains?: Maybe<String>;
  commonName_not_contains?: Maybe<String>;
  commonName_starts_with?: Maybe<String>;
  commonName_not_starts_with?: Maybe<String>;
  commonName_ends_with?: Maybe<String>;
  commonName_not_ends_with?: Maybe<String>;
  dateOfBirth?: Maybe<String>;
  dateOfBirth_not?: Maybe<String>;
  dateOfBirth_in?: Maybe<String[] | String>;
  dateOfBirth_not_in?: Maybe<String[] | String>;
  dateOfBirth_lt?: Maybe<String>;
  dateOfBirth_lte?: Maybe<String>;
  dateOfBirth_gt?: Maybe<String>;
  dateOfBirth_gte?: Maybe<String>;
  dateOfBirth_contains?: Maybe<String>;
  dateOfBirth_not_contains?: Maybe<String>;
  dateOfBirth_starts_with?: Maybe<String>;
  dateOfBirth_not_starts_with?: Maybe<String>;
  dateOfBirth_ends_with?: Maybe<String>;
  dateOfBirth_not_ends_with?: Maybe<String>;
  dateOfBirthAccuracy?: Maybe<String>;
  dateOfBirthAccuracy_not?: Maybe<String>;
  dateOfBirthAccuracy_in?: Maybe<String[] | String>;
  dateOfBirthAccuracy_not_in?: Maybe<String[] | String>;
  dateOfBirthAccuracy_lt?: Maybe<String>;
  dateOfBirthAccuracy_lte?: Maybe<String>;
  dateOfBirthAccuracy_gt?: Maybe<String>;
  dateOfBirthAccuracy_gte?: Maybe<String>;
  dateOfBirthAccuracy_contains?: Maybe<String>;
  dateOfBirthAccuracy_not_contains?: Maybe<String>;
  dateOfBirthAccuracy_starts_with?: Maybe<String>;
  dateOfBirthAccuracy_not_starts_with?: Maybe<String>;
  dateOfBirthAccuracy_ends_with?: Maybe<String>;
  dateOfBirthAccuracy_not_ends_with?: Maybe<String>;
  dateOfDeath?: Maybe<String>;
  dateOfDeath_not?: Maybe<String>;
  dateOfDeath_in?: Maybe<String[] | String>;
  dateOfDeath_not_in?: Maybe<String[] | String>;
  dateOfDeath_lt?: Maybe<String>;
  dateOfDeath_lte?: Maybe<String>;
  dateOfDeath_gt?: Maybe<String>;
  dateOfDeath_gte?: Maybe<String>;
  dateOfDeath_contains?: Maybe<String>;
  dateOfDeath_not_contains?: Maybe<String>;
  dateOfDeath_starts_with?: Maybe<String>;
  dateOfDeath_not_starts_with?: Maybe<String>;
  dateOfDeath_ends_with?: Maybe<String>;
  dateOfDeath_not_ends_with?: Maybe<String>;
  dateOfDeathAccuracy?: Maybe<String>;
  dateOfDeathAccuracy_not?: Maybe<String>;
  dateOfDeathAccuracy_in?: Maybe<String[] | String>;
  dateOfDeathAccuracy_not_in?: Maybe<String[] | String>;
  dateOfDeathAccuracy_lt?: Maybe<String>;
  dateOfDeathAccuracy_lte?: Maybe<String>;
  dateOfDeathAccuracy_gt?: Maybe<String>;
  dateOfDeathAccuracy_gte?: Maybe<String>;
  dateOfDeathAccuracy_contains?: Maybe<String>;
  dateOfDeathAccuracy_not_contains?: Maybe<String>;
  dateOfDeathAccuracy_starts_with?: Maybe<String>;
  dateOfDeathAccuracy_not_starts_with?: Maybe<String>;
  dateOfDeathAccuracy_ends_with?: Maybe<String>;
  dateOfDeathAccuracy_not_ends_with?: Maybe<String>;
  nationality?: Maybe<String>;
  nationality_not?: Maybe<String>;
  nationality_in?: Maybe<String[] | String>;
  nationality_not_in?: Maybe<String[] | String>;
  nationality_lt?: Maybe<String>;
  nationality_lte?: Maybe<String>;
  nationality_gt?: Maybe<String>;
  nationality_gte?: Maybe<String>;
  nationality_contains?: Maybe<String>;
  nationality_not_contains?: Maybe<String>;
  nationality_starts_with?: Maybe<String>;
  nationality_not_starts_with?: Maybe<String>;
  nationality_ends_with?: Maybe<String>;
  nationality_not_ends_with?: Maybe<String>;
  knownFor?: Maybe<String>;
  knownFor_not?: Maybe<String>;
  knownFor_in?: Maybe<String[] | String>;
  knownFor_not_in?: Maybe<String[] | String>;
  knownFor_lt?: Maybe<String>;
  knownFor_lte?: Maybe<String>;
  knownFor_gt?: Maybe<String>;
  knownFor_gte?: Maybe<String>;
  knownFor_contains?: Maybe<String>;
  knownFor_not_contains?: Maybe<String>;
  knownFor_starts_with?: Maybe<String>;
  knownFor_not_starts_with?: Maybe<String>;
  knownFor_ends_with?: Maybe<String>;
  knownFor_not_ends_with?: Maybe<String>;
  movements?: Maybe<String>;
  movements_not?: Maybe<String>;
  movements_in?: Maybe<String[] | String>;
  movements_not_in?: Maybe<String[] | String>;
  movements_lt?: Maybe<String>;
  movements_lte?: Maybe<String>;
  movements_gt?: Maybe<String>;
  movements_gte?: Maybe<String>;
  movements_contains?: Maybe<String>;
  movements_not_contains?: Maybe<String>;
  movements_starts_with?: Maybe<String>;
  movements_not_starts_with?: Maybe<String>;
  movements_ends_with?: Maybe<String>;
  movements_not_ends_with?: Maybe<String>;
  gender?: Maybe<String>;
  gender_not?: Maybe<String>;
  gender_in?: Maybe<String[] | String>;
  gender_not_in?: Maybe<String[] | String>;
  gender_lt?: Maybe<String>;
  gender_lte?: Maybe<String>;
  gender_gt?: Maybe<String>;
  gender_gte?: Maybe<String>;
  gender_contains?: Maybe<String>;
  gender_not_contains?: Maybe<String>;
  gender_starts_with?: Maybe<String>;
  gender_not_starts_with?: Maybe<String>;
  gender_ends_with?: Maybe<String>;
  gender_not_ends_with?: Maybe<String>;
  artworks_every?: Maybe<ArtworkWhereInput>;
  artworks_some?: Maybe<ArtworkWhereInput>;
  artworks_none?: Maybe<ArtworkWhereInput>;
  artworkLocations_every?: Maybe<ArtworkLocationWhereInput>;
  artworkLocations_some?: Maybe<ArtworkLocationWhereInput>;
  artworkLocations_none?: Maybe<ArtworkLocationWhereInput>;
  deceased?: Maybe<Boolean>;
  deceased_not?: Maybe<Boolean>;
  birthCountry?: Maybe<String>;
  birthCountry_not?: Maybe<String>;
  birthCountry_in?: Maybe<String[] | String>;
  birthCountry_not_in?: Maybe<String[] | String>;
  birthCountry_lt?: Maybe<String>;
  birthCountry_lte?: Maybe<String>;
  birthCountry_gt?: Maybe<String>;
  birthCountry_gte?: Maybe<String>;
  birthCountry_contains?: Maybe<String>;
  birthCountry_not_contains?: Maybe<String>;
  birthCountry_starts_with?: Maybe<String>;
  birthCountry_not_starts_with?: Maybe<String>;
  birthCountry_ends_with?: Maybe<String>;
  birthCountry_not_ends_with?: Maybe<String>;
  birthLocation?: Maybe<String>;
  birthLocation_not?: Maybe<String>;
  birthLocation_in?: Maybe<String[] | String>;
  birthLocation_not_in?: Maybe<String[] | String>;
  birthLocation_lt?: Maybe<String>;
  birthLocation_lte?: Maybe<String>;
  birthLocation_gt?: Maybe<String>;
  birthLocation_gte?: Maybe<String>;
  birthLocation_contains?: Maybe<String>;
  birthLocation_not_contains?: Maybe<String>;
  birthLocation_starts_with?: Maybe<String>;
  birthLocation_not_starts_with?: Maybe<String>;
  birthLocation_ends_with?: Maybe<String>;
  birthLocation_not_ends_with?: Maybe<String>;
  birthLocationDetails?: Maybe<String>;
  birthLocationDetails_not?: Maybe<String>;
  birthLocationDetails_in?: Maybe<String[] | String>;
  birthLocationDetails_not_in?: Maybe<String[] | String>;
  birthLocationDetails_lt?: Maybe<String>;
  birthLocationDetails_lte?: Maybe<String>;
  birthLocationDetails_gt?: Maybe<String>;
  birthLocationDetails_gte?: Maybe<String>;
  birthLocationDetails_contains?: Maybe<String>;
  birthLocationDetails_not_contains?: Maybe<String>;
  birthLocationDetails_starts_with?: Maybe<String>;
  birthLocationDetails_not_starts_with?: Maybe<String>;
  birthLocationDetails_ends_with?: Maybe<String>;
  birthLocationDetails_not_ends_with?: Maybe<String>;
  deathCountry?: Maybe<String>;
  deathCountry_not?: Maybe<String>;
  deathCountry_in?: Maybe<String[] | String>;
  deathCountry_not_in?: Maybe<String[] | String>;
  deathCountry_lt?: Maybe<String>;
  deathCountry_lte?: Maybe<String>;
  deathCountry_gt?: Maybe<String>;
  deathCountry_gte?: Maybe<String>;
  deathCountry_contains?: Maybe<String>;
  deathCountry_not_contains?: Maybe<String>;
  deathCountry_starts_with?: Maybe<String>;
  deathCountry_not_starts_with?: Maybe<String>;
  deathCountry_ends_with?: Maybe<String>;
  deathCountry_not_ends_with?: Maybe<String>;
  deathLocation?: Maybe<String>;
  deathLocation_not?: Maybe<String>;
  deathLocation_in?: Maybe<String[] | String>;
  deathLocation_not_in?: Maybe<String[] | String>;
  deathLocation_lt?: Maybe<String>;
  deathLocation_lte?: Maybe<String>;
  deathLocation_gt?: Maybe<String>;
  deathLocation_gte?: Maybe<String>;
  deathLocation_contains?: Maybe<String>;
  deathLocation_not_contains?: Maybe<String>;
  deathLocation_starts_with?: Maybe<String>;
  deathLocation_not_starts_with?: Maybe<String>;
  deathLocation_ends_with?: Maybe<String>;
  deathLocation_not_ends_with?: Maybe<String>;
  deathLocationDetails?: Maybe<String>;
  deathLocationDetails_not?: Maybe<String>;
  deathLocationDetails_in?: Maybe<String[] | String>;
  deathLocationDetails_not_in?: Maybe<String[] | String>;
  deathLocationDetails_lt?: Maybe<String>;
  deathLocationDetails_lte?: Maybe<String>;
  deathLocationDetails_gt?: Maybe<String>;
  deathLocationDetails_gte?: Maybe<String>;
  deathLocationDetails_contains?: Maybe<String>;
  deathLocationDetails_not_contains?: Maybe<String>;
  deathLocationDetails_starts_with?: Maybe<String>;
  deathLocationDetails_not_starts_with?: Maybe<String>;
  deathLocationDetails_ends_with?: Maybe<String>;
  deathLocationDetails_not_ends_with?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxName_not?: Maybe<String>;
  imageMaxName_in?: Maybe<String[] | String>;
  imageMaxName_not_in?: Maybe<String[] | String>;
  imageMaxName_lt?: Maybe<String>;
  imageMaxName_lte?: Maybe<String>;
  imageMaxName_gt?: Maybe<String>;
  imageMaxName_gte?: Maybe<String>;
  imageMaxName_contains?: Maybe<String>;
  imageMaxName_not_contains?: Maybe<String>;
  imageMaxName_starts_with?: Maybe<String>;
  imageMaxName_not_starts_with?: Maybe<String>;
  imageMaxName_ends_with?: Maybe<String>;
  imageMaxName_not_ends_with?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxWidth_not?: Maybe<Int>;
  imageMaxWidth_in?: Maybe<Int[] | Int>;
  imageMaxWidth_not_in?: Maybe<Int[] | Int>;
  imageMaxWidth_lt?: Maybe<Int>;
  imageMaxWidth_lte?: Maybe<Int>;
  imageMaxWidth_gt?: Maybe<Int>;
  imageMaxWidth_gte?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageMaxHeight_not?: Maybe<Int>;
  imageMaxHeight_in?: Maybe<Int[] | Int>;
  imageMaxHeight_not_in?: Maybe<Int[] | Int>;
  imageMaxHeight_lt?: Maybe<Int>;
  imageMaxHeight_lte?: Maybe<Int>;
  imageMaxHeight_gt?: Maybe<Int>;
  imageMaxHeight_gte?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptName_not?: Maybe<String>;
  imageOptName_in?: Maybe<String[] | String>;
  imageOptName_not_in?: Maybe<String[] | String>;
  imageOptName_lt?: Maybe<String>;
  imageOptName_lte?: Maybe<String>;
  imageOptName_gt?: Maybe<String>;
  imageOptName_gte?: Maybe<String>;
  imageOptName_contains?: Maybe<String>;
  imageOptName_not_contains?: Maybe<String>;
  imageOptName_starts_with?: Maybe<String>;
  imageOptName_not_starts_with?: Maybe<String>;
  imageOptName_ends_with?: Maybe<String>;
  imageOptName_not_ends_with?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptWidth_not?: Maybe<Int>;
  imageOptWidth_in?: Maybe<Int[] | Int>;
  imageOptWidth_not_in?: Maybe<Int[] | Int>;
  imageOptWidth_lt?: Maybe<Int>;
  imageOptWidth_lte?: Maybe<Int>;
  imageOptWidth_gt?: Maybe<Int>;
  imageOptWidth_gte?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageOptHeight_not?: Maybe<Int>;
  imageOptHeight_in?: Maybe<Int[] | Int>;
  imageOptHeight_not_in?: Maybe<Int[] | Int>;
  imageOptHeight_lt?: Maybe<Int>;
  imageOptHeight_lte?: Maybe<Int>;
  imageOptHeight_gt?: Maybe<Int>;
  imageOptHeight_gte?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmName_not?: Maybe<String>;
  imageThmName_in?: Maybe<String[] | String>;
  imageThmName_not_in?: Maybe<String[] | String>;
  imageThmName_lt?: Maybe<String>;
  imageThmName_lte?: Maybe<String>;
  imageThmName_gt?: Maybe<String>;
  imageThmName_gte?: Maybe<String>;
  imageThmName_contains?: Maybe<String>;
  imageThmName_not_contains?: Maybe<String>;
  imageThmName_starts_with?: Maybe<String>;
  imageThmName_not_starts_with?: Maybe<String>;
  imageThmName_ends_with?: Maybe<String>;
  imageThmName_not_ends_with?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmWidth_not?: Maybe<Int>;
  imageThmWidth_in?: Maybe<Int[] | Int>;
  imageThmWidth_not_in?: Maybe<Int[] | Int>;
  imageThmWidth_lt?: Maybe<Int>;
  imageThmWidth_lte?: Maybe<Int>;
  imageThmWidth_gt?: Maybe<Int>;
  imageThmWidth_gte?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
  imageThmHeight_not?: Maybe<Int>;
  imageThmHeight_in?: Maybe<Int[] | Int>;
  imageThmHeight_not_in?: Maybe<Int[] | Int>;
  imageThmHeight_lt?: Maybe<Int>;
  imageThmHeight_lte?: Maybe<Int>;
  imageThmHeight_gt?: Maybe<Int>;
  imageThmHeight_gte?: Maybe<Int>;
  AND?: Maybe<ArtistWhereInput[] | ArtistWhereInput>;
  OR?: Maybe<ArtistWhereInput[] | ArtistWhereInput>;
  NOT?: Maybe<ArtistWhereInput[] | ArtistWhereInput>;
}

export interface ArtworkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  easyId?: Maybe<String>;
  easyId_not?: Maybe<String>;
  easyId_in?: Maybe<String[] | String>;
  easyId_not_in?: Maybe<String[] | String>;
  easyId_lt?: Maybe<String>;
  easyId_lte?: Maybe<String>;
  easyId_gt?: Maybe<String>;
  easyId_gte?: Maybe<String>;
  easyId_contains?: Maybe<String>;
  easyId_not_contains?: Maybe<String>;
  easyId_starts_with?: Maybe<String>;
  easyId_not_starts_with?: Maybe<String>;
  easyId_ends_with?: Maybe<String>;
  easyId_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deletedAt?: Maybe<DateTimeInput>;
  deletedAt_not?: Maybe<DateTimeInput>;
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_lt?: Maybe<DateTimeInput>;
  deletedAt_lte?: Maybe<DateTimeInput>;
  deletedAt_gt?: Maybe<DateTimeInput>;
  deletedAt_gte?: Maybe<DateTimeInput>;
  owner?: Maybe<UserWhereInput>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPage_not?: Maybe<String>;
  wikiPage_in?: Maybe<String[] | String>;
  wikiPage_not_in?: Maybe<String[] | String>;
  wikiPage_lt?: Maybe<String>;
  wikiPage_lte?: Maybe<String>;
  wikiPage_gt?: Maybe<String>;
  wikiPage_gte?: Maybe<String>;
  wikiPage_contains?: Maybe<String>;
  wikiPage_not_contains?: Maybe<String>;
  wikiPage_starts_with?: Maybe<String>;
  wikiPage_not_starts_with?: Maybe<String>;
  wikiPage_ends_with?: Maybe<String>;
  wikiPage_not_ends_with?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  wikiPhoto_not?: Maybe<String>;
  wikiPhoto_in?: Maybe<String[] | String>;
  wikiPhoto_not_in?: Maybe<String[] | String>;
  wikiPhoto_lt?: Maybe<String>;
  wikiPhoto_lte?: Maybe<String>;
  wikiPhoto_gt?: Maybe<String>;
  wikiPhoto_gte?: Maybe<String>;
  wikiPhoto_contains?: Maybe<String>;
  wikiPhoto_not_contains?: Maybe<String>;
  wikiPhoto_starts_with?: Maybe<String>;
  wikiPhoto_not_starts_with?: Maybe<String>;
  wikiPhoto_ends_with?: Maybe<String>;
  wikiPhoto_not_ends_with?: Maybe<String>;
  imageLink?: Maybe<String>;
  imageLink_not?: Maybe<String>;
  imageLink_in?: Maybe<String[] | String>;
  imageLink_not_in?: Maybe<String[] | String>;
  imageLink_lt?: Maybe<String>;
  imageLink_lte?: Maybe<String>;
  imageLink_gt?: Maybe<String>;
  imageLink_gte?: Maybe<String>;
  imageLink_contains?: Maybe<String>;
  imageLink_not_contains?: Maybe<String>;
  imageLink_starts_with?: Maybe<String>;
  imageLink_not_starts_with?: Maybe<String>;
  imageLink_ends_with?: Maybe<String>;
  imageLink_not_ends_with?: Maybe<String>;
  artist?: Maybe<ArtistWhereInput>;
  notableWork?: Maybe<Boolean>;
  notableWork_not?: Maybe<Boolean>;
  artworkLocation?: Maybe<ArtworkLocationWhereInput>;
  artworkLocationURL?: Maybe<String>;
  artworkLocationURL_not?: Maybe<String>;
  artworkLocationURL_in?: Maybe<String[] | String>;
  artworkLocationURL_not_in?: Maybe<String[] | String>;
  artworkLocationURL_lt?: Maybe<String>;
  artworkLocationURL_lte?: Maybe<String>;
  artworkLocationURL_gt?: Maybe<String>;
  artworkLocationURL_gte?: Maybe<String>;
  artworkLocationURL_contains?: Maybe<String>;
  artworkLocationURL_not_contains?: Maybe<String>;
  artworkLocationURL_starts_with?: Maybe<String>;
  artworkLocationURL_not_starts_with?: Maybe<String>;
  artworkLocationURL_ends_with?: Maybe<String>;
  artworkLocationURL_not_ends_with?: Maybe<String>;
  fileName?: Maybe<String>;
  fileName_not?: Maybe<String>;
  fileName_in?: Maybe<String[] | String>;
  fileName_not_in?: Maybe<String[] | String>;
  fileName_lt?: Maybe<String>;
  fileName_lte?: Maybe<String>;
  fileName_gt?: Maybe<String>;
  fileName_gte?: Maybe<String>;
  fileName_contains?: Maybe<String>;
  fileName_not_contains?: Maybe<String>;
  fileName_starts_with?: Maybe<String>;
  fileName_not_starts_with?: Maybe<String>;
  fileName_ends_with?: Maybe<String>;
  fileName_not_ends_with?: Maybe<String>;
  workName?: Maybe<String>;
  workName_not?: Maybe<String>;
  workName_in?: Maybe<String[] | String>;
  workName_not_in?: Maybe<String[] | String>;
  workName_lt?: Maybe<String>;
  workName_lte?: Maybe<String>;
  workName_gt?: Maybe<String>;
  workName_gte?: Maybe<String>;
  workName_contains?: Maybe<String>;
  workName_not_contains?: Maybe<String>;
  workName_starts_with?: Maybe<String>;
  workName_not_starts_with?: Maybe<String>;
  workName_ends_with?: Maybe<String>;
  workName_not_ends_with?: Maybe<String>;
  workName_english?: Maybe<String>;
  workName_english_not?: Maybe<String>;
  workName_english_in?: Maybe<String[] | String>;
  workName_english_not_in?: Maybe<String[] | String>;
  workName_english_lt?: Maybe<String>;
  workName_english_lte?: Maybe<String>;
  workName_english_gt?: Maybe<String>;
  workName_english_gte?: Maybe<String>;
  workName_english_contains?: Maybe<String>;
  workName_english_not_contains?: Maybe<String>;
  workName_english_starts_with?: Maybe<String>;
  workName_english_not_starts_with?: Maybe<String>;
  workName_english_ends_with?: Maybe<String>;
  workName_english_not_ends_with?: Maybe<String>;
  workName_ascii?: Maybe<String>;
  workName_ascii_not?: Maybe<String>;
  workName_ascii_in?: Maybe<String[] | String>;
  workName_ascii_not_in?: Maybe<String[] | String>;
  workName_ascii_lt?: Maybe<String>;
  workName_ascii_lte?: Maybe<String>;
  workName_ascii_gt?: Maybe<String>;
  workName_ascii_gte?: Maybe<String>;
  workName_ascii_contains?: Maybe<String>;
  workName_ascii_not_contains?: Maybe<String>;
  workName_ascii_starts_with?: Maybe<String>;
  workName_ascii_not_starts_with?: Maybe<String>;
  workName_ascii_ends_with?: Maybe<String>;
  workName_ascii_not_ends_with?: Maybe<String>;
  dateCompleted?: Maybe<String>;
  dateCompleted_not?: Maybe<String>;
  dateCompleted_in?: Maybe<String[] | String>;
  dateCompleted_not_in?: Maybe<String[] | String>;
  dateCompleted_lt?: Maybe<String>;
  dateCompleted_lte?: Maybe<String>;
  dateCompleted_gt?: Maybe<String>;
  dateCompleted_gte?: Maybe<String>;
  dateCompleted_contains?: Maybe<String>;
  dateCompleted_not_contains?: Maybe<String>;
  dateCompleted_starts_with?: Maybe<String>;
  dateCompleted_not_starts_with?: Maybe<String>;
  dateCompleted_ends_with?: Maybe<String>;
  dateCompleted_not_ends_with?: Maybe<String>;
  dateCompletedAccuracy?: Maybe<String>;
  dateCompletedAccuracy_not?: Maybe<String>;
  dateCompletedAccuracy_in?: Maybe<String[] | String>;
  dateCompletedAccuracy_not_in?: Maybe<String[] | String>;
  dateCompletedAccuracy_lt?: Maybe<String>;
  dateCompletedAccuracy_lte?: Maybe<String>;
  dateCompletedAccuracy_gt?: Maybe<String>;
  dateCompletedAccuracy_gte?: Maybe<String>;
  dateCompletedAccuracy_contains?: Maybe<String>;
  dateCompletedAccuracy_not_contains?: Maybe<String>;
  dateCompletedAccuracy_starts_with?: Maybe<String>;
  dateCompletedAccuracy_not_starts_with?: Maybe<String>;
  dateCompletedAccuracy_ends_with?: Maybe<String>;
  dateCompletedAccuracy_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  genre?: Maybe<String>;
  genre_not?: Maybe<String>;
  genre_in?: Maybe<String[] | String>;
  genre_not_in?: Maybe<String[] | String>;
  genre_lt?: Maybe<String>;
  genre_lte?: Maybe<String>;
  genre_gt?: Maybe<String>;
  genre_gte?: Maybe<String>;
  genre_contains?: Maybe<String>;
  genre_not_contains?: Maybe<String>;
  genre_starts_with?: Maybe<String>;
  genre_not_starts_with?: Maybe<String>;
  genre_ends_with?: Maybe<String>;
  genre_not_ends_with?: Maybe<String>;
  medium?: Maybe<String>;
  medium_not?: Maybe<String>;
  medium_in?: Maybe<String[] | String>;
  medium_not_in?: Maybe<String[] | String>;
  medium_lt?: Maybe<String>;
  medium_lte?: Maybe<String>;
  medium_gt?: Maybe<String>;
  medium_gte?: Maybe<String>;
  medium_contains?: Maybe<String>;
  medium_not_contains?: Maybe<String>;
  medium_starts_with?: Maybe<String>;
  medium_not_starts_with?: Maybe<String>;
  medium_ends_with?: Maybe<String>;
  medium_not_ends_with?: Maybe<String>;
  mediumSupport?: Maybe<String>;
  mediumSupport_not?: Maybe<String>;
  mediumSupport_in?: Maybe<String[] | String>;
  mediumSupport_not_in?: Maybe<String[] | String>;
  mediumSupport_lt?: Maybe<String>;
  mediumSupport_lte?: Maybe<String>;
  mediumSupport_gt?: Maybe<String>;
  mediumSupport_gte?: Maybe<String>;
  mediumSupport_contains?: Maybe<String>;
  mediumSupport_not_contains?: Maybe<String>;
  mediumSupport_starts_with?: Maybe<String>;
  mediumSupport_not_starts_with?: Maybe<String>;
  mediumSupport_ends_with?: Maybe<String>;
  mediumSupport_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  descriptionSource?: Maybe<String>;
  descriptionSource_not?: Maybe<String>;
  descriptionSource_in?: Maybe<String[] | String>;
  descriptionSource_not_in?: Maybe<String[] | String>;
  descriptionSource_lt?: Maybe<String>;
  descriptionSource_lte?: Maybe<String>;
  descriptionSource_gt?: Maybe<String>;
  descriptionSource_gte?: Maybe<String>;
  descriptionSource_contains?: Maybe<String>;
  descriptionSource_not_contains?: Maybe<String>;
  descriptionSource_starts_with?: Maybe<String>;
  descriptionSource_not_starts_with?: Maybe<String>;
  descriptionSource_ends_with?: Maybe<String>;
  descriptionSource_not_ends_with?: Maybe<String>;
  accession?: Maybe<String>;
  accession_not?: Maybe<String>;
  accession_in?: Maybe<String[] | String>;
  accession_not_in?: Maybe<String[] | String>;
  accession_lt?: Maybe<String>;
  accession_lte?: Maybe<String>;
  accession_gt?: Maybe<String>;
  accession_gte?: Maybe<String>;
  accession_contains?: Maybe<String>;
  accession_not_contains?: Maybe<String>;
  accession_starts_with?: Maybe<String>;
  accession_not_starts_with?: Maybe<String>;
  accession_ends_with?: Maybe<String>;
  accession_not_ends_with?: Maybe<String>;
  creditLine?: Maybe<String>;
  creditLine_not?: Maybe<String>;
  creditLine_in?: Maybe<String[] | String>;
  creditLine_not_in?: Maybe<String[] | String>;
  creditLine_lt?: Maybe<String>;
  creditLine_lte?: Maybe<String>;
  creditLine_gt?: Maybe<String>;
  creditLine_gte?: Maybe<String>;
  creditLine_contains?: Maybe<String>;
  creditLine_not_contains?: Maybe<String>;
  creditLine_starts_with?: Maybe<String>;
  creditLine_not_starts_with?: Maybe<String>;
  creditLine_ends_with?: Maybe<String>;
  creditLine_not_ends_with?: Maybe<String>;
  dimensionCoreW_mm?: Maybe<Int>;
  dimensionCoreW_mm_not?: Maybe<Int>;
  dimensionCoreW_mm_in?: Maybe<Int[] | Int>;
  dimensionCoreW_mm_not_in?: Maybe<Int[] | Int>;
  dimensionCoreW_mm_lt?: Maybe<Int>;
  dimensionCoreW_mm_lte?: Maybe<Int>;
  dimensionCoreW_mm_gt?: Maybe<Int>;
  dimensionCoreW_mm_gte?: Maybe<Int>;
  dimensionCoreH_mm?: Maybe<Int>;
  dimensionCoreH_mm_not?: Maybe<Int>;
  dimensionCoreH_mm_in?: Maybe<Int[] | Int>;
  dimensionCoreH_mm_not_in?: Maybe<Int[] | Int>;
  dimensionCoreH_mm_lt?: Maybe<Int>;
  dimensionCoreH_mm_lte?: Maybe<Int>;
  dimensionCoreH_mm_gt?: Maybe<Int>;
  dimensionCoreH_mm_gte?: Maybe<Int>;
  dimensionCoreD_mm?: Maybe<Int>;
  dimensionCoreD_mm_not?: Maybe<Int>;
  dimensionCoreD_mm_in?: Maybe<Int[] | Int>;
  dimensionCoreD_mm_not_in?: Maybe<Int[] | Int>;
  dimensionCoreD_mm_lt?: Maybe<Int>;
  dimensionCoreD_mm_lte?: Maybe<Int>;
  dimensionCoreD_mm_gt?: Maybe<Int>;
  dimensionCoreD_mm_gte?: Maybe<Int>;
  dimensionCoreWHD_in?: Maybe<String>;
  dimensionCoreWHD_in_not?: Maybe<String>;
  dimensionCoreWHD_in_in?: Maybe<String[] | String>;
  dimensionCoreWHD_in_not_in?: Maybe<String[] | String>;
  dimensionCoreWHD_in_lt?: Maybe<String>;
  dimensionCoreWHD_in_lte?: Maybe<String>;
  dimensionCoreWHD_in_gt?: Maybe<String>;
  dimensionCoreWHD_in_gte?: Maybe<String>;
  dimensionCoreWHD_in_contains?: Maybe<String>;
  dimensionCoreWHD_in_not_contains?: Maybe<String>;
  dimensionCoreWHD_in_starts_with?: Maybe<String>;
  dimensionCoreWHD_in_not_starts_with?: Maybe<String>;
  dimensionCoreWHD_in_ends_with?: Maybe<String>;
  dimensionCoreWHD_in_not_ends_with?: Maybe<String>;
  dimensionFramedW_mm?: Maybe<Int>;
  dimensionFramedW_mm_not?: Maybe<Int>;
  dimensionFramedW_mm_in?: Maybe<Int[] | Int>;
  dimensionFramedW_mm_not_in?: Maybe<Int[] | Int>;
  dimensionFramedW_mm_lt?: Maybe<Int>;
  dimensionFramedW_mm_lte?: Maybe<Int>;
  dimensionFramedW_mm_gt?: Maybe<Int>;
  dimensionFramedW_mm_gte?: Maybe<Int>;
  dimensionFramedH_mm?: Maybe<Int>;
  dimensionFramedH_mm_not?: Maybe<Int>;
  dimensionFramedH_mm_in?: Maybe<Int[] | Int>;
  dimensionFramedH_mm_not_in?: Maybe<Int[] | Int>;
  dimensionFramedH_mm_lt?: Maybe<Int>;
  dimensionFramedH_mm_lte?: Maybe<Int>;
  dimensionFramedH_mm_gt?: Maybe<Int>;
  dimensionFramedH_mm_gte?: Maybe<Int>;
  dimensionFramedD_mm?: Maybe<Int>;
  dimensionFramedD_mm_not?: Maybe<Int>;
  dimensionFramedD_mm_in?: Maybe<Int[] | Int>;
  dimensionFramedD_mm_not_in?: Maybe<Int[] | Int>;
  dimensionFramedD_mm_lt?: Maybe<Int>;
  dimensionFramedD_mm_lte?: Maybe<Int>;
  dimensionFramedD_mm_gt?: Maybe<Int>;
  dimensionFramedD_mm_gte?: Maybe<Int>;
  dimensionFramedWHD_in?: Maybe<String>;
  dimensionFramedWHD_in_not?: Maybe<String>;
  dimensionFramedWHD_in_in?: Maybe<String[] | String>;
  dimensionFramedWHD_in_not_in?: Maybe<String[] | String>;
  dimensionFramedWHD_in_lt?: Maybe<String>;
  dimensionFramedWHD_in_lte?: Maybe<String>;
  dimensionFramedWHD_in_gt?: Maybe<String>;
  dimensionFramedWHD_in_gte?: Maybe<String>;
  dimensionFramedWHD_in_contains?: Maybe<String>;
  dimensionFramedWHD_in_not_contains?: Maybe<String>;
  dimensionFramedWHD_in_starts_with?: Maybe<String>;
  dimensionFramedWHD_in_not_starts_with?: Maybe<String>;
  dimensionFramedWHD_in_ends_with?: Maybe<String>;
  dimensionFramedWHD_in_not_ends_with?: Maybe<String>;
  signature?: Maybe<String>;
  signature_not?: Maybe<String>;
  signature_in?: Maybe<String[] | String>;
  signature_not_in?: Maybe<String[] | String>;
  signature_lt?: Maybe<String>;
  signature_lte?: Maybe<String>;
  signature_gt?: Maybe<String>;
  signature_gte?: Maybe<String>;
  signature_contains?: Maybe<String>;
  signature_not_contains?: Maybe<String>;
  signature_starts_with?: Maybe<String>;
  signature_not_starts_with?: Maybe<String>;
  signature_ends_with?: Maybe<String>;
  signature_not_ends_with?: Maybe<String>;
  onviewAt?: Maybe<String>;
  onviewAt_not?: Maybe<String>;
  onviewAt_in?: Maybe<String[] | String>;
  onviewAt_not_in?: Maybe<String[] | String>;
  onviewAt_lt?: Maybe<String>;
  onviewAt_lte?: Maybe<String>;
  onviewAt_gt?: Maybe<String>;
  onviewAt_gte?: Maybe<String>;
  onviewAt_contains?: Maybe<String>;
  onviewAt_not_contains?: Maybe<String>;
  onviewAt_starts_with?: Maybe<String>;
  onviewAt_not_starts_with?: Maybe<String>;
  onviewAt_ends_with?: Maybe<String>;
  onviewAt_not_ends_with?: Maybe<String>;
  otherDescription?: Maybe<String>;
  otherDescription_not?: Maybe<String>;
  otherDescription_in?: Maybe<String[] | String>;
  otherDescription_not_in?: Maybe<String[] | String>;
  otherDescription_lt?: Maybe<String>;
  otherDescription_lte?: Maybe<String>;
  otherDescription_gt?: Maybe<String>;
  otherDescription_gte?: Maybe<String>;
  otherDescription_contains?: Maybe<String>;
  otherDescription_not_contains?: Maybe<String>;
  otherDescription_starts_with?: Maybe<String>;
  otherDescription_not_starts_with?: Maybe<String>;
  otherDescription_ends_with?: Maybe<String>;
  otherDescription_not_ends_with?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxName_not?: Maybe<String>;
  imageMaxName_in?: Maybe<String[] | String>;
  imageMaxName_not_in?: Maybe<String[] | String>;
  imageMaxName_lt?: Maybe<String>;
  imageMaxName_lte?: Maybe<String>;
  imageMaxName_gt?: Maybe<String>;
  imageMaxName_gte?: Maybe<String>;
  imageMaxName_contains?: Maybe<String>;
  imageMaxName_not_contains?: Maybe<String>;
  imageMaxName_starts_with?: Maybe<String>;
  imageMaxName_not_starts_with?: Maybe<String>;
  imageMaxName_ends_with?: Maybe<String>;
  imageMaxName_not_ends_with?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxWidth_not?: Maybe<Int>;
  imageMaxWidth_in?: Maybe<Int[] | Int>;
  imageMaxWidth_not_in?: Maybe<Int[] | Int>;
  imageMaxWidth_lt?: Maybe<Int>;
  imageMaxWidth_lte?: Maybe<Int>;
  imageMaxWidth_gt?: Maybe<Int>;
  imageMaxWidth_gte?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageMaxHeight_not?: Maybe<Int>;
  imageMaxHeight_in?: Maybe<Int[] | Int>;
  imageMaxHeight_not_in?: Maybe<Int[] | Int>;
  imageMaxHeight_lt?: Maybe<Int>;
  imageMaxHeight_lte?: Maybe<Int>;
  imageMaxHeight_gt?: Maybe<Int>;
  imageMaxHeight_gte?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptName_not?: Maybe<String>;
  imageOptName_in?: Maybe<String[] | String>;
  imageOptName_not_in?: Maybe<String[] | String>;
  imageOptName_lt?: Maybe<String>;
  imageOptName_lte?: Maybe<String>;
  imageOptName_gt?: Maybe<String>;
  imageOptName_gte?: Maybe<String>;
  imageOptName_contains?: Maybe<String>;
  imageOptName_not_contains?: Maybe<String>;
  imageOptName_starts_with?: Maybe<String>;
  imageOptName_not_starts_with?: Maybe<String>;
  imageOptName_ends_with?: Maybe<String>;
  imageOptName_not_ends_with?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptWidth_not?: Maybe<Int>;
  imageOptWidth_in?: Maybe<Int[] | Int>;
  imageOptWidth_not_in?: Maybe<Int[] | Int>;
  imageOptWidth_lt?: Maybe<Int>;
  imageOptWidth_lte?: Maybe<Int>;
  imageOptWidth_gt?: Maybe<Int>;
  imageOptWidth_gte?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageOptHeight_not?: Maybe<Int>;
  imageOptHeight_in?: Maybe<Int[] | Int>;
  imageOptHeight_not_in?: Maybe<Int[] | Int>;
  imageOptHeight_lt?: Maybe<Int>;
  imageOptHeight_lte?: Maybe<Int>;
  imageOptHeight_gt?: Maybe<Int>;
  imageOptHeight_gte?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmName_not?: Maybe<String>;
  imageThmName_in?: Maybe<String[] | String>;
  imageThmName_not_in?: Maybe<String[] | String>;
  imageThmName_lt?: Maybe<String>;
  imageThmName_lte?: Maybe<String>;
  imageThmName_gt?: Maybe<String>;
  imageThmName_gte?: Maybe<String>;
  imageThmName_contains?: Maybe<String>;
  imageThmName_not_contains?: Maybe<String>;
  imageThmName_starts_with?: Maybe<String>;
  imageThmName_not_starts_with?: Maybe<String>;
  imageThmName_ends_with?: Maybe<String>;
  imageThmName_not_ends_with?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmWidth_not?: Maybe<Int>;
  imageThmWidth_in?: Maybe<Int[] | Int>;
  imageThmWidth_not_in?: Maybe<Int[] | Int>;
  imageThmWidth_lt?: Maybe<Int>;
  imageThmWidth_lte?: Maybe<Int>;
  imageThmWidth_gt?: Maybe<Int>;
  imageThmWidth_gte?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
  imageThmHeight_not?: Maybe<Int>;
  imageThmHeight_in?: Maybe<Int[] | Int>;
  imageThmHeight_not_in?: Maybe<Int[] | Int>;
  imageThmHeight_lt?: Maybe<Int>;
  imageThmHeight_lte?: Maybe<Int>;
  imageThmHeight_gt?: Maybe<Int>;
  imageThmHeight_gte?: Maybe<Int>;
  auctions_every?: Maybe<AuctionArtworkWhereInput>;
  auctions_some?: Maybe<AuctionArtworkWhereInput>;
  auctions_none?: Maybe<AuctionArtworkWhereInput>;
  AND?: Maybe<ArtworkWhereInput[] | ArtworkWhereInput>;
  OR?: Maybe<ArtworkWhereInput[] | ArtworkWhereInput>;
  NOT?: Maybe<ArtworkWhereInput[] | ArtworkWhereInput>;
}

export interface ArtworkLocationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  easyId?: Maybe<String>;
  easyId_not?: Maybe<String>;
  easyId_in?: Maybe<String[] | String>;
  easyId_not_in?: Maybe<String[] | String>;
  easyId_lt?: Maybe<String>;
  easyId_lte?: Maybe<String>;
  easyId_gt?: Maybe<String>;
  easyId_gte?: Maybe<String>;
  easyId_contains?: Maybe<String>;
  easyId_not_contains?: Maybe<String>;
  easyId_starts_with?: Maybe<String>;
  easyId_not_starts_with?: Maybe<String>;
  easyId_ends_with?: Maybe<String>;
  easyId_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deletedAt?: Maybe<DateTimeInput>;
  deletedAt_not?: Maybe<DateTimeInput>;
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_lt?: Maybe<DateTimeInput>;
  deletedAt_lte?: Maybe<DateTimeInput>;
  deletedAt_gt?: Maybe<DateTimeInput>;
  deletedAt_gte?: Maybe<DateTimeInput>;
  owner?: Maybe<UserWhereInput>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPage_not?: Maybe<String>;
  wikiPage_in?: Maybe<String[] | String>;
  wikiPage_not_in?: Maybe<String[] | String>;
  wikiPage_lt?: Maybe<String>;
  wikiPage_lte?: Maybe<String>;
  wikiPage_gt?: Maybe<String>;
  wikiPage_gte?: Maybe<String>;
  wikiPage_contains?: Maybe<String>;
  wikiPage_not_contains?: Maybe<String>;
  wikiPage_starts_with?: Maybe<String>;
  wikiPage_not_starts_with?: Maybe<String>;
  wikiPage_ends_with?: Maybe<String>;
  wikiPage_not_ends_with?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  wikiPhoto_not?: Maybe<String>;
  wikiPhoto_in?: Maybe<String[] | String>;
  wikiPhoto_not_in?: Maybe<String[] | String>;
  wikiPhoto_lt?: Maybe<String>;
  wikiPhoto_lte?: Maybe<String>;
  wikiPhoto_gt?: Maybe<String>;
  wikiPhoto_gte?: Maybe<String>;
  wikiPhoto_contains?: Maybe<String>;
  wikiPhoto_not_contains?: Maybe<String>;
  wikiPhoto_starts_with?: Maybe<String>;
  wikiPhoto_not_starts_with?: Maybe<String>;
  wikiPhoto_ends_with?: Maybe<String>;
  wikiPhoto_not_ends_with?: Maybe<String>;
  imageLink?: Maybe<String>;
  imageLink_not?: Maybe<String>;
  imageLink_in?: Maybe<String[] | String>;
  imageLink_not_in?: Maybe<String[] | String>;
  imageLink_lt?: Maybe<String>;
  imageLink_lte?: Maybe<String>;
  imageLink_gt?: Maybe<String>;
  imageLink_gte?: Maybe<String>;
  imageLink_contains?: Maybe<String>;
  imageLink_not_contains?: Maybe<String>;
  imageLink_starts_with?: Maybe<String>;
  imageLink_not_starts_with?: Maybe<String>;
  imageLink_ends_with?: Maybe<String>;
  imageLink_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  nickname?: Maybe<String>;
  nickname_not?: Maybe<String>;
  nickname_in?: Maybe<String[] | String>;
  nickname_not_in?: Maybe<String[] | String>;
  nickname_lt?: Maybe<String>;
  nickname_lte?: Maybe<String>;
  nickname_gt?: Maybe<String>;
  nickname_gte?: Maybe<String>;
  nickname_contains?: Maybe<String>;
  nickname_not_contains?: Maybe<String>;
  nickname_starts_with?: Maybe<String>;
  nickname_not_starts_with?: Maybe<String>;
  nickname_ends_with?: Maybe<String>;
  nickname_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  dateFirstOpened?: Maybe<String>;
  dateFirstOpened_not?: Maybe<String>;
  dateFirstOpened_in?: Maybe<String[] | String>;
  dateFirstOpened_not_in?: Maybe<String[] | String>;
  dateFirstOpened_lt?: Maybe<String>;
  dateFirstOpened_lte?: Maybe<String>;
  dateFirstOpened_gt?: Maybe<String>;
  dateFirstOpened_gte?: Maybe<String>;
  dateFirstOpened_contains?: Maybe<String>;
  dateFirstOpened_not_contains?: Maybe<String>;
  dateFirstOpened_starts_with?: Maybe<String>;
  dateFirstOpened_not_starts_with?: Maybe<String>;
  dateFirstOpened_ends_with?: Maybe<String>;
  dateFirstOpened_not_ends_with?: Maybe<String>;
  streetAddress?: Maybe<String>;
  streetAddress_not?: Maybe<String>;
  streetAddress_in?: Maybe<String[] | String>;
  streetAddress_not_in?: Maybe<String[] | String>;
  streetAddress_lt?: Maybe<String>;
  streetAddress_lte?: Maybe<String>;
  streetAddress_gt?: Maybe<String>;
  streetAddress_gte?: Maybe<String>;
  streetAddress_contains?: Maybe<String>;
  streetAddress_not_contains?: Maybe<String>;
  streetAddress_starts_with?: Maybe<String>;
  streetAddress_not_starts_with?: Maybe<String>;
  streetAddress_ends_with?: Maybe<String>;
  streetAddress_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  postalCode?: Maybe<String>;
  postalCode_not?: Maybe<String>;
  postalCode_in?: Maybe<String[] | String>;
  postalCode_not_in?: Maybe<String[] | String>;
  postalCode_lt?: Maybe<String>;
  postalCode_lte?: Maybe<String>;
  postalCode_gt?: Maybe<String>;
  postalCode_gte?: Maybe<String>;
  postalCode_contains?: Maybe<String>;
  postalCode_not_contains?: Maybe<String>;
  postalCode_starts_with?: Maybe<String>;
  postalCode_not_starts_with?: Maybe<String>;
  postalCode_ends_with?: Maybe<String>;
  postalCode_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  coorE?: Maybe<Int>;
  coorE_not?: Maybe<Int>;
  coorE_in?: Maybe<Int[] | Int>;
  coorE_not_in?: Maybe<Int[] | Int>;
  coorE_lt?: Maybe<Int>;
  coorE_lte?: Maybe<Int>;
  coorE_gt?: Maybe<Int>;
  coorE_gte?: Maybe<Int>;
  coorN?: Maybe<Int>;
  coorN_not?: Maybe<Int>;
  coorN_in?: Maybe<Int[] | Int>;
  coorN_not_in?: Maybe<Int[] | Int>;
  coorN_lt?: Maybe<Int>;
  coorN_lte?: Maybe<Int>;
  coorN_gt?: Maybe<Int>;
  coorN_gte?: Maybe<Int>;
  website?: Maybe<String>;
  website_not?: Maybe<String>;
  website_in?: Maybe<String[] | String>;
  website_not_in?: Maybe<String[] | String>;
  website_lt?: Maybe<String>;
  website_lte?: Maybe<String>;
  website_gt?: Maybe<String>;
  website_gte?: Maybe<String>;
  website_contains?: Maybe<String>;
  website_not_contains?: Maybe<String>;
  website_starts_with?: Maybe<String>;
  website_not_starts_with?: Maybe<String>;
  website_ends_with?: Maybe<String>;
  website_not_ends_with?: Maybe<String>;
  isMuseum?: Maybe<Boolean>;
  isMuseum_not?: Maybe<Boolean>;
  imageMaxName?: Maybe<String>;
  imageMaxName_not?: Maybe<String>;
  imageMaxName_in?: Maybe<String[] | String>;
  imageMaxName_not_in?: Maybe<String[] | String>;
  imageMaxName_lt?: Maybe<String>;
  imageMaxName_lte?: Maybe<String>;
  imageMaxName_gt?: Maybe<String>;
  imageMaxName_gte?: Maybe<String>;
  imageMaxName_contains?: Maybe<String>;
  imageMaxName_not_contains?: Maybe<String>;
  imageMaxName_starts_with?: Maybe<String>;
  imageMaxName_not_starts_with?: Maybe<String>;
  imageMaxName_ends_with?: Maybe<String>;
  imageMaxName_not_ends_with?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxWidth_not?: Maybe<Int>;
  imageMaxWidth_in?: Maybe<Int[] | Int>;
  imageMaxWidth_not_in?: Maybe<Int[] | Int>;
  imageMaxWidth_lt?: Maybe<Int>;
  imageMaxWidth_lte?: Maybe<Int>;
  imageMaxWidth_gt?: Maybe<Int>;
  imageMaxWidth_gte?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageMaxHeight_not?: Maybe<Int>;
  imageMaxHeight_in?: Maybe<Int[] | Int>;
  imageMaxHeight_not_in?: Maybe<Int[] | Int>;
  imageMaxHeight_lt?: Maybe<Int>;
  imageMaxHeight_lte?: Maybe<Int>;
  imageMaxHeight_gt?: Maybe<Int>;
  imageMaxHeight_gte?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptName_not?: Maybe<String>;
  imageOptName_in?: Maybe<String[] | String>;
  imageOptName_not_in?: Maybe<String[] | String>;
  imageOptName_lt?: Maybe<String>;
  imageOptName_lte?: Maybe<String>;
  imageOptName_gt?: Maybe<String>;
  imageOptName_gte?: Maybe<String>;
  imageOptName_contains?: Maybe<String>;
  imageOptName_not_contains?: Maybe<String>;
  imageOptName_starts_with?: Maybe<String>;
  imageOptName_not_starts_with?: Maybe<String>;
  imageOptName_ends_with?: Maybe<String>;
  imageOptName_not_ends_with?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptWidth_not?: Maybe<Int>;
  imageOptWidth_in?: Maybe<Int[] | Int>;
  imageOptWidth_not_in?: Maybe<Int[] | Int>;
  imageOptWidth_lt?: Maybe<Int>;
  imageOptWidth_lte?: Maybe<Int>;
  imageOptWidth_gt?: Maybe<Int>;
  imageOptWidth_gte?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageOptHeight_not?: Maybe<Int>;
  imageOptHeight_in?: Maybe<Int[] | Int>;
  imageOptHeight_not_in?: Maybe<Int[] | Int>;
  imageOptHeight_lt?: Maybe<Int>;
  imageOptHeight_lte?: Maybe<Int>;
  imageOptHeight_gt?: Maybe<Int>;
  imageOptHeight_gte?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmName_not?: Maybe<String>;
  imageThmName_in?: Maybe<String[] | String>;
  imageThmName_not_in?: Maybe<String[] | String>;
  imageThmName_lt?: Maybe<String>;
  imageThmName_lte?: Maybe<String>;
  imageThmName_gt?: Maybe<String>;
  imageThmName_gte?: Maybe<String>;
  imageThmName_contains?: Maybe<String>;
  imageThmName_not_contains?: Maybe<String>;
  imageThmName_starts_with?: Maybe<String>;
  imageThmName_not_starts_with?: Maybe<String>;
  imageThmName_ends_with?: Maybe<String>;
  imageThmName_not_ends_with?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmWidth_not?: Maybe<Int>;
  imageThmWidth_in?: Maybe<Int[] | Int>;
  imageThmWidth_not_in?: Maybe<Int[] | Int>;
  imageThmWidth_lt?: Maybe<Int>;
  imageThmWidth_lte?: Maybe<Int>;
  imageThmWidth_gt?: Maybe<Int>;
  imageThmWidth_gte?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
  imageThmHeight_not?: Maybe<Int>;
  imageThmHeight_in?: Maybe<Int[] | Int>;
  imageThmHeight_not_in?: Maybe<Int[] | Int>;
  imageThmHeight_lt?: Maybe<Int>;
  imageThmHeight_lte?: Maybe<Int>;
  imageThmHeight_gt?: Maybe<Int>;
  imageThmHeight_gte?: Maybe<Int>;
  artworks_every?: Maybe<ArtworkWhereInput>;
  artworks_some?: Maybe<ArtworkWhereInput>;
  artworks_none?: Maybe<ArtworkWhereInput>;
  artists_every?: Maybe<ArtistWhereInput>;
  artists_some?: Maybe<ArtistWhereInput>;
  artists_none?: Maybe<ArtistWhereInput>;
  AND?: Maybe<ArtworkLocationWhereInput[] | ArtworkLocationWhereInput>;
  OR?: Maybe<ArtworkLocationWhereInput[] | ArtworkLocationWhereInput>;
  NOT?: Maybe<ArtworkLocationWhereInput[] | ArtworkLocationWhereInput>;
}

export interface AuctionArtworkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deletedAt?: Maybe<DateTimeInput>;
  deletedAt_not?: Maybe<DateTimeInput>;
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_lt?: Maybe<DateTimeInput>;
  deletedAt_lte?: Maybe<DateTimeInput>;
  deletedAt_gt?: Maybe<DateTimeInput>;
  deletedAt_gte?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  endDate_not?: Maybe<DateTimeInput>;
  endDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_lt?: Maybe<DateTimeInput>;
  endDate_lte?: Maybe<DateTimeInput>;
  endDate_gt?: Maybe<DateTimeInput>;
  endDate_gte?: Maybe<DateTimeInput>;
  withdrawnDate?: Maybe<DateTimeInput>;
  withdrawnDate_not?: Maybe<DateTimeInput>;
  withdrawnDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  withdrawnDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  withdrawnDate_lt?: Maybe<DateTimeInput>;
  withdrawnDate_lte?: Maybe<DateTimeInput>;
  withdrawnDate_gt?: Maybe<DateTimeInput>;
  withdrawnDate_gte?: Maybe<DateTimeInput>;
  saleDate?: Maybe<DateTimeInput>;
  saleDate_not?: Maybe<DateTimeInput>;
  saleDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  saleDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  saleDate_lt?: Maybe<DateTimeInput>;
  saleDate_lte?: Maybe<DateTimeInput>;
  saleDate_gt?: Maybe<DateTimeInput>;
  saleDate_gte?: Maybe<DateTimeInput>;
  refundDate?: Maybe<DateTimeInput>;
  refundDate_not?: Maybe<DateTimeInput>;
  refundDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  refundDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  refundDate_lt?: Maybe<DateTimeInput>;
  refundDate_lte?: Maybe<DateTimeInput>;
  refundDate_gt?: Maybe<DateTimeInput>;
  refundDate_gte?: Maybe<DateTimeInput>;
  reserve?: Maybe<Int>;
  reserve_not?: Maybe<Int>;
  reserve_in?: Maybe<Int[] | Int>;
  reserve_not_in?: Maybe<Int[] | Int>;
  reserve_lt?: Maybe<Int>;
  reserve_lte?: Maybe<Int>;
  reserve_gt?: Maybe<Int>;
  reserve_gte?: Maybe<Int>;
  initialPrice?: Maybe<Int>;
  initialPrice_not?: Maybe<Int>;
  initialPrice_in?: Maybe<Int[] | Int>;
  initialPrice_not_in?: Maybe<Int[] | Int>;
  initialPrice_lt?: Maybe<Int>;
  initialPrice_lte?: Maybe<Int>;
  initialPrice_gt?: Maybe<Int>;
  initialPrice_gte?: Maybe<Int>;
  buyoutPrice?: Maybe<Int>;
  buyoutPrice_not?: Maybe<Int>;
  buyoutPrice_in?: Maybe<Int[] | Int>;
  buyoutPrice_not_in?: Maybe<Int[] | Int>;
  buyoutPrice_lt?: Maybe<Int>;
  buyoutPrice_lte?: Maybe<Int>;
  buyoutPrice_gt?: Maybe<Int>;
  buyoutPrice_gte?: Maybe<Int>;
  salePrice?: Maybe<Int>;
  salePrice_not?: Maybe<Int>;
  salePrice_in?: Maybe<Int[] | Int>;
  salePrice_not_in?: Maybe<Int[] | Int>;
  salePrice_lt?: Maybe<Int>;
  salePrice_lte?: Maybe<Int>;
  salePrice_gt?: Maybe<Int>;
  salePrice_gte?: Maybe<Int>;
  artwork?: Maybe<ArtworkWhereInput>;
  seller?: Maybe<UserWhereInput>;
  buyer?: Maybe<UserWhereInput>;
  bids_every?: Maybe<AuctionArtworkBidWhereInput>;
  bids_some?: Maybe<AuctionArtworkBidWhereInput>;
  bids_none?: Maybe<AuctionArtworkBidWhereInput>;
  watchers_every?: Maybe<UserWhereInput>;
  watchers_some?: Maybe<UserWhereInput>;
  watchers_none?: Maybe<UserWhereInput>;
  AND?: Maybe<AuctionArtworkWhereInput[] | AuctionArtworkWhereInput>;
  OR?: Maybe<AuctionArtworkWhereInput[] | AuctionArtworkWhereInput>;
  NOT?: Maybe<AuctionArtworkWhereInput[] | AuctionArtworkWhereInput>;
}

export interface AuctionArtworkBidWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deletedAt?: Maybe<DateTimeInput>;
  deletedAt_not?: Maybe<DateTimeInput>;
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_lt?: Maybe<DateTimeInput>;
  deletedAt_lte?: Maybe<DateTimeInput>;
  deletedAt_gt?: Maybe<DateTimeInput>;
  deletedAt_gte?: Maybe<DateTimeInput>;
  auction?: Maybe<AuctionArtworkWhereInput>;
  bidder?: Maybe<UserWhereInput>;
  amount?: Maybe<Int>;
  amount_not?: Maybe<Int>;
  amount_in?: Maybe<Int[] | Int>;
  amount_not_in?: Maybe<Int[] | Int>;
  amount_lt?: Maybe<Int>;
  amount_lte?: Maybe<Int>;
  amount_gt?: Maybe<Int>;
  amount_gte?: Maybe<Int>;
  AND?: Maybe<AuctionArtworkBidWhereInput[] | AuctionArtworkBidWhereInput>;
  OR?: Maybe<AuctionArtworkBidWhereInput[] | AuctionArtworkBidWhereInput>;
  NOT?: Maybe<AuctionArtworkBidWhereInput[] | AuctionArtworkBidWhereInput>;
}

export type ArtworkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  easyId?: Maybe<String>;
}>;

export type ArtworkLocationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  easyId?: Maybe<String>;
}>;

export type AuctionArtworkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type AuctionArtworkBidWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  easyId?: Maybe<String>;
}>;

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  easyId?: Maybe<String>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  easyId?: Maybe<String>;
  email?: Maybe<String>;
  email_lcase?: Maybe<String>;
}>;

export interface ArtistCreateInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  owner: UserCreateOneWithoutArtistRecordsInput;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  birthName?: Maybe<String>;
  commonName?: Maybe<String>;
  dateOfBirth?: Maybe<String>;
  dateOfBirthAccuracy?: Maybe<String>;
  dateOfDeath?: Maybe<String>;
  dateOfDeathAccuracy?: Maybe<String>;
  nationality?: Maybe<String>;
  knownFor?: Maybe<String>;
  movements?: Maybe<String>;
  gender?: Maybe<String>;
  artworks?: Maybe<ArtworkCreateManyWithoutArtistInput>;
  artworkLocations?: Maybe<ArtworkLocationCreateManyWithoutArtistsInput>;
  deceased: Boolean;
  birthCountry?: Maybe<String>;
  birthLocation?: Maybe<String>;
  birthLocationDetails?: Maybe<String>;
  deathCountry?: Maybe<String>;
  deathLocation?: Maybe<String>;
  deathLocationDetails?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
}

export interface UserCreateOneWithoutArtistRecordsInput {
  create?: Maybe<UserCreateWithoutArtistRecordsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutArtistRecordsInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  name: String;
  name_lcase: String;
  email: String;
  email_lcase: String;
  emailValidated?: Maybe<Boolean>;
  active?: Maybe<Boolean>;
  posts?: Maybe<PostCreateManyWithoutOwnerInput>;
  comments?: Maybe<CommentCreateManyWithoutOwnerInput>;
  artworkRecords?: Maybe<ArtworkCreateManyWithoutOwnerInput>;
  artworkLocationRecords?: Maybe<ArtworkLocationCreateManyWithoutOwnerInput>;
  auctionArtworkSeller?: Maybe<AuctionArtworkCreateManyWithoutSellerInput>;
  auctionArtworkBuyer?: Maybe<AuctionArtworkCreateManyWithoutBuyerInput>;
  auctionArtworkWatcher?: Maybe<AuctionArtworkCreateManyWithoutWatchersInput>;
  auctionArtworkBid?: Maybe<AuctionArtworkBidCreateManyWithoutBidderInput>;
  password: String;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserCreatepermissionsInput>;
}

export interface PostCreateManyWithoutOwnerInput {
  create?: Maybe<PostCreateWithoutOwnerInput[] | PostCreateWithoutOwnerInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  title: String;
  title_lcase: String;
  body: String;
  body_lcase: String;
  isPublished?: Maybe<Boolean>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
}

export interface CommentCreateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  owner: UserCreateOneWithoutCommentsInput;
  text: String;
  text_lcase: String;
  isPublished?: Maybe<Boolean>;
}

export interface UserCreateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  name: String;
  name_lcase: String;
  email: String;
  email_lcase: String;
  emailValidated?: Maybe<Boolean>;
  active?: Maybe<Boolean>;
  posts?: Maybe<PostCreateManyWithoutOwnerInput>;
  artistRecords?: Maybe<ArtistCreateManyWithoutOwnerInput>;
  artworkRecords?: Maybe<ArtworkCreateManyWithoutOwnerInput>;
  artworkLocationRecords?: Maybe<ArtworkLocationCreateManyWithoutOwnerInput>;
  auctionArtworkSeller?: Maybe<AuctionArtworkCreateManyWithoutSellerInput>;
  auctionArtworkBuyer?: Maybe<AuctionArtworkCreateManyWithoutBuyerInput>;
  auctionArtworkWatcher?: Maybe<AuctionArtworkCreateManyWithoutWatchersInput>;
  auctionArtworkBid?: Maybe<AuctionArtworkBidCreateManyWithoutBidderInput>;
  password: String;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserCreatepermissionsInput>;
}

export interface ArtistCreateManyWithoutOwnerInput {
  create?: Maybe<
    ArtistCreateWithoutOwnerInput[] | ArtistCreateWithoutOwnerInput
  >;
  connect?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
}

export interface ArtistCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  birthName?: Maybe<String>;
  commonName?: Maybe<String>;
  dateOfBirth?: Maybe<String>;
  dateOfBirthAccuracy?: Maybe<String>;
  dateOfDeath?: Maybe<String>;
  dateOfDeathAccuracy?: Maybe<String>;
  nationality?: Maybe<String>;
  knownFor?: Maybe<String>;
  movements?: Maybe<String>;
  gender?: Maybe<String>;
  artworks?: Maybe<ArtworkCreateManyWithoutArtistInput>;
  artworkLocations?: Maybe<ArtworkLocationCreateManyWithoutArtistsInput>;
  deceased: Boolean;
  birthCountry?: Maybe<String>;
  birthLocation?: Maybe<String>;
  birthLocationDetails?: Maybe<String>;
  deathCountry?: Maybe<String>;
  deathLocation?: Maybe<String>;
  deathLocationDetails?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
}

export interface ArtworkCreateManyWithoutArtistInput {
  create?: Maybe<
    ArtworkCreateWithoutArtistInput[] | ArtworkCreateWithoutArtistInput
  >;
  connect?: Maybe<ArtworkWhereUniqueInput[] | ArtworkWhereUniqueInput>;
}

export interface ArtworkCreateWithoutArtistInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  owner: UserCreateOneWithoutArtworkRecordsInput;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  notableWork?: Maybe<Boolean>;
  artworkLocation: ArtworkLocationCreateOneWithoutArtworksInput;
  artworkLocationURL?: Maybe<String>;
  fileName?: Maybe<String>;
  workName?: Maybe<String>;
  workName_english?: Maybe<String>;
  workName_ascii?: Maybe<String>;
  dateCompleted?: Maybe<String>;
  dateCompletedAccuracy?: Maybe<String>;
  type?: Maybe<String>;
  genre?: Maybe<String>;
  medium?: Maybe<String>;
  mediumSupport?: Maybe<String>;
  description?: Maybe<String>;
  descriptionSource?: Maybe<String>;
  accession?: Maybe<String>;
  creditLine?: Maybe<String>;
  dimensionCoreW_mm?: Maybe<Int>;
  dimensionCoreH_mm?: Maybe<Int>;
  dimensionCoreD_mm?: Maybe<Int>;
  dimensionCoreWHD_in?: Maybe<String>;
  dimensionFramedW_mm?: Maybe<Int>;
  dimensionFramedH_mm?: Maybe<Int>;
  dimensionFramedD_mm?: Maybe<Int>;
  dimensionFramedWHD_in?: Maybe<String>;
  signature?: Maybe<String>;
  onviewAt?: Maybe<String>;
  otherDescription?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
  auctions?: Maybe<AuctionArtworkCreateManyWithoutArtworkInput>;
}

export interface UserCreateOneWithoutArtworkRecordsInput {
  create?: Maybe<UserCreateWithoutArtworkRecordsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutArtworkRecordsInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  name: String;
  name_lcase: String;
  email: String;
  email_lcase: String;
  emailValidated?: Maybe<Boolean>;
  active?: Maybe<Boolean>;
  posts?: Maybe<PostCreateManyWithoutOwnerInput>;
  comments?: Maybe<CommentCreateManyWithoutOwnerInput>;
  artistRecords?: Maybe<ArtistCreateManyWithoutOwnerInput>;
  artworkLocationRecords?: Maybe<ArtworkLocationCreateManyWithoutOwnerInput>;
  auctionArtworkSeller?: Maybe<AuctionArtworkCreateManyWithoutSellerInput>;
  auctionArtworkBuyer?: Maybe<AuctionArtworkCreateManyWithoutBuyerInput>;
  auctionArtworkWatcher?: Maybe<AuctionArtworkCreateManyWithoutWatchersInput>;
  auctionArtworkBid?: Maybe<AuctionArtworkBidCreateManyWithoutBidderInput>;
  password: String;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserCreatepermissionsInput>;
}

export interface CommentCreateManyWithoutOwnerInput {
  create?: Maybe<
    CommentCreateWithoutOwnerInput[] | CommentCreateWithoutOwnerInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  post: PostCreateOneWithoutCommentsInput;
  text: String;
  text_lcase: String;
  isPublished?: Maybe<Boolean>;
}

export interface PostCreateOneWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  owner: UserCreateOneWithoutPostsInput;
  title: String;
  title_lcase: String;
  body: String;
  body_lcase: String;
  isPublished?: Maybe<Boolean>;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  name: String;
  name_lcase: String;
  email: String;
  email_lcase: String;
  emailValidated?: Maybe<Boolean>;
  active?: Maybe<Boolean>;
  comments?: Maybe<CommentCreateManyWithoutOwnerInput>;
  artistRecords?: Maybe<ArtistCreateManyWithoutOwnerInput>;
  artworkRecords?: Maybe<ArtworkCreateManyWithoutOwnerInput>;
  artworkLocationRecords?: Maybe<ArtworkLocationCreateManyWithoutOwnerInput>;
  auctionArtworkSeller?: Maybe<AuctionArtworkCreateManyWithoutSellerInput>;
  auctionArtworkBuyer?: Maybe<AuctionArtworkCreateManyWithoutBuyerInput>;
  auctionArtworkWatcher?: Maybe<AuctionArtworkCreateManyWithoutWatchersInput>;
  auctionArtworkBid?: Maybe<AuctionArtworkBidCreateManyWithoutBidderInput>;
  password: String;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserCreatepermissionsInput>;
}

export interface ArtworkCreateManyWithoutOwnerInput {
  create?: Maybe<
    ArtworkCreateWithoutOwnerInput[] | ArtworkCreateWithoutOwnerInput
  >;
  connect?: Maybe<ArtworkWhereUniqueInput[] | ArtworkWhereUniqueInput>;
}

export interface ArtworkCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  artist: ArtistCreateOneWithoutArtworksInput;
  notableWork?: Maybe<Boolean>;
  artworkLocation: ArtworkLocationCreateOneWithoutArtworksInput;
  artworkLocationURL?: Maybe<String>;
  fileName?: Maybe<String>;
  workName?: Maybe<String>;
  workName_english?: Maybe<String>;
  workName_ascii?: Maybe<String>;
  dateCompleted?: Maybe<String>;
  dateCompletedAccuracy?: Maybe<String>;
  type?: Maybe<String>;
  genre?: Maybe<String>;
  medium?: Maybe<String>;
  mediumSupport?: Maybe<String>;
  description?: Maybe<String>;
  descriptionSource?: Maybe<String>;
  accession?: Maybe<String>;
  creditLine?: Maybe<String>;
  dimensionCoreW_mm?: Maybe<Int>;
  dimensionCoreH_mm?: Maybe<Int>;
  dimensionCoreD_mm?: Maybe<Int>;
  dimensionCoreWHD_in?: Maybe<String>;
  dimensionFramedW_mm?: Maybe<Int>;
  dimensionFramedH_mm?: Maybe<Int>;
  dimensionFramedD_mm?: Maybe<Int>;
  dimensionFramedWHD_in?: Maybe<String>;
  signature?: Maybe<String>;
  onviewAt?: Maybe<String>;
  otherDescription?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
  auctions?: Maybe<AuctionArtworkCreateManyWithoutArtworkInput>;
}

export interface ArtistCreateOneWithoutArtworksInput {
  create?: Maybe<ArtistCreateWithoutArtworksInput>;
  connect?: Maybe<ArtistWhereUniqueInput>;
}

export interface ArtistCreateWithoutArtworksInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  owner: UserCreateOneWithoutArtistRecordsInput;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  birthName?: Maybe<String>;
  commonName?: Maybe<String>;
  dateOfBirth?: Maybe<String>;
  dateOfBirthAccuracy?: Maybe<String>;
  dateOfDeath?: Maybe<String>;
  dateOfDeathAccuracy?: Maybe<String>;
  nationality?: Maybe<String>;
  knownFor?: Maybe<String>;
  movements?: Maybe<String>;
  gender?: Maybe<String>;
  artworkLocations?: Maybe<ArtworkLocationCreateManyWithoutArtistsInput>;
  deceased: Boolean;
  birthCountry?: Maybe<String>;
  birthLocation?: Maybe<String>;
  birthLocationDetails?: Maybe<String>;
  deathCountry?: Maybe<String>;
  deathLocation?: Maybe<String>;
  deathLocationDetails?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
}

export interface ArtworkLocationCreateManyWithoutArtistsInput {
  create?: Maybe<
    | ArtworkLocationCreateWithoutArtistsInput[]
    | ArtworkLocationCreateWithoutArtistsInput
  >;
  connect?: Maybe<
    ArtworkLocationWhereUniqueInput[] | ArtworkLocationWhereUniqueInput
  >;
}

export interface ArtworkLocationCreateWithoutArtistsInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  owner: UserCreateOneWithoutArtworkLocationRecordsInput;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  name: String;
  nickname?: Maybe<String>;
  description?: Maybe<String>;
  dateFirstOpened?: Maybe<String>;
  streetAddress?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  postalCode?: Maybe<String>;
  country?: Maybe<String>;
  coorE?: Maybe<Int>;
  coorN?: Maybe<Int>;
  website?: Maybe<String>;
  isMuseum?: Maybe<Boolean>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
  artworks?: Maybe<ArtworkCreateManyWithoutArtworkLocationInput>;
}

export interface UserCreateOneWithoutArtworkLocationRecordsInput {
  create?: Maybe<UserCreateWithoutArtworkLocationRecordsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutArtworkLocationRecordsInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  name: String;
  name_lcase: String;
  email: String;
  email_lcase: String;
  emailValidated?: Maybe<Boolean>;
  active?: Maybe<Boolean>;
  posts?: Maybe<PostCreateManyWithoutOwnerInput>;
  comments?: Maybe<CommentCreateManyWithoutOwnerInput>;
  artistRecords?: Maybe<ArtistCreateManyWithoutOwnerInput>;
  artworkRecords?: Maybe<ArtworkCreateManyWithoutOwnerInput>;
  auctionArtworkSeller?: Maybe<AuctionArtworkCreateManyWithoutSellerInput>;
  auctionArtworkBuyer?: Maybe<AuctionArtworkCreateManyWithoutBuyerInput>;
  auctionArtworkWatcher?: Maybe<AuctionArtworkCreateManyWithoutWatchersInput>;
  auctionArtworkBid?: Maybe<AuctionArtworkBidCreateManyWithoutBidderInput>;
  password: String;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserCreatepermissionsInput>;
}

export interface AuctionArtworkCreateManyWithoutSellerInput {
  create?: Maybe<
    | AuctionArtworkCreateWithoutSellerInput[]
    | AuctionArtworkCreateWithoutSellerInput
  >;
  connect?: Maybe<
    AuctionArtworkWhereUniqueInput[] | AuctionArtworkWhereUniqueInput
  >;
}

export interface AuctionArtworkCreateWithoutSellerInput {
  id?: Maybe<ID_Input>;
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  withdrawnDate?: Maybe<DateTimeInput>;
  saleDate?: Maybe<DateTimeInput>;
  refundDate?: Maybe<DateTimeInput>;
  reserve?: Maybe<Int>;
  initialPrice?: Maybe<Int>;
  buyoutPrice?: Maybe<Int>;
  salePrice?: Maybe<Int>;
  artwork: ArtworkCreateOneWithoutAuctionsInput;
  buyer?: Maybe<UserCreateOneWithoutAuctionArtworkBuyerInput>;
  bids?: Maybe<AuctionArtworkBidCreateManyWithoutAuctionInput>;
  watchers?: Maybe<UserCreateManyWithoutAuctionArtworkWatcherInput>;
}

export interface ArtworkCreateOneWithoutAuctionsInput {
  create?: Maybe<ArtworkCreateWithoutAuctionsInput>;
  connect?: Maybe<ArtworkWhereUniqueInput>;
}

export interface ArtworkCreateWithoutAuctionsInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  owner: UserCreateOneWithoutArtworkRecordsInput;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  artist: ArtistCreateOneWithoutArtworksInput;
  notableWork?: Maybe<Boolean>;
  artworkLocation: ArtworkLocationCreateOneWithoutArtworksInput;
  artworkLocationURL?: Maybe<String>;
  fileName?: Maybe<String>;
  workName?: Maybe<String>;
  workName_english?: Maybe<String>;
  workName_ascii?: Maybe<String>;
  dateCompleted?: Maybe<String>;
  dateCompletedAccuracy?: Maybe<String>;
  type?: Maybe<String>;
  genre?: Maybe<String>;
  medium?: Maybe<String>;
  mediumSupport?: Maybe<String>;
  description?: Maybe<String>;
  descriptionSource?: Maybe<String>;
  accession?: Maybe<String>;
  creditLine?: Maybe<String>;
  dimensionCoreW_mm?: Maybe<Int>;
  dimensionCoreH_mm?: Maybe<Int>;
  dimensionCoreD_mm?: Maybe<Int>;
  dimensionCoreWHD_in?: Maybe<String>;
  dimensionFramedW_mm?: Maybe<Int>;
  dimensionFramedH_mm?: Maybe<Int>;
  dimensionFramedD_mm?: Maybe<Int>;
  dimensionFramedWHD_in?: Maybe<String>;
  signature?: Maybe<String>;
  onviewAt?: Maybe<String>;
  otherDescription?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
}

export interface ArtworkLocationCreateOneWithoutArtworksInput {
  create?: Maybe<ArtworkLocationCreateWithoutArtworksInput>;
  connect?: Maybe<ArtworkLocationWhereUniqueInput>;
}

export interface ArtworkLocationCreateWithoutArtworksInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  owner: UserCreateOneWithoutArtworkLocationRecordsInput;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  name: String;
  nickname?: Maybe<String>;
  description?: Maybe<String>;
  dateFirstOpened?: Maybe<String>;
  streetAddress?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  postalCode?: Maybe<String>;
  country?: Maybe<String>;
  coorE?: Maybe<Int>;
  coorN?: Maybe<Int>;
  website?: Maybe<String>;
  isMuseum?: Maybe<Boolean>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
  artists?: Maybe<ArtistCreateManyWithoutArtworkLocationsInput>;
}

export interface ArtistCreateManyWithoutArtworkLocationsInput {
  create?: Maybe<
    | ArtistCreateWithoutArtworkLocationsInput[]
    | ArtistCreateWithoutArtworkLocationsInput
  >;
  connect?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
}

export interface ArtistCreateWithoutArtworkLocationsInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  owner: UserCreateOneWithoutArtistRecordsInput;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  birthName?: Maybe<String>;
  commonName?: Maybe<String>;
  dateOfBirth?: Maybe<String>;
  dateOfBirthAccuracy?: Maybe<String>;
  dateOfDeath?: Maybe<String>;
  dateOfDeathAccuracy?: Maybe<String>;
  nationality?: Maybe<String>;
  knownFor?: Maybe<String>;
  movements?: Maybe<String>;
  gender?: Maybe<String>;
  artworks?: Maybe<ArtworkCreateManyWithoutArtistInput>;
  deceased: Boolean;
  birthCountry?: Maybe<String>;
  birthLocation?: Maybe<String>;
  birthLocationDetails?: Maybe<String>;
  deathCountry?: Maybe<String>;
  deathLocation?: Maybe<String>;
  deathLocationDetails?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
}

export interface UserCreateOneWithoutAuctionArtworkBuyerInput {
  create?: Maybe<UserCreateWithoutAuctionArtworkBuyerInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutAuctionArtworkBuyerInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  name: String;
  name_lcase: String;
  email: String;
  email_lcase: String;
  emailValidated?: Maybe<Boolean>;
  active?: Maybe<Boolean>;
  posts?: Maybe<PostCreateManyWithoutOwnerInput>;
  comments?: Maybe<CommentCreateManyWithoutOwnerInput>;
  artistRecords?: Maybe<ArtistCreateManyWithoutOwnerInput>;
  artworkRecords?: Maybe<ArtworkCreateManyWithoutOwnerInput>;
  artworkLocationRecords?: Maybe<ArtworkLocationCreateManyWithoutOwnerInput>;
  auctionArtworkSeller?: Maybe<AuctionArtworkCreateManyWithoutSellerInput>;
  auctionArtworkWatcher?: Maybe<AuctionArtworkCreateManyWithoutWatchersInput>;
  auctionArtworkBid?: Maybe<AuctionArtworkBidCreateManyWithoutBidderInput>;
  password: String;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserCreatepermissionsInput>;
}

export interface ArtworkLocationCreateManyWithoutOwnerInput {
  create?: Maybe<
    | ArtworkLocationCreateWithoutOwnerInput[]
    | ArtworkLocationCreateWithoutOwnerInput
  >;
  connect?: Maybe<
    ArtworkLocationWhereUniqueInput[] | ArtworkLocationWhereUniqueInput
  >;
}

export interface ArtworkLocationCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  name: String;
  nickname?: Maybe<String>;
  description?: Maybe<String>;
  dateFirstOpened?: Maybe<String>;
  streetAddress?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  postalCode?: Maybe<String>;
  country?: Maybe<String>;
  coorE?: Maybe<Int>;
  coorN?: Maybe<Int>;
  website?: Maybe<String>;
  isMuseum?: Maybe<Boolean>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
  artworks?: Maybe<ArtworkCreateManyWithoutArtworkLocationInput>;
  artists?: Maybe<ArtistCreateManyWithoutArtworkLocationsInput>;
}

export interface ArtworkCreateManyWithoutArtworkLocationInput {
  create?: Maybe<
    | ArtworkCreateWithoutArtworkLocationInput[]
    | ArtworkCreateWithoutArtworkLocationInput
  >;
  connect?: Maybe<ArtworkWhereUniqueInput[] | ArtworkWhereUniqueInput>;
}

export interface ArtworkCreateWithoutArtworkLocationInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  owner: UserCreateOneWithoutArtworkRecordsInput;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  artist: ArtistCreateOneWithoutArtworksInput;
  notableWork?: Maybe<Boolean>;
  artworkLocationURL?: Maybe<String>;
  fileName?: Maybe<String>;
  workName?: Maybe<String>;
  workName_english?: Maybe<String>;
  workName_ascii?: Maybe<String>;
  dateCompleted?: Maybe<String>;
  dateCompletedAccuracy?: Maybe<String>;
  type?: Maybe<String>;
  genre?: Maybe<String>;
  medium?: Maybe<String>;
  mediumSupport?: Maybe<String>;
  description?: Maybe<String>;
  descriptionSource?: Maybe<String>;
  accession?: Maybe<String>;
  creditLine?: Maybe<String>;
  dimensionCoreW_mm?: Maybe<Int>;
  dimensionCoreH_mm?: Maybe<Int>;
  dimensionCoreD_mm?: Maybe<Int>;
  dimensionCoreWHD_in?: Maybe<String>;
  dimensionFramedW_mm?: Maybe<Int>;
  dimensionFramedH_mm?: Maybe<Int>;
  dimensionFramedD_mm?: Maybe<Int>;
  dimensionFramedWHD_in?: Maybe<String>;
  signature?: Maybe<String>;
  onviewAt?: Maybe<String>;
  otherDescription?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
  auctions?: Maybe<AuctionArtworkCreateManyWithoutArtworkInput>;
}

export interface AuctionArtworkCreateManyWithoutArtworkInput {
  create?: Maybe<
    | AuctionArtworkCreateWithoutArtworkInput[]
    | AuctionArtworkCreateWithoutArtworkInput
  >;
  connect?: Maybe<
    AuctionArtworkWhereUniqueInput[] | AuctionArtworkWhereUniqueInput
  >;
}

export interface AuctionArtworkCreateWithoutArtworkInput {
  id?: Maybe<ID_Input>;
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  withdrawnDate?: Maybe<DateTimeInput>;
  saleDate?: Maybe<DateTimeInput>;
  refundDate?: Maybe<DateTimeInput>;
  reserve?: Maybe<Int>;
  initialPrice?: Maybe<Int>;
  buyoutPrice?: Maybe<Int>;
  salePrice?: Maybe<Int>;
  seller: UserCreateOneWithoutAuctionArtworkSellerInput;
  buyer?: Maybe<UserCreateOneWithoutAuctionArtworkBuyerInput>;
  bids?: Maybe<AuctionArtworkBidCreateManyWithoutAuctionInput>;
  watchers?: Maybe<UserCreateManyWithoutAuctionArtworkWatcherInput>;
}

export interface UserCreateOneWithoutAuctionArtworkSellerInput {
  create?: Maybe<UserCreateWithoutAuctionArtworkSellerInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutAuctionArtworkSellerInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  name: String;
  name_lcase: String;
  email: String;
  email_lcase: String;
  emailValidated?: Maybe<Boolean>;
  active?: Maybe<Boolean>;
  posts?: Maybe<PostCreateManyWithoutOwnerInput>;
  comments?: Maybe<CommentCreateManyWithoutOwnerInput>;
  artistRecords?: Maybe<ArtistCreateManyWithoutOwnerInput>;
  artworkRecords?: Maybe<ArtworkCreateManyWithoutOwnerInput>;
  artworkLocationRecords?: Maybe<ArtworkLocationCreateManyWithoutOwnerInput>;
  auctionArtworkBuyer?: Maybe<AuctionArtworkCreateManyWithoutBuyerInput>;
  auctionArtworkWatcher?: Maybe<AuctionArtworkCreateManyWithoutWatchersInput>;
  auctionArtworkBid?: Maybe<AuctionArtworkBidCreateManyWithoutBidderInput>;
  password: String;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserCreatepermissionsInput>;
}

export interface AuctionArtworkCreateManyWithoutBuyerInput {
  create?: Maybe<
    | AuctionArtworkCreateWithoutBuyerInput[]
    | AuctionArtworkCreateWithoutBuyerInput
  >;
  connect?: Maybe<
    AuctionArtworkWhereUniqueInput[] | AuctionArtworkWhereUniqueInput
  >;
}

export interface AuctionArtworkCreateWithoutBuyerInput {
  id?: Maybe<ID_Input>;
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  withdrawnDate?: Maybe<DateTimeInput>;
  saleDate?: Maybe<DateTimeInput>;
  refundDate?: Maybe<DateTimeInput>;
  reserve?: Maybe<Int>;
  initialPrice?: Maybe<Int>;
  buyoutPrice?: Maybe<Int>;
  salePrice?: Maybe<Int>;
  artwork: ArtworkCreateOneWithoutAuctionsInput;
  seller: UserCreateOneWithoutAuctionArtworkSellerInput;
  bids?: Maybe<AuctionArtworkBidCreateManyWithoutAuctionInput>;
  watchers?: Maybe<UserCreateManyWithoutAuctionArtworkWatcherInput>;
}

export interface AuctionArtworkBidCreateManyWithoutAuctionInput {
  create?: Maybe<
    | AuctionArtworkBidCreateWithoutAuctionInput[]
    | AuctionArtworkBidCreateWithoutAuctionInput
  >;
  connect?: Maybe<
    AuctionArtworkBidWhereUniqueInput[] | AuctionArtworkBidWhereUniqueInput
  >;
}

export interface AuctionArtworkBidCreateWithoutAuctionInput {
  id?: Maybe<ID_Input>;
  deletedAt?: Maybe<DateTimeInput>;
  bidder?: Maybe<UserCreateOneWithoutAuctionArtworkBidInput>;
  amount?: Maybe<Int>;
}

export interface UserCreateOneWithoutAuctionArtworkBidInput {
  create?: Maybe<UserCreateWithoutAuctionArtworkBidInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutAuctionArtworkBidInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  name: String;
  name_lcase: String;
  email: String;
  email_lcase: String;
  emailValidated?: Maybe<Boolean>;
  active?: Maybe<Boolean>;
  posts?: Maybe<PostCreateManyWithoutOwnerInput>;
  comments?: Maybe<CommentCreateManyWithoutOwnerInput>;
  artistRecords?: Maybe<ArtistCreateManyWithoutOwnerInput>;
  artworkRecords?: Maybe<ArtworkCreateManyWithoutOwnerInput>;
  artworkLocationRecords?: Maybe<ArtworkLocationCreateManyWithoutOwnerInput>;
  auctionArtworkSeller?: Maybe<AuctionArtworkCreateManyWithoutSellerInput>;
  auctionArtworkBuyer?: Maybe<AuctionArtworkCreateManyWithoutBuyerInput>;
  auctionArtworkWatcher?: Maybe<AuctionArtworkCreateManyWithoutWatchersInput>;
  password: String;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserCreatepermissionsInput>;
}

export interface AuctionArtworkCreateManyWithoutWatchersInput {
  create?: Maybe<
    | AuctionArtworkCreateWithoutWatchersInput[]
    | AuctionArtworkCreateWithoutWatchersInput
  >;
  connect?: Maybe<
    AuctionArtworkWhereUniqueInput[] | AuctionArtworkWhereUniqueInput
  >;
}

export interface AuctionArtworkCreateWithoutWatchersInput {
  id?: Maybe<ID_Input>;
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  withdrawnDate?: Maybe<DateTimeInput>;
  saleDate?: Maybe<DateTimeInput>;
  refundDate?: Maybe<DateTimeInput>;
  reserve?: Maybe<Int>;
  initialPrice?: Maybe<Int>;
  buyoutPrice?: Maybe<Int>;
  salePrice?: Maybe<Int>;
  artwork: ArtworkCreateOneWithoutAuctionsInput;
  seller: UserCreateOneWithoutAuctionArtworkSellerInput;
  buyer?: Maybe<UserCreateOneWithoutAuctionArtworkBuyerInput>;
  bids?: Maybe<AuctionArtworkBidCreateManyWithoutAuctionInput>;
}

export interface UserCreatepermissionsInput {
  set?: Maybe<PermissionsType[] | PermissionsType>;
}

export interface UserCreateManyWithoutAuctionArtworkWatcherInput {
  create?: Maybe<
    | UserCreateWithoutAuctionArtworkWatcherInput[]
    | UserCreateWithoutAuctionArtworkWatcherInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutAuctionArtworkWatcherInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  name: String;
  name_lcase: String;
  email: String;
  email_lcase: String;
  emailValidated?: Maybe<Boolean>;
  active?: Maybe<Boolean>;
  posts?: Maybe<PostCreateManyWithoutOwnerInput>;
  comments?: Maybe<CommentCreateManyWithoutOwnerInput>;
  artistRecords?: Maybe<ArtistCreateManyWithoutOwnerInput>;
  artworkRecords?: Maybe<ArtworkCreateManyWithoutOwnerInput>;
  artworkLocationRecords?: Maybe<ArtworkLocationCreateManyWithoutOwnerInput>;
  auctionArtworkSeller?: Maybe<AuctionArtworkCreateManyWithoutSellerInput>;
  auctionArtworkBuyer?: Maybe<AuctionArtworkCreateManyWithoutBuyerInput>;
  auctionArtworkBid?: Maybe<AuctionArtworkBidCreateManyWithoutBidderInput>;
  password: String;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserCreatepermissionsInput>;
}

export interface AuctionArtworkBidCreateManyWithoutBidderInput {
  create?: Maybe<
    | AuctionArtworkBidCreateWithoutBidderInput[]
    | AuctionArtworkBidCreateWithoutBidderInput
  >;
  connect?: Maybe<
    AuctionArtworkBidWhereUniqueInput[] | AuctionArtworkBidWhereUniqueInput
  >;
}

export interface AuctionArtworkBidCreateWithoutBidderInput {
  id?: Maybe<ID_Input>;
  deletedAt?: Maybe<DateTimeInput>;
  auction: AuctionArtworkCreateOneWithoutBidsInput;
  amount?: Maybe<Int>;
}

export interface AuctionArtworkCreateOneWithoutBidsInput {
  create?: Maybe<AuctionArtworkCreateWithoutBidsInput>;
  connect?: Maybe<AuctionArtworkWhereUniqueInput>;
}

export interface AuctionArtworkCreateWithoutBidsInput {
  id?: Maybe<ID_Input>;
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  withdrawnDate?: Maybe<DateTimeInput>;
  saleDate?: Maybe<DateTimeInput>;
  refundDate?: Maybe<DateTimeInput>;
  reserve?: Maybe<Int>;
  initialPrice?: Maybe<Int>;
  buyoutPrice?: Maybe<Int>;
  salePrice?: Maybe<Int>;
  artwork: ArtworkCreateOneWithoutAuctionsInput;
  seller: UserCreateOneWithoutAuctionArtworkSellerInput;
  buyer?: Maybe<UserCreateOneWithoutAuctionArtworkBuyerInput>;
  watchers?: Maybe<UserCreateManyWithoutAuctionArtworkWatcherInput>;
}

export interface ArtistUpdateInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  owner?: Maybe<UserUpdateOneRequiredWithoutArtistRecordsInput>;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  birthName?: Maybe<String>;
  commonName?: Maybe<String>;
  dateOfBirth?: Maybe<String>;
  dateOfBirthAccuracy?: Maybe<String>;
  dateOfDeath?: Maybe<String>;
  dateOfDeathAccuracy?: Maybe<String>;
  nationality?: Maybe<String>;
  knownFor?: Maybe<String>;
  movements?: Maybe<String>;
  gender?: Maybe<String>;
  artworks?: Maybe<ArtworkUpdateManyWithoutArtistInput>;
  artworkLocations?: Maybe<ArtworkLocationUpdateManyWithoutArtistsInput>;
  deceased?: Maybe<Boolean>;
  birthCountry?: Maybe<String>;
  birthLocation?: Maybe<String>;
  birthLocationDetails?: Maybe<String>;
  deathCountry?: Maybe<String>;
  deathLocation?: Maybe<String>;
  deathLocationDetails?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
}

export interface UserUpdateOneRequiredWithoutArtistRecordsInput {
  create?: Maybe<UserCreateWithoutArtistRecordsInput>;
  update?: Maybe<UserUpdateWithoutArtistRecordsDataInput>;
  upsert?: Maybe<UserUpsertWithoutArtistRecordsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutArtistRecordsDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_lcase?: Maybe<String>;
  email?: Maybe<String>;
  email_lcase?: Maybe<String>;
  emailValidated?: Maybe<Boolean>;
  active?: Maybe<Boolean>;
  posts?: Maybe<PostUpdateManyWithoutOwnerInput>;
  comments?: Maybe<CommentUpdateManyWithoutOwnerInput>;
  artworkRecords?: Maybe<ArtworkUpdateManyWithoutOwnerInput>;
  artworkLocationRecords?: Maybe<ArtworkLocationUpdateManyWithoutOwnerInput>;
  auctionArtworkSeller?: Maybe<AuctionArtworkUpdateManyWithoutSellerInput>;
  auctionArtworkBuyer?: Maybe<AuctionArtworkUpdateManyWithoutBuyerInput>;
  auctionArtworkWatcher?: Maybe<AuctionArtworkUpdateManyWithoutWatchersInput>;
  auctionArtworkBid?: Maybe<AuctionArtworkBidUpdateManyWithoutBidderInput>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
}

export interface PostUpdateManyWithoutOwnerInput {
  create?: Maybe<PostCreateWithoutOwnerInput[] | PostCreateWithoutOwnerInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutOwnerInput[]
    | PostUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutOwnerInput[]
    | PostUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutOwnerInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutOwnerDataInput;
}

export interface PostUpdateWithoutOwnerDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_lcase?: Maybe<String>;
  body?: Maybe<String>;
  body_lcase?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
}

export interface CommentUpdateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutPostInput[]
    | CommentUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutPostInput[]
    | CommentUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutPostDataInput;
}

export interface CommentUpdateWithoutPostDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  owner?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
  text?: Maybe<String>;
  text_lcase?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
}

export interface UserUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  update?: Maybe<UserUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCommentsDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_lcase?: Maybe<String>;
  email?: Maybe<String>;
  email_lcase?: Maybe<String>;
  emailValidated?: Maybe<Boolean>;
  active?: Maybe<Boolean>;
  posts?: Maybe<PostUpdateManyWithoutOwnerInput>;
  artistRecords?: Maybe<ArtistUpdateManyWithoutOwnerInput>;
  artworkRecords?: Maybe<ArtworkUpdateManyWithoutOwnerInput>;
  artworkLocationRecords?: Maybe<ArtworkLocationUpdateManyWithoutOwnerInput>;
  auctionArtworkSeller?: Maybe<AuctionArtworkUpdateManyWithoutSellerInput>;
  auctionArtworkBuyer?: Maybe<AuctionArtworkUpdateManyWithoutBuyerInput>;
  auctionArtworkWatcher?: Maybe<AuctionArtworkUpdateManyWithoutWatchersInput>;
  auctionArtworkBid?: Maybe<AuctionArtworkBidUpdateManyWithoutBidderInput>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
}

export interface ArtistUpdateManyWithoutOwnerInput {
  create?: Maybe<
    ArtistCreateWithoutOwnerInput[] | ArtistCreateWithoutOwnerInput
  >;
  delete?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  connect?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  set?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  disconnect?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  update?: Maybe<
    | ArtistUpdateWithWhereUniqueWithoutOwnerInput[]
    | ArtistUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | ArtistUpsertWithWhereUniqueWithoutOwnerInput[]
    | ArtistUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<ArtistScalarWhereInput[] | ArtistScalarWhereInput>;
  updateMany?: Maybe<
    | ArtistUpdateManyWithWhereNestedInput[]
    | ArtistUpdateManyWithWhereNestedInput
  >;
}

export interface ArtistUpdateWithWhereUniqueWithoutOwnerInput {
  where: ArtistWhereUniqueInput;
  data: ArtistUpdateWithoutOwnerDataInput;
}

export interface ArtistUpdateWithoutOwnerDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  birthName?: Maybe<String>;
  commonName?: Maybe<String>;
  dateOfBirth?: Maybe<String>;
  dateOfBirthAccuracy?: Maybe<String>;
  dateOfDeath?: Maybe<String>;
  dateOfDeathAccuracy?: Maybe<String>;
  nationality?: Maybe<String>;
  knownFor?: Maybe<String>;
  movements?: Maybe<String>;
  gender?: Maybe<String>;
  artworks?: Maybe<ArtworkUpdateManyWithoutArtistInput>;
  artworkLocations?: Maybe<ArtworkLocationUpdateManyWithoutArtistsInput>;
  deceased?: Maybe<Boolean>;
  birthCountry?: Maybe<String>;
  birthLocation?: Maybe<String>;
  birthLocationDetails?: Maybe<String>;
  deathCountry?: Maybe<String>;
  deathLocation?: Maybe<String>;
  deathLocationDetails?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
}

export interface ArtworkUpdateManyWithoutArtistInput {
  create?: Maybe<
    ArtworkCreateWithoutArtistInput[] | ArtworkCreateWithoutArtistInput
  >;
  delete?: Maybe<ArtworkWhereUniqueInput[] | ArtworkWhereUniqueInput>;
  connect?: Maybe<ArtworkWhereUniqueInput[] | ArtworkWhereUniqueInput>;
  set?: Maybe<ArtworkWhereUniqueInput[] | ArtworkWhereUniqueInput>;
  disconnect?: Maybe<ArtworkWhereUniqueInput[] | ArtworkWhereUniqueInput>;
  update?: Maybe<
    | ArtworkUpdateWithWhereUniqueWithoutArtistInput[]
    | ArtworkUpdateWithWhereUniqueWithoutArtistInput
  >;
  upsert?: Maybe<
    | ArtworkUpsertWithWhereUniqueWithoutArtistInput[]
    | ArtworkUpsertWithWhereUniqueWithoutArtistInput
  >;
  deleteMany?: Maybe<ArtworkScalarWhereInput[] | ArtworkScalarWhereInput>;
  updateMany?: Maybe<
    | ArtworkUpdateManyWithWhereNestedInput[]
    | ArtworkUpdateManyWithWhereNestedInput
  >;
}

export interface ArtworkUpdateWithWhereUniqueWithoutArtistInput {
  where: ArtworkWhereUniqueInput;
  data: ArtworkUpdateWithoutArtistDataInput;
}

export interface ArtworkUpdateWithoutArtistDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  owner?: Maybe<UserUpdateOneRequiredWithoutArtworkRecordsInput>;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  notableWork?: Maybe<Boolean>;
  artworkLocation?: Maybe<ArtworkLocationUpdateOneRequiredWithoutArtworksInput>;
  artworkLocationURL?: Maybe<String>;
  fileName?: Maybe<String>;
  workName?: Maybe<String>;
  workName_english?: Maybe<String>;
  workName_ascii?: Maybe<String>;
  dateCompleted?: Maybe<String>;
  dateCompletedAccuracy?: Maybe<String>;
  type?: Maybe<String>;
  genre?: Maybe<String>;
  medium?: Maybe<String>;
  mediumSupport?: Maybe<String>;
  description?: Maybe<String>;
  descriptionSource?: Maybe<String>;
  accession?: Maybe<String>;
  creditLine?: Maybe<String>;
  dimensionCoreW_mm?: Maybe<Int>;
  dimensionCoreH_mm?: Maybe<Int>;
  dimensionCoreD_mm?: Maybe<Int>;
  dimensionCoreWHD_in?: Maybe<String>;
  dimensionFramedW_mm?: Maybe<Int>;
  dimensionFramedH_mm?: Maybe<Int>;
  dimensionFramedD_mm?: Maybe<Int>;
  dimensionFramedWHD_in?: Maybe<String>;
  signature?: Maybe<String>;
  onviewAt?: Maybe<String>;
  otherDescription?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
  auctions?: Maybe<AuctionArtworkUpdateManyWithoutArtworkInput>;
}

export interface UserUpdateOneRequiredWithoutArtworkRecordsInput {
  create?: Maybe<UserCreateWithoutArtworkRecordsInput>;
  update?: Maybe<UserUpdateWithoutArtworkRecordsDataInput>;
  upsert?: Maybe<UserUpsertWithoutArtworkRecordsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutArtworkRecordsDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_lcase?: Maybe<String>;
  email?: Maybe<String>;
  email_lcase?: Maybe<String>;
  emailValidated?: Maybe<Boolean>;
  active?: Maybe<Boolean>;
  posts?: Maybe<PostUpdateManyWithoutOwnerInput>;
  comments?: Maybe<CommentUpdateManyWithoutOwnerInput>;
  artistRecords?: Maybe<ArtistUpdateManyWithoutOwnerInput>;
  artworkLocationRecords?: Maybe<ArtworkLocationUpdateManyWithoutOwnerInput>;
  auctionArtworkSeller?: Maybe<AuctionArtworkUpdateManyWithoutSellerInput>;
  auctionArtworkBuyer?: Maybe<AuctionArtworkUpdateManyWithoutBuyerInput>;
  auctionArtworkWatcher?: Maybe<AuctionArtworkUpdateManyWithoutWatchersInput>;
  auctionArtworkBid?: Maybe<AuctionArtworkBidUpdateManyWithoutBidderInput>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
}

export interface CommentUpdateManyWithoutOwnerInput {
  create?: Maybe<
    CommentCreateWithoutOwnerInput[] | CommentCreateWithoutOwnerInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutOwnerInput[]
    | CommentUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutOwnerInput[]
    | CommentUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutOwnerInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutOwnerDataInput;
}

export interface CommentUpdateWithoutOwnerDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  post?: Maybe<PostUpdateOneRequiredWithoutCommentsInput>;
  text?: Maybe<String>;
  text_lcase?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
}

export interface PostUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  update?: Maybe<PostUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<PostUpsertWithoutCommentsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpdateWithoutCommentsDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  owner?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  title?: Maybe<String>;
  title_lcase?: Maybe<String>;
  body?: Maybe<String>;
  body_lcase?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPostsDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_lcase?: Maybe<String>;
  email?: Maybe<String>;
  email_lcase?: Maybe<String>;
  emailValidated?: Maybe<Boolean>;
  active?: Maybe<Boolean>;
  comments?: Maybe<CommentUpdateManyWithoutOwnerInput>;
  artistRecords?: Maybe<ArtistUpdateManyWithoutOwnerInput>;
  artworkRecords?: Maybe<ArtworkUpdateManyWithoutOwnerInput>;
  artworkLocationRecords?: Maybe<ArtworkLocationUpdateManyWithoutOwnerInput>;
  auctionArtworkSeller?: Maybe<AuctionArtworkUpdateManyWithoutSellerInput>;
  auctionArtworkBuyer?: Maybe<AuctionArtworkUpdateManyWithoutBuyerInput>;
  auctionArtworkWatcher?: Maybe<AuctionArtworkUpdateManyWithoutWatchersInput>;
  auctionArtworkBid?: Maybe<AuctionArtworkBidUpdateManyWithoutBidderInput>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
}

export interface ArtworkUpdateManyWithoutOwnerInput {
  create?: Maybe<
    ArtworkCreateWithoutOwnerInput[] | ArtworkCreateWithoutOwnerInput
  >;
  delete?: Maybe<ArtworkWhereUniqueInput[] | ArtworkWhereUniqueInput>;
  connect?: Maybe<ArtworkWhereUniqueInput[] | ArtworkWhereUniqueInput>;
  set?: Maybe<ArtworkWhereUniqueInput[] | ArtworkWhereUniqueInput>;
  disconnect?: Maybe<ArtworkWhereUniqueInput[] | ArtworkWhereUniqueInput>;
  update?: Maybe<
    | ArtworkUpdateWithWhereUniqueWithoutOwnerInput[]
    | ArtworkUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | ArtworkUpsertWithWhereUniqueWithoutOwnerInput[]
    | ArtworkUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<ArtworkScalarWhereInput[] | ArtworkScalarWhereInput>;
  updateMany?: Maybe<
    | ArtworkUpdateManyWithWhereNestedInput[]
    | ArtworkUpdateManyWithWhereNestedInput
  >;
}

export interface ArtworkUpdateWithWhereUniqueWithoutOwnerInput {
  where: ArtworkWhereUniqueInput;
  data: ArtworkUpdateWithoutOwnerDataInput;
}

export interface ArtworkUpdateWithoutOwnerDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  artist?: Maybe<ArtistUpdateOneRequiredWithoutArtworksInput>;
  notableWork?: Maybe<Boolean>;
  artworkLocation?: Maybe<ArtworkLocationUpdateOneRequiredWithoutArtworksInput>;
  artworkLocationURL?: Maybe<String>;
  fileName?: Maybe<String>;
  workName?: Maybe<String>;
  workName_english?: Maybe<String>;
  workName_ascii?: Maybe<String>;
  dateCompleted?: Maybe<String>;
  dateCompletedAccuracy?: Maybe<String>;
  type?: Maybe<String>;
  genre?: Maybe<String>;
  medium?: Maybe<String>;
  mediumSupport?: Maybe<String>;
  description?: Maybe<String>;
  descriptionSource?: Maybe<String>;
  accession?: Maybe<String>;
  creditLine?: Maybe<String>;
  dimensionCoreW_mm?: Maybe<Int>;
  dimensionCoreH_mm?: Maybe<Int>;
  dimensionCoreD_mm?: Maybe<Int>;
  dimensionCoreWHD_in?: Maybe<String>;
  dimensionFramedW_mm?: Maybe<Int>;
  dimensionFramedH_mm?: Maybe<Int>;
  dimensionFramedD_mm?: Maybe<Int>;
  dimensionFramedWHD_in?: Maybe<String>;
  signature?: Maybe<String>;
  onviewAt?: Maybe<String>;
  otherDescription?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
  auctions?: Maybe<AuctionArtworkUpdateManyWithoutArtworkInput>;
}

export interface ArtistUpdateOneRequiredWithoutArtworksInput {
  create?: Maybe<ArtistCreateWithoutArtworksInput>;
  update?: Maybe<ArtistUpdateWithoutArtworksDataInput>;
  upsert?: Maybe<ArtistUpsertWithoutArtworksInput>;
  connect?: Maybe<ArtistWhereUniqueInput>;
}

export interface ArtistUpdateWithoutArtworksDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  owner?: Maybe<UserUpdateOneRequiredWithoutArtistRecordsInput>;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  birthName?: Maybe<String>;
  commonName?: Maybe<String>;
  dateOfBirth?: Maybe<String>;
  dateOfBirthAccuracy?: Maybe<String>;
  dateOfDeath?: Maybe<String>;
  dateOfDeathAccuracy?: Maybe<String>;
  nationality?: Maybe<String>;
  knownFor?: Maybe<String>;
  movements?: Maybe<String>;
  gender?: Maybe<String>;
  artworkLocations?: Maybe<ArtworkLocationUpdateManyWithoutArtistsInput>;
  deceased?: Maybe<Boolean>;
  birthCountry?: Maybe<String>;
  birthLocation?: Maybe<String>;
  birthLocationDetails?: Maybe<String>;
  deathCountry?: Maybe<String>;
  deathLocation?: Maybe<String>;
  deathLocationDetails?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
}

export interface ArtworkLocationUpdateManyWithoutArtistsInput {
  create?: Maybe<
    | ArtworkLocationCreateWithoutArtistsInput[]
    | ArtworkLocationCreateWithoutArtistsInput
  >;
  delete?: Maybe<
    ArtworkLocationWhereUniqueInput[] | ArtworkLocationWhereUniqueInput
  >;
  connect?: Maybe<
    ArtworkLocationWhereUniqueInput[] | ArtworkLocationWhereUniqueInput
  >;
  set?: Maybe<
    ArtworkLocationWhereUniqueInput[] | ArtworkLocationWhereUniqueInput
  >;
  disconnect?: Maybe<
    ArtworkLocationWhereUniqueInput[] | ArtworkLocationWhereUniqueInput
  >;
  update?: Maybe<
    | ArtworkLocationUpdateWithWhereUniqueWithoutArtistsInput[]
    | ArtworkLocationUpdateWithWhereUniqueWithoutArtistsInput
  >;
  upsert?: Maybe<
    | ArtworkLocationUpsertWithWhereUniqueWithoutArtistsInput[]
    | ArtworkLocationUpsertWithWhereUniqueWithoutArtistsInput
  >;
  deleteMany?: Maybe<
    ArtworkLocationScalarWhereInput[] | ArtworkLocationScalarWhereInput
  >;
  updateMany?: Maybe<
    | ArtworkLocationUpdateManyWithWhereNestedInput[]
    | ArtworkLocationUpdateManyWithWhereNestedInput
  >;
}

export interface ArtworkLocationUpdateWithWhereUniqueWithoutArtistsInput {
  where: ArtworkLocationWhereUniqueInput;
  data: ArtworkLocationUpdateWithoutArtistsDataInput;
}

export interface ArtworkLocationUpdateWithoutArtistsDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  owner?: Maybe<UserUpdateOneRequiredWithoutArtworkLocationRecordsInput>;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  name?: Maybe<String>;
  nickname?: Maybe<String>;
  description?: Maybe<String>;
  dateFirstOpened?: Maybe<String>;
  streetAddress?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  postalCode?: Maybe<String>;
  country?: Maybe<String>;
  coorE?: Maybe<Int>;
  coorN?: Maybe<Int>;
  website?: Maybe<String>;
  isMuseum?: Maybe<Boolean>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
  artworks?: Maybe<ArtworkUpdateManyWithoutArtworkLocationInput>;
}

export interface UserUpdateOneRequiredWithoutArtworkLocationRecordsInput {
  create?: Maybe<UserCreateWithoutArtworkLocationRecordsInput>;
  update?: Maybe<UserUpdateWithoutArtworkLocationRecordsDataInput>;
  upsert?: Maybe<UserUpsertWithoutArtworkLocationRecordsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutArtworkLocationRecordsDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_lcase?: Maybe<String>;
  email?: Maybe<String>;
  email_lcase?: Maybe<String>;
  emailValidated?: Maybe<Boolean>;
  active?: Maybe<Boolean>;
  posts?: Maybe<PostUpdateManyWithoutOwnerInput>;
  comments?: Maybe<CommentUpdateManyWithoutOwnerInput>;
  artistRecords?: Maybe<ArtistUpdateManyWithoutOwnerInput>;
  artworkRecords?: Maybe<ArtworkUpdateManyWithoutOwnerInput>;
  auctionArtworkSeller?: Maybe<AuctionArtworkUpdateManyWithoutSellerInput>;
  auctionArtworkBuyer?: Maybe<AuctionArtworkUpdateManyWithoutBuyerInput>;
  auctionArtworkWatcher?: Maybe<AuctionArtworkUpdateManyWithoutWatchersInput>;
  auctionArtworkBid?: Maybe<AuctionArtworkBidUpdateManyWithoutBidderInput>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
}

export interface AuctionArtworkUpdateManyWithoutSellerInput {
  create?: Maybe<
    | AuctionArtworkCreateWithoutSellerInput[]
    | AuctionArtworkCreateWithoutSellerInput
  >;
  delete?: Maybe<
    AuctionArtworkWhereUniqueInput[] | AuctionArtworkWhereUniqueInput
  >;
  connect?: Maybe<
    AuctionArtworkWhereUniqueInput[] | AuctionArtworkWhereUniqueInput
  >;
  set?: Maybe<
    AuctionArtworkWhereUniqueInput[] | AuctionArtworkWhereUniqueInput
  >;
  disconnect?: Maybe<
    AuctionArtworkWhereUniqueInput[] | AuctionArtworkWhereUniqueInput
  >;
  update?: Maybe<
    | AuctionArtworkUpdateWithWhereUniqueWithoutSellerInput[]
    | AuctionArtworkUpdateWithWhereUniqueWithoutSellerInput
  >;
  upsert?: Maybe<
    | AuctionArtworkUpsertWithWhereUniqueWithoutSellerInput[]
    | AuctionArtworkUpsertWithWhereUniqueWithoutSellerInput
  >;
  deleteMany?: Maybe<
    AuctionArtworkScalarWhereInput[] | AuctionArtworkScalarWhereInput
  >;
  updateMany?: Maybe<
    | AuctionArtworkUpdateManyWithWhereNestedInput[]
    | AuctionArtworkUpdateManyWithWhereNestedInput
  >;
}

export interface AuctionArtworkUpdateWithWhereUniqueWithoutSellerInput {
  where: AuctionArtworkWhereUniqueInput;
  data: AuctionArtworkUpdateWithoutSellerDataInput;
}

export interface AuctionArtworkUpdateWithoutSellerDataInput {
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  withdrawnDate?: Maybe<DateTimeInput>;
  saleDate?: Maybe<DateTimeInput>;
  refundDate?: Maybe<DateTimeInput>;
  reserve?: Maybe<Int>;
  initialPrice?: Maybe<Int>;
  buyoutPrice?: Maybe<Int>;
  salePrice?: Maybe<Int>;
  artwork?: Maybe<ArtworkUpdateOneRequiredWithoutAuctionsInput>;
  buyer?: Maybe<UserUpdateOneWithoutAuctionArtworkBuyerInput>;
  bids?: Maybe<AuctionArtworkBidUpdateManyWithoutAuctionInput>;
  watchers?: Maybe<UserUpdateManyWithoutAuctionArtworkWatcherInput>;
}

export interface ArtworkUpdateOneRequiredWithoutAuctionsInput {
  create?: Maybe<ArtworkCreateWithoutAuctionsInput>;
  update?: Maybe<ArtworkUpdateWithoutAuctionsDataInput>;
  upsert?: Maybe<ArtworkUpsertWithoutAuctionsInput>;
  connect?: Maybe<ArtworkWhereUniqueInput>;
}

export interface ArtworkUpdateWithoutAuctionsDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  owner?: Maybe<UserUpdateOneRequiredWithoutArtworkRecordsInput>;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  artist?: Maybe<ArtistUpdateOneRequiredWithoutArtworksInput>;
  notableWork?: Maybe<Boolean>;
  artworkLocation?: Maybe<ArtworkLocationUpdateOneRequiredWithoutArtworksInput>;
  artworkLocationURL?: Maybe<String>;
  fileName?: Maybe<String>;
  workName?: Maybe<String>;
  workName_english?: Maybe<String>;
  workName_ascii?: Maybe<String>;
  dateCompleted?: Maybe<String>;
  dateCompletedAccuracy?: Maybe<String>;
  type?: Maybe<String>;
  genre?: Maybe<String>;
  medium?: Maybe<String>;
  mediumSupport?: Maybe<String>;
  description?: Maybe<String>;
  descriptionSource?: Maybe<String>;
  accession?: Maybe<String>;
  creditLine?: Maybe<String>;
  dimensionCoreW_mm?: Maybe<Int>;
  dimensionCoreH_mm?: Maybe<Int>;
  dimensionCoreD_mm?: Maybe<Int>;
  dimensionCoreWHD_in?: Maybe<String>;
  dimensionFramedW_mm?: Maybe<Int>;
  dimensionFramedH_mm?: Maybe<Int>;
  dimensionFramedD_mm?: Maybe<Int>;
  dimensionFramedWHD_in?: Maybe<String>;
  signature?: Maybe<String>;
  onviewAt?: Maybe<String>;
  otherDescription?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
}

export interface ArtworkLocationUpdateOneRequiredWithoutArtworksInput {
  create?: Maybe<ArtworkLocationCreateWithoutArtworksInput>;
  update?: Maybe<ArtworkLocationUpdateWithoutArtworksDataInput>;
  upsert?: Maybe<ArtworkLocationUpsertWithoutArtworksInput>;
  connect?: Maybe<ArtworkLocationWhereUniqueInput>;
}

export interface ArtworkLocationUpdateWithoutArtworksDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  owner?: Maybe<UserUpdateOneRequiredWithoutArtworkLocationRecordsInput>;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  name?: Maybe<String>;
  nickname?: Maybe<String>;
  description?: Maybe<String>;
  dateFirstOpened?: Maybe<String>;
  streetAddress?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  postalCode?: Maybe<String>;
  country?: Maybe<String>;
  coorE?: Maybe<Int>;
  coorN?: Maybe<Int>;
  website?: Maybe<String>;
  isMuseum?: Maybe<Boolean>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
  artists?: Maybe<ArtistUpdateManyWithoutArtworkLocationsInput>;
}

export interface ArtistUpdateManyWithoutArtworkLocationsInput {
  create?: Maybe<
    | ArtistCreateWithoutArtworkLocationsInput[]
    | ArtistCreateWithoutArtworkLocationsInput
  >;
  delete?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  connect?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  set?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  disconnect?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  update?: Maybe<
    | ArtistUpdateWithWhereUniqueWithoutArtworkLocationsInput[]
    | ArtistUpdateWithWhereUniqueWithoutArtworkLocationsInput
  >;
  upsert?: Maybe<
    | ArtistUpsertWithWhereUniqueWithoutArtworkLocationsInput[]
    | ArtistUpsertWithWhereUniqueWithoutArtworkLocationsInput
  >;
  deleteMany?: Maybe<ArtistScalarWhereInput[] | ArtistScalarWhereInput>;
  updateMany?: Maybe<
    | ArtistUpdateManyWithWhereNestedInput[]
    | ArtistUpdateManyWithWhereNestedInput
  >;
}

export interface ArtistUpdateWithWhereUniqueWithoutArtworkLocationsInput {
  where: ArtistWhereUniqueInput;
  data: ArtistUpdateWithoutArtworkLocationsDataInput;
}

export interface ArtistUpdateWithoutArtworkLocationsDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  owner?: Maybe<UserUpdateOneRequiredWithoutArtistRecordsInput>;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  birthName?: Maybe<String>;
  commonName?: Maybe<String>;
  dateOfBirth?: Maybe<String>;
  dateOfBirthAccuracy?: Maybe<String>;
  dateOfDeath?: Maybe<String>;
  dateOfDeathAccuracy?: Maybe<String>;
  nationality?: Maybe<String>;
  knownFor?: Maybe<String>;
  movements?: Maybe<String>;
  gender?: Maybe<String>;
  artworks?: Maybe<ArtworkUpdateManyWithoutArtistInput>;
  deceased?: Maybe<Boolean>;
  birthCountry?: Maybe<String>;
  birthLocation?: Maybe<String>;
  birthLocationDetails?: Maybe<String>;
  deathCountry?: Maybe<String>;
  deathLocation?: Maybe<String>;
  deathLocationDetails?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
}

export interface ArtistUpsertWithWhereUniqueWithoutArtworkLocationsInput {
  where: ArtistWhereUniqueInput;
  update: ArtistUpdateWithoutArtworkLocationsDataInput;
  create: ArtistCreateWithoutArtworkLocationsInput;
}

export interface ArtistScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  easyId?: Maybe<String>;
  easyId_not?: Maybe<String>;
  easyId_in?: Maybe<String[] | String>;
  easyId_not_in?: Maybe<String[] | String>;
  easyId_lt?: Maybe<String>;
  easyId_lte?: Maybe<String>;
  easyId_gt?: Maybe<String>;
  easyId_gte?: Maybe<String>;
  easyId_contains?: Maybe<String>;
  easyId_not_contains?: Maybe<String>;
  easyId_starts_with?: Maybe<String>;
  easyId_not_starts_with?: Maybe<String>;
  easyId_ends_with?: Maybe<String>;
  easyId_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deletedAt?: Maybe<DateTimeInput>;
  deletedAt_not?: Maybe<DateTimeInput>;
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_lt?: Maybe<DateTimeInput>;
  deletedAt_lte?: Maybe<DateTimeInput>;
  deletedAt_gt?: Maybe<DateTimeInput>;
  deletedAt_gte?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPage_not?: Maybe<String>;
  wikiPage_in?: Maybe<String[] | String>;
  wikiPage_not_in?: Maybe<String[] | String>;
  wikiPage_lt?: Maybe<String>;
  wikiPage_lte?: Maybe<String>;
  wikiPage_gt?: Maybe<String>;
  wikiPage_gte?: Maybe<String>;
  wikiPage_contains?: Maybe<String>;
  wikiPage_not_contains?: Maybe<String>;
  wikiPage_starts_with?: Maybe<String>;
  wikiPage_not_starts_with?: Maybe<String>;
  wikiPage_ends_with?: Maybe<String>;
  wikiPage_not_ends_with?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  wikiPhoto_not?: Maybe<String>;
  wikiPhoto_in?: Maybe<String[] | String>;
  wikiPhoto_not_in?: Maybe<String[] | String>;
  wikiPhoto_lt?: Maybe<String>;
  wikiPhoto_lte?: Maybe<String>;
  wikiPhoto_gt?: Maybe<String>;
  wikiPhoto_gte?: Maybe<String>;
  wikiPhoto_contains?: Maybe<String>;
  wikiPhoto_not_contains?: Maybe<String>;
  wikiPhoto_starts_with?: Maybe<String>;
  wikiPhoto_not_starts_with?: Maybe<String>;
  wikiPhoto_ends_with?: Maybe<String>;
  wikiPhoto_not_ends_with?: Maybe<String>;
  imageLink?: Maybe<String>;
  imageLink_not?: Maybe<String>;
  imageLink_in?: Maybe<String[] | String>;
  imageLink_not_in?: Maybe<String[] | String>;
  imageLink_lt?: Maybe<String>;
  imageLink_lte?: Maybe<String>;
  imageLink_gt?: Maybe<String>;
  imageLink_gte?: Maybe<String>;
  imageLink_contains?: Maybe<String>;
  imageLink_not_contains?: Maybe<String>;
  imageLink_starts_with?: Maybe<String>;
  imageLink_not_starts_with?: Maybe<String>;
  imageLink_ends_with?: Maybe<String>;
  imageLink_not_ends_with?: Maybe<String>;
  birthName?: Maybe<String>;
  birthName_not?: Maybe<String>;
  birthName_in?: Maybe<String[] | String>;
  birthName_not_in?: Maybe<String[] | String>;
  birthName_lt?: Maybe<String>;
  birthName_lte?: Maybe<String>;
  birthName_gt?: Maybe<String>;
  birthName_gte?: Maybe<String>;
  birthName_contains?: Maybe<String>;
  birthName_not_contains?: Maybe<String>;
  birthName_starts_with?: Maybe<String>;
  birthName_not_starts_with?: Maybe<String>;
  birthName_ends_with?: Maybe<String>;
  birthName_not_ends_with?: Maybe<String>;
  commonName?: Maybe<String>;
  commonName_not?: Maybe<String>;
  commonName_in?: Maybe<String[] | String>;
  commonName_not_in?: Maybe<String[] | String>;
  commonName_lt?: Maybe<String>;
  commonName_lte?: Maybe<String>;
  commonName_gt?: Maybe<String>;
  commonName_gte?: Maybe<String>;
  commonName_contains?: Maybe<String>;
  commonName_not_contains?: Maybe<String>;
  commonName_starts_with?: Maybe<String>;
  commonName_not_starts_with?: Maybe<String>;
  commonName_ends_with?: Maybe<String>;
  commonName_not_ends_with?: Maybe<String>;
  dateOfBirth?: Maybe<String>;
  dateOfBirth_not?: Maybe<String>;
  dateOfBirth_in?: Maybe<String[] | String>;
  dateOfBirth_not_in?: Maybe<String[] | String>;
  dateOfBirth_lt?: Maybe<String>;
  dateOfBirth_lte?: Maybe<String>;
  dateOfBirth_gt?: Maybe<String>;
  dateOfBirth_gte?: Maybe<String>;
  dateOfBirth_contains?: Maybe<String>;
  dateOfBirth_not_contains?: Maybe<String>;
  dateOfBirth_starts_with?: Maybe<String>;
  dateOfBirth_not_starts_with?: Maybe<String>;
  dateOfBirth_ends_with?: Maybe<String>;
  dateOfBirth_not_ends_with?: Maybe<String>;
  dateOfBirthAccuracy?: Maybe<String>;
  dateOfBirthAccuracy_not?: Maybe<String>;
  dateOfBirthAccuracy_in?: Maybe<String[] | String>;
  dateOfBirthAccuracy_not_in?: Maybe<String[] | String>;
  dateOfBirthAccuracy_lt?: Maybe<String>;
  dateOfBirthAccuracy_lte?: Maybe<String>;
  dateOfBirthAccuracy_gt?: Maybe<String>;
  dateOfBirthAccuracy_gte?: Maybe<String>;
  dateOfBirthAccuracy_contains?: Maybe<String>;
  dateOfBirthAccuracy_not_contains?: Maybe<String>;
  dateOfBirthAccuracy_starts_with?: Maybe<String>;
  dateOfBirthAccuracy_not_starts_with?: Maybe<String>;
  dateOfBirthAccuracy_ends_with?: Maybe<String>;
  dateOfBirthAccuracy_not_ends_with?: Maybe<String>;
  dateOfDeath?: Maybe<String>;
  dateOfDeath_not?: Maybe<String>;
  dateOfDeath_in?: Maybe<String[] | String>;
  dateOfDeath_not_in?: Maybe<String[] | String>;
  dateOfDeath_lt?: Maybe<String>;
  dateOfDeath_lte?: Maybe<String>;
  dateOfDeath_gt?: Maybe<String>;
  dateOfDeath_gte?: Maybe<String>;
  dateOfDeath_contains?: Maybe<String>;
  dateOfDeath_not_contains?: Maybe<String>;
  dateOfDeath_starts_with?: Maybe<String>;
  dateOfDeath_not_starts_with?: Maybe<String>;
  dateOfDeath_ends_with?: Maybe<String>;
  dateOfDeath_not_ends_with?: Maybe<String>;
  dateOfDeathAccuracy?: Maybe<String>;
  dateOfDeathAccuracy_not?: Maybe<String>;
  dateOfDeathAccuracy_in?: Maybe<String[] | String>;
  dateOfDeathAccuracy_not_in?: Maybe<String[] | String>;
  dateOfDeathAccuracy_lt?: Maybe<String>;
  dateOfDeathAccuracy_lte?: Maybe<String>;
  dateOfDeathAccuracy_gt?: Maybe<String>;
  dateOfDeathAccuracy_gte?: Maybe<String>;
  dateOfDeathAccuracy_contains?: Maybe<String>;
  dateOfDeathAccuracy_not_contains?: Maybe<String>;
  dateOfDeathAccuracy_starts_with?: Maybe<String>;
  dateOfDeathAccuracy_not_starts_with?: Maybe<String>;
  dateOfDeathAccuracy_ends_with?: Maybe<String>;
  dateOfDeathAccuracy_not_ends_with?: Maybe<String>;
  nationality?: Maybe<String>;
  nationality_not?: Maybe<String>;
  nationality_in?: Maybe<String[] | String>;
  nationality_not_in?: Maybe<String[] | String>;
  nationality_lt?: Maybe<String>;
  nationality_lte?: Maybe<String>;
  nationality_gt?: Maybe<String>;
  nationality_gte?: Maybe<String>;
  nationality_contains?: Maybe<String>;
  nationality_not_contains?: Maybe<String>;
  nationality_starts_with?: Maybe<String>;
  nationality_not_starts_with?: Maybe<String>;
  nationality_ends_with?: Maybe<String>;
  nationality_not_ends_with?: Maybe<String>;
  knownFor?: Maybe<String>;
  knownFor_not?: Maybe<String>;
  knownFor_in?: Maybe<String[] | String>;
  knownFor_not_in?: Maybe<String[] | String>;
  knownFor_lt?: Maybe<String>;
  knownFor_lte?: Maybe<String>;
  knownFor_gt?: Maybe<String>;
  knownFor_gte?: Maybe<String>;
  knownFor_contains?: Maybe<String>;
  knownFor_not_contains?: Maybe<String>;
  knownFor_starts_with?: Maybe<String>;
  knownFor_not_starts_with?: Maybe<String>;
  knownFor_ends_with?: Maybe<String>;
  knownFor_not_ends_with?: Maybe<String>;
  movements?: Maybe<String>;
  movements_not?: Maybe<String>;
  movements_in?: Maybe<String[] | String>;
  movements_not_in?: Maybe<String[] | String>;
  movements_lt?: Maybe<String>;
  movements_lte?: Maybe<String>;
  movements_gt?: Maybe<String>;
  movements_gte?: Maybe<String>;
  movements_contains?: Maybe<String>;
  movements_not_contains?: Maybe<String>;
  movements_starts_with?: Maybe<String>;
  movements_not_starts_with?: Maybe<String>;
  movements_ends_with?: Maybe<String>;
  movements_not_ends_with?: Maybe<String>;
  gender?: Maybe<String>;
  gender_not?: Maybe<String>;
  gender_in?: Maybe<String[] | String>;
  gender_not_in?: Maybe<String[] | String>;
  gender_lt?: Maybe<String>;
  gender_lte?: Maybe<String>;
  gender_gt?: Maybe<String>;
  gender_gte?: Maybe<String>;
  gender_contains?: Maybe<String>;
  gender_not_contains?: Maybe<String>;
  gender_starts_with?: Maybe<String>;
  gender_not_starts_with?: Maybe<String>;
  gender_ends_with?: Maybe<String>;
  gender_not_ends_with?: Maybe<String>;
  deceased?: Maybe<Boolean>;
  deceased_not?: Maybe<Boolean>;
  birthCountry?: Maybe<String>;
  birthCountry_not?: Maybe<String>;
  birthCountry_in?: Maybe<String[] | String>;
  birthCountry_not_in?: Maybe<String[] | String>;
  birthCountry_lt?: Maybe<String>;
  birthCountry_lte?: Maybe<String>;
  birthCountry_gt?: Maybe<String>;
  birthCountry_gte?: Maybe<String>;
  birthCountry_contains?: Maybe<String>;
  birthCountry_not_contains?: Maybe<String>;
  birthCountry_starts_with?: Maybe<String>;
  birthCountry_not_starts_with?: Maybe<String>;
  birthCountry_ends_with?: Maybe<String>;
  birthCountry_not_ends_with?: Maybe<String>;
  birthLocation?: Maybe<String>;
  birthLocation_not?: Maybe<String>;
  birthLocation_in?: Maybe<String[] | String>;
  birthLocation_not_in?: Maybe<String[] | String>;
  birthLocation_lt?: Maybe<String>;
  birthLocation_lte?: Maybe<String>;
  birthLocation_gt?: Maybe<String>;
  birthLocation_gte?: Maybe<String>;
  birthLocation_contains?: Maybe<String>;
  birthLocation_not_contains?: Maybe<String>;
  birthLocation_starts_with?: Maybe<String>;
  birthLocation_not_starts_with?: Maybe<String>;
  birthLocation_ends_with?: Maybe<String>;
  birthLocation_not_ends_with?: Maybe<String>;
  birthLocationDetails?: Maybe<String>;
  birthLocationDetails_not?: Maybe<String>;
  birthLocationDetails_in?: Maybe<String[] | String>;
  birthLocationDetails_not_in?: Maybe<String[] | String>;
  birthLocationDetails_lt?: Maybe<String>;
  birthLocationDetails_lte?: Maybe<String>;
  birthLocationDetails_gt?: Maybe<String>;
  birthLocationDetails_gte?: Maybe<String>;
  birthLocationDetails_contains?: Maybe<String>;
  birthLocationDetails_not_contains?: Maybe<String>;
  birthLocationDetails_starts_with?: Maybe<String>;
  birthLocationDetails_not_starts_with?: Maybe<String>;
  birthLocationDetails_ends_with?: Maybe<String>;
  birthLocationDetails_not_ends_with?: Maybe<String>;
  deathCountry?: Maybe<String>;
  deathCountry_not?: Maybe<String>;
  deathCountry_in?: Maybe<String[] | String>;
  deathCountry_not_in?: Maybe<String[] | String>;
  deathCountry_lt?: Maybe<String>;
  deathCountry_lte?: Maybe<String>;
  deathCountry_gt?: Maybe<String>;
  deathCountry_gte?: Maybe<String>;
  deathCountry_contains?: Maybe<String>;
  deathCountry_not_contains?: Maybe<String>;
  deathCountry_starts_with?: Maybe<String>;
  deathCountry_not_starts_with?: Maybe<String>;
  deathCountry_ends_with?: Maybe<String>;
  deathCountry_not_ends_with?: Maybe<String>;
  deathLocation?: Maybe<String>;
  deathLocation_not?: Maybe<String>;
  deathLocation_in?: Maybe<String[] | String>;
  deathLocation_not_in?: Maybe<String[] | String>;
  deathLocation_lt?: Maybe<String>;
  deathLocation_lte?: Maybe<String>;
  deathLocation_gt?: Maybe<String>;
  deathLocation_gte?: Maybe<String>;
  deathLocation_contains?: Maybe<String>;
  deathLocation_not_contains?: Maybe<String>;
  deathLocation_starts_with?: Maybe<String>;
  deathLocation_not_starts_with?: Maybe<String>;
  deathLocation_ends_with?: Maybe<String>;
  deathLocation_not_ends_with?: Maybe<String>;
  deathLocationDetails?: Maybe<String>;
  deathLocationDetails_not?: Maybe<String>;
  deathLocationDetails_in?: Maybe<String[] | String>;
  deathLocationDetails_not_in?: Maybe<String[] | String>;
  deathLocationDetails_lt?: Maybe<String>;
  deathLocationDetails_lte?: Maybe<String>;
  deathLocationDetails_gt?: Maybe<String>;
  deathLocationDetails_gte?: Maybe<String>;
  deathLocationDetails_contains?: Maybe<String>;
  deathLocationDetails_not_contains?: Maybe<String>;
  deathLocationDetails_starts_with?: Maybe<String>;
  deathLocationDetails_not_starts_with?: Maybe<String>;
  deathLocationDetails_ends_with?: Maybe<String>;
  deathLocationDetails_not_ends_with?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxName_not?: Maybe<String>;
  imageMaxName_in?: Maybe<String[] | String>;
  imageMaxName_not_in?: Maybe<String[] | String>;
  imageMaxName_lt?: Maybe<String>;
  imageMaxName_lte?: Maybe<String>;
  imageMaxName_gt?: Maybe<String>;
  imageMaxName_gte?: Maybe<String>;
  imageMaxName_contains?: Maybe<String>;
  imageMaxName_not_contains?: Maybe<String>;
  imageMaxName_starts_with?: Maybe<String>;
  imageMaxName_not_starts_with?: Maybe<String>;
  imageMaxName_ends_with?: Maybe<String>;
  imageMaxName_not_ends_with?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxWidth_not?: Maybe<Int>;
  imageMaxWidth_in?: Maybe<Int[] | Int>;
  imageMaxWidth_not_in?: Maybe<Int[] | Int>;
  imageMaxWidth_lt?: Maybe<Int>;
  imageMaxWidth_lte?: Maybe<Int>;
  imageMaxWidth_gt?: Maybe<Int>;
  imageMaxWidth_gte?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageMaxHeight_not?: Maybe<Int>;
  imageMaxHeight_in?: Maybe<Int[] | Int>;
  imageMaxHeight_not_in?: Maybe<Int[] | Int>;
  imageMaxHeight_lt?: Maybe<Int>;
  imageMaxHeight_lte?: Maybe<Int>;
  imageMaxHeight_gt?: Maybe<Int>;
  imageMaxHeight_gte?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptName_not?: Maybe<String>;
  imageOptName_in?: Maybe<String[] | String>;
  imageOptName_not_in?: Maybe<String[] | String>;
  imageOptName_lt?: Maybe<String>;
  imageOptName_lte?: Maybe<String>;
  imageOptName_gt?: Maybe<String>;
  imageOptName_gte?: Maybe<String>;
  imageOptName_contains?: Maybe<String>;
  imageOptName_not_contains?: Maybe<String>;
  imageOptName_starts_with?: Maybe<String>;
  imageOptName_not_starts_with?: Maybe<String>;
  imageOptName_ends_with?: Maybe<String>;
  imageOptName_not_ends_with?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptWidth_not?: Maybe<Int>;
  imageOptWidth_in?: Maybe<Int[] | Int>;
  imageOptWidth_not_in?: Maybe<Int[] | Int>;
  imageOptWidth_lt?: Maybe<Int>;
  imageOptWidth_lte?: Maybe<Int>;
  imageOptWidth_gt?: Maybe<Int>;
  imageOptWidth_gte?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageOptHeight_not?: Maybe<Int>;
  imageOptHeight_in?: Maybe<Int[] | Int>;
  imageOptHeight_not_in?: Maybe<Int[] | Int>;
  imageOptHeight_lt?: Maybe<Int>;
  imageOptHeight_lte?: Maybe<Int>;
  imageOptHeight_gt?: Maybe<Int>;
  imageOptHeight_gte?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmName_not?: Maybe<String>;
  imageThmName_in?: Maybe<String[] | String>;
  imageThmName_not_in?: Maybe<String[] | String>;
  imageThmName_lt?: Maybe<String>;
  imageThmName_lte?: Maybe<String>;
  imageThmName_gt?: Maybe<String>;
  imageThmName_gte?: Maybe<String>;
  imageThmName_contains?: Maybe<String>;
  imageThmName_not_contains?: Maybe<String>;
  imageThmName_starts_with?: Maybe<String>;
  imageThmName_not_starts_with?: Maybe<String>;
  imageThmName_ends_with?: Maybe<String>;
  imageThmName_not_ends_with?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmWidth_not?: Maybe<Int>;
  imageThmWidth_in?: Maybe<Int[] | Int>;
  imageThmWidth_not_in?: Maybe<Int[] | Int>;
  imageThmWidth_lt?: Maybe<Int>;
  imageThmWidth_lte?: Maybe<Int>;
  imageThmWidth_gt?: Maybe<Int>;
  imageThmWidth_gte?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
  imageThmHeight_not?: Maybe<Int>;
  imageThmHeight_in?: Maybe<Int[] | Int>;
  imageThmHeight_not_in?: Maybe<Int[] | Int>;
  imageThmHeight_lt?: Maybe<Int>;
  imageThmHeight_lte?: Maybe<Int>;
  imageThmHeight_gt?: Maybe<Int>;
  imageThmHeight_gte?: Maybe<Int>;
  AND?: Maybe<ArtistScalarWhereInput[] | ArtistScalarWhereInput>;
  OR?: Maybe<ArtistScalarWhereInput[] | ArtistScalarWhereInput>;
  NOT?: Maybe<ArtistScalarWhereInput[] | ArtistScalarWhereInput>;
}

export interface ArtistUpdateManyWithWhereNestedInput {
  where: ArtistScalarWhereInput;
  data: ArtistUpdateManyDataInput;
}

export interface ArtistUpdateManyDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  birthName?: Maybe<String>;
  commonName?: Maybe<String>;
  dateOfBirth?: Maybe<String>;
  dateOfBirthAccuracy?: Maybe<String>;
  dateOfDeath?: Maybe<String>;
  dateOfDeathAccuracy?: Maybe<String>;
  nationality?: Maybe<String>;
  knownFor?: Maybe<String>;
  movements?: Maybe<String>;
  gender?: Maybe<String>;
  deceased?: Maybe<Boolean>;
  birthCountry?: Maybe<String>;
  birthLocation?: Maybe<String>;
  birthLocationDetails?: Maybe<String>;
  deathCountry?: Maybe<String>;
  deathLocation?: Maybe<String>;
  deathLocationDetails?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
}

export interface ArtworkLocationUpsertWithoutArtworksInput {
  update: ArtworkLocationUpdateWithoutArtworksDataInput;
  create: ArtworkLocationCreateWithoutArtworksInput;
}

export interface ArtworkUpsertWithoutAuctionsInput {
  update: ArtworkUpdateWithoutAuctionsDataInput;
  create: ArtworkCreateWithoutAuctionsInput;
}

export interface UserUpdateOneWithoutAuctionArtworkBuyerInput {
  create?: Maybe<UserCreateWithoutAuctionArtworkBuyerInput>;
  update?: Maybe<UserUpdateWithoutAuctionArtworkBuyerDataInput>;
  upsert?: Maybe<UserUpsertWithoutAuctionArtworkBuyerInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutAuctionArtworkBuyerDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_lcase?: Maybe<String>;
  email?: Maybe<String>;
  email_lcase?: Maybe<String>;
  emailValidated?: Maybe<Boolean>;
  active?: Maybe<Boolean>;
  posts?: Maybe<PostUpdateManyWithoutOwnerInput>;
  comments?: Maybe<CommentUpdateManyWithoutOwnerInput>;
  artistRecords?: Maybe<ArtistUpdateManyWithoutOwnerInput>;
  artworkRecords?: Maybe<ArtworkUpdateManyWithoutOwnerInput>;
  artworkLocationRecords?: Maybe<ArtworkLocationUpdateManyWithoutOwnerInput>;
  auctionArtworkSeller?: Maybe<AuctionArtworkUpdateManyWithoutSellerInput>;
  auctionArtworkWatcher?: Maybe<AuctionArtworkUpdateManyWithoutWatchersInput>;
  auctionArtworkBid?: Maybe<AuctionArtworkBidUpdateManyWithoutBidderInput>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
}

export interface ArtworkLocationUpdateManyWithoutOwnerInput {
  create?: Maybe<
    | ArtworkLocationCreateWithoutOwnerInput[]
    | ArtworkLocationCreateWithoutOwnerInput
  >;
  delete?: Maybe<
    ArtworkLocationWhereUniqueInput[] | ArtworkLocationWhereUniqueInput
  >;
  connect?: Maybe<
    ArtworkLocationWhereUniqueInput[] | ArtworkLocationWhereUniqueInput
  >;
  set?: Maybe<
    ArtworkLocationWhereUniqueInput[] | ArtworkLocationWhereUniqueInput
  >;
  disconnect?: Maybe<
    ArtworkLocationWhereUniqueInput[] | ArtworkLocationWhereUniqueInput
  >;
  update?: Maybe<
    | ArtworkLocationUpdateWithWhereUniqueWithoutOwnerInput[]
    | ArtworkLocationUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | ArtworkLocationUpsertWithWhereUniqueWithoutOwnerInput[]
    | ArtworkLocationUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<
    ArtworkLocationScalarWhereInput[] | ArtworkLocationScalarWhereInput
  >;
  updateMany?: Maybe<
    | ArtworkLocationUpdateManyWithWhereNestedInput[]
    | ArtworkLocationUpdateManyWithWhereNestedInput
  >;
}

export interface ArtworkLocationUpdateWithWhereUniqueWithoutOwnerInput {
  where: ArtworkLocationWhereUniqueInput;
  data: ArtworkLocationUpdateWithoutOwnerDataInput;
}

export interface ArtworkLocationUpdateWithoutOwnerDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  name?: Maybe<String>;
  nickname?: Maybe<String>;
  description?: Maybe<String>;
  dateFirstOpened?: Maybe<String>;
  streetAddress?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  postalCode?: Maybe<String>;
  country?: Maybe<String>;
  coorE?: Maybe<Int>;
  coorN?: Maybe<Int>;
  website?: Maybe<String>;
  isMuseum?: Maybe<Boolean>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
  artworks?: Maybe<ArtworkUpdateManyWithoutArtworkLocationInput>;
  artists?: Maybe<ArtistUpdateManyWithoutArtworkLocationsInput>;
}

export interface ArtworkUpdateManyWithoutArtworkLocationInput {
  create?: Maybe<
    | ArtworkCreateWithoutArtworkLocationInput[]
    | ArtworkCreateWithoutArtworkLocationInput
  >;
  delete?: Maybe<ArtworkWhereUniqueInput[] | ArtworkWhereUniqueInput>;
  connect?: Maybe<ArtworkWhereUniqueInput[] | ArtworkWhereUniqueInput>;
  set?: Maybe<ArtworkWhereUniqueInput[] | ArtworkWhereUniqueInput>;
  disconnect?: Maybe<ArtworkWhereUniqueInput[] | ArtworkWhereUniqueInput>;
  update?: Maybe<
    | ArtworkUpdateWithWhereUniqueWithoutArtworkLocationInput[]
    | ArtworkUpdateWithWhereUniqueWithoutArtworkLocationInput
  >;
  upsert?: Maybe<
    | ArtworkUpsertWithWhereUniqueWithoutArtworkLocationInput[]
    | ArtworkUpsertWithWhereUniqueWithoutArtworkLocationInput
  >;
  deleteMany?: Maybe<ArtworkScalarWhereInput[] | ArtworkScalarWhereInput>;
  updateMany?: Maybe<
    | ArtworkUpdateManyWithWhereNestedInput[]
    | ArtworkUpdateManyWithWhereNestedInput
  >;
}

export interface ArtworkUpdateWithWhereUniqueWithoutArtworkLocationInput {
  where: ArtworkWhereUniqueInput;
  data: ArtworkUpdateWithoutArtworkLocationDataInput;
}

export interface ArtworkUpdateWithoutArtworkLocationDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  owner?: Maybe<UserUpdateOneRequiredWithoutArtworkRecordsInput>;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  artist?: Maybe<ArtistUpdateOneRequiredWithoutArtworksInput>;
  notableWork?: Maybe<Boolean>;
  artworkLocationURL?: Maybe<String>;
  fileName?: Maybe<String>;
  workName?: Maybe<String>;
  workName_english?: Maybe<String>;
  workName_ascii?: Maybe<String>;
  dateCompleted?: Maybe<String>;
  dateCompletedAccuracy?: Maybe<String>;
  type?: Maybe<String>;
  genre?: Maybe<String>;
  medium?: Maybe<String>;
  mediumSupport?: Maybe<String>;
  description?: Maybe<String>;
  descriptionSource?: Maybe<String>;
  accession?: Maybe<String>;
  creditLine?: Maybe<String>;
  dimensionCoreW_mm?: Maybe<Int>;
  dimensionCoreH_mm?: Maybe<Int>;
  dimensionCoreD_mm?: Maybe<Int>;
  dimensionCoreWHD_in?: Maybe<String>;
  dimensionFramedW_mm?: Maybe<Int>;
  dimensionFramedH_mm?: Maybe<Int>;
  dimensionFramedD_mm?: Maybe<Int>;
  dimensionFramedWHD_in?: Maybe<String>;
  signature?: Maybe<String>;
  onviewAt?: Maybe<String>;
  otherDescription?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
  auctions?: Maybe<AuctionArtworkUpdateManyWithoutArtworkInput>;
}

export interface AuctionArtworkUpdateManyWithoutArtworkInput {
  create?: Maybe<
    | AuctionArtworkCreateWithoutArtworkInput[]
    | AuctionArtworkCreateWithoutArtworkInput
  >;
  delete?: Maybe<
    AuctionArtworkWhereUniqueInput[] | AuctionArtworkWhereUniqueInput
  >;
  connect?: Maybe<
    AuctionArtworkWhereUniqueInput[] | AuctionArtworkWhereUniqueInput
  >;
  set?: Maybe<
    AuctionArtworkWhereUniqueInput[] | AuctionArtworkWhereUniqueInput
  >;
  disconnect?: Maybe<
    AuctionArtworkWhereUniqueInput[] | AuctionArtworkWhereUniqueInput
  >;
  update?: Maybe<
    | AuctionArtworkUpdateWithWhereUniqueWithoutArtworkInput[]
    | AuctionArtworkUpdateWithWhereUniqueWithoutArtworkInput
  >;
  upsert?: Maybe<
    | AuctionArtworkUpsertWithWhereUniqueWithoutArtworkInput[]
    | AuctionArtworkUpsertWithWhereUniqueWithoutArtworkInput
  >;
  deleteMany?: Maybe<
    AuctionArtworkScalarWhereInput[] | AuctionArtworkScalarWhereInput
  >;
  updateMany?: Maybe<
    | AuctionArtworkUpdateManyWithWhereNestedInput[]
    | AuctionArtworkUpdateManyWithWhereNestedInput
  >;
}

export interface AuctionArtworkUpdateWithWhereUniqueWithoutArtworkInput {
  where: AuctionArtworkWhereUniqueInput;
  data: AuctionArtworkUpdateWithoutArtworkDataInput;
}

export interface AuctionArtworkUpdateWithoutArtworkDataInput {
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  withdrawnDate?: Maybe<DateTimeInput>;
  saleDate?: Maybe<DateTimeInput>;
  refundDate?: Maybe<DateTimeInput>;
  reserve?: Maybe<Int>;
  initialPrice?: Maybe<Int>;
  buyoutPrice?: Maybe<Int>;
  salePrice?: Maybe<Int>;
  seller?: Maybe<UserUpdateOneRequiredWithoutAuctionArtworkSellerInput>;
  buyer?: Maybe<UserUpdateOneWithoutAuctionArtworkBuyerInput>;
  bids?: Maybe<AuctionArtworkBidUpdateManyWithoutAuctionInput>;
  watchers?: Maybe<UserUpdateManyWithoutAuctionArtworkWatcherInput>;
}

export interface UserUpdateOneRequiredWithoutAuctionArtworkSellerInput {
  create?: Maybe<UserCreateWithoutAuctionArtworkSellerInput>;
  update?: Maybe<UserUpdateWithoutAuctionArtworkSellerDataInput>;
  upsert?: Maybe<UserUpsertWithoutAuctionArtworkSellerInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutAuctionArtworkSellerDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_lcase?: Maybe<String>;
  email?: Maybe<String>;
  email_lcase?: Maybe<String>;
  emailValidated?: Maybe<Boolean>;
  active?: Maybe<Boolean>;
  posts?: Maybe<PostUpdateManyWithoutOwnerInput>;
  comments?: Maybe<CommentUpdateManyWithoutOwnerInput>;
  artistRecords?: Maybe<ArtistUpdateManyWithoutOwnerInput>;
  artworkRecords?: Maybe<ArtworkUpdateManyWithoutOwnerInput>;
  artworkLocationRecords?: Maybe<ArtworkLocationUpdateManyWithoutOwnerInput>;
  auctionArtworkBuyer?: Maybe<AuctionArtworkUpdateManyWithoutBuyerInput>;
  auctionArtworkWatcher?: Maybe<AuctionArtworkUpdateManyWithoutWatchersInput>;
  auctionArtworkBid?: Maybe<AuctionArtworkBidUpdateManyWithoutBidderInput>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
}

export interface AuctionArtworkUpdateManyWithoutBuyerInput {
  create?: Maybe<
    | AuctionArtworkCreateWithoutBuyerInput[]
    | AuctionArtworkCreateWithoutBuyerInput
  >;
  delete?: Maybe<
    AuctionArtworkWhereUniqueInput[] | AuctionArtworkWhereUniqueInput
  >;
  connect?: Maybe<
    AuctionArtworkWhereUniqueInput[] | AuctionArtworkWhereUniqueInput
  >;
  set?: Maybe<
    AuctionArtworkWhereUniqueInput[] | AuctionArtworkWhereUniqueInput
  >;
  disconnect?: Maybe<
    AuctionArtworkWhereUniqueInput[] | AuctionArtworkWhereUniqueInput
  >;
  update?: Maybe<
    | AuctionArtworkUpdateWithWhereUniqueWithoutBuyerInput[]
    | AuctionArtworkUpdateWithWhereUniqueWithoutBuyerInput
  >;
  upsert?: Maybe<
    | AuctionArtworkUpsertWithWhereUniqueWithoutBuyerInput[]
    | AuctionArtworkUpsertWithWhereUniqueWithoutBuyerInput
  >;
  deleteMany?: Maybe<
    AuctionArtworkScalarWhereInput[] | AuctionArtworkScalarWhereInput
  >;
  updateMany?: Maybe<
    | AuctionArtworkUpdateManyWithWhereNestedInput[]
    | AuctionArtworkUpdateManyWithWhereNestedInput
  >;
}

export interface AuctionArtworkUpdateWithWhereUniqueWithoutBuyerInput {
  where: AuctionArtworkWhereUniqueInput;
  data: AuctionArtworkUpdateWithoutBuyerDataInput;
}

export interface AuctionArtworkUpdateWithoutBuyerDataInput {
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  withdrawnDate?: Maybe<DateTimeInput>;
  saleDate?: Maybe<DateTimeInput>;
  refundDate?: Maybe<DateTimeInput>;
  reserve?: Maybe<Int>;
  initialPrice?: Maybe<Int>;
  buyoutPrice?: Maybe<Int>;
  salePrice?: Maybe<Int>;
  artwork?: Maybe<ArtworkUpdateOneRequiredWithoutAuctionsInput>;
  seller?: Maybe<UserUpdateOneRequiredWithoutAuctionArtworkSellerInput>;
  bids?: Maybe<AuctionArtworkBidUpdateManyWithoutAuctionInput>;
  watchers?: Maybe<UserUpdateManyWithoutAuctionArtworkWatcherInput>;
}

export interface AuctionArtworkBidUpdateManyWithoutAuctionInput {
  create?: Maybe<
    | AuctionArtworkBidCreateWithoutAuctionInput[]
    | AuctionArtworkBidCreateWithoutAuctionInput
  >;
  delete?: Maybe<
    AuctionArtworkBidWhereUniqueInput[] | AuctionArtworkBidWhereUniqueInput
  >;
  connect?: Maybe<
    AuctionArtworkBidWhereUniqueInput[] | AuctionArtworkBidWhereUniqueInput
  >;
  set?: Maybe<
    AuctionArtworkBidWhereUniqueInput[] | AuctionArtworkBidWhereUniqueInput
  >;
  disconnect?: Maybe<
    AuctionArtworkBidWhereUniqueInput[] | AuctionArtworkBidWhereUniqueInput
  >;
  update?: Maybe<
    | AuctionArtworkBidUpdateWithWhereUniqueWithoutAuctionInput[]
    | AuctionArtworkBidUpdateWithWhereUniqueWithoutAuctionInput
  >;
  upsert?: Maybe<
    | AuctionArtworkBidUpsertWithWhereUniqueWithoutAuctionInput[]
    | AuctionArtworkBidUpsertWithWhereUniqueWithoutAuctionInput
  >;
  deleteMany?: Maybe<
    AuctionArtworkBidScalarWhereInput[] | AuctionArtworkBidScalarWhereInput
  >;
  updateMany?: Maybe<
    | AuctionArtworkBidUpdateManyWithWhereNestedInput[]
    | AuctionArtworkBidUpdateManyWithWhereNestedInput
  >;
}

export interface AuctionArtworkBidUpdateWithWhereUniqueWithoutAuctionInput {
  where: AuctionArtworkBidWhereUniqueInput;
  data: AuctionArtworkBidUpdateWithoutAuctionDataInput;
}

export interface AuctionArtworkBidUpdateWithoutAuctionDataInput {
  deletedAt?: Maybe<DateTimeInput>;
  bidder?: Maybe<UserUpdateOneWithoutAuctionArtworkBidInput>;
  amount?: Maybe<Int>;
}

export interface UserUpdateOneWithoutAuctionArtworkBidInput {
  create?: Maybe<UserCreateWithoutAuctionArtworkBidInput>;
  update?: Maybe<UserUpdateWithoutAuctionArtworkBidDataInput>;
  upsert?: Maybe<UserUpsertWithoutAuctionArtworkBidInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutAuctionArtworkBidDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_lcase?: Maybe<String>;
  email?: Maybe<String>;
  email_lcase?: Maybe<String>;
  emailValidated?: Maybe<Boolean>;
  active?: Maybe<Boolean>;
  posts?: Maybe<PostUpdateManyWithoutOwnerInput>;
  comments?: Maybe<CommentUpdateManyWithoutOwnerInput>;
  artistRecords?: Maybe<ArtistUpdateManyWithoutOwnerInput>;
  artworkRecords?: Maybe<ArtworkUpdateManyWithoutOwnerInput>;
  artworkLocationRecords?: Maybe<ArtworkLocationUpdateManyWithoutOwnerInput>;
  auctionArtworkSeller?: Maybe<AuctionArtworkUpdateManyWithoutSellerInput>;
  auctionArtworkBuyer?: Maybe<AuctionArtworkUpdateManyWithoutBuyerInput>;
  auctionArtworkWatcher?: Maybe<AuctionArtworkUpdateManyWithoutWatchersInput>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
}

export interface AuctionArtworkUpdateManyWithoutWatchersInput {
  create?: Maybe<
    | AuctionArtworkCreateWithoutWatchersInput[]
    | AuctionArtworkCreateWithoutWatchersInput
  >;
  delete?: Maybe<
    AuctionArtworkWhereUniqueInput[] | AuctionArtworkWhereUniqueInput
  >;
  connect?: Maybe<
    AuctionArtworkWhereUniqueInput[] | AuctionArtworkWhereUniqueInput
  >;
  set?: Maybe<
    AuctionArtworkWhereUniqueInput[] | AuctionArtworkWhereUniqueInput
  >;
  disconnect?: Maybe<
    AuctionArtworkWhereUniqueInput[] | AuctionArtworkWhereUniqueInput
  >;
  update?: Maybe<
    | AuctionArtworkUpdateWithWhereUniqueWithoutWatchersInput[]
    | AuctionArtworkUpdateWithWhereUniqueWithoutWatchersInput
  >;
  upsert?: Maybe<
    | AuctionArtworkUpsertWithWhereUniqueWithoutWatchersInput[]
    | AuctionArtworkUpsertWithWhereUniqueWithoutWatchersInput
  >;
  deleteMany?: Maybe<
    AuctionArtworkScalarWhereInput[] | AuctionArtworkScalarWhereInput
  >;
  updateMany?: Maybe<
    | AuctionArtworkUpdateManyWithWhereNestedInput[]
    | AuctionArtworkUpdateManyWithWhereNestedInput
  >;
}

export interface AuctionArtworkUpdateWithWhereUniqueWithoutWatchersInput {
  where: AuctionArtworkWhereUniqueInput;
  data: AuctionArtworkUpdateWithoutWatchersDataInput;
}

export interface AuctionArtworkUpdateWithoutWatchersDataInput {
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  withdrawnDate?: Maybe<DateTimeInput>;
  saleDate?: Maybe<DateTimeInput>;
  refundDate?: Maybe<DateTimeInput>;
  reserve?: Maybe<Int>;
  initialPrice?: Maybe<Int>;
  buyoutPrice?: Maybe<Int>;
  salePrice?: Maybe<Int>;
  artwork?: Maybe<ArtworkUpdateOneRequiredWithoutAuctionsInput>;
  seller?: Maybe<UserUpdateOneRequiredWithoutAuctionArtworkSellerInput>;
  buyer?: Maybe<UserUpdateOneWithoutAuctionArtworkBuyerInput>;
  bids?: Maybe<AuctionArtworkBidUpdateManyWithoutAuctionInput>;
}

export interface AuctionArtworkUpsertWithWhereUniqueWithoutWatchersInput {
  where: AuctionArtworkWhereUniqueInput;
  update: AuctionArtworkUpdateWithoutWatchersDataInput;
  create: AuctionArtworkCreateWithoutWatchersInput;
}

export interface AuctionArtworkScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deletedAt?: Maybe<DateTimeInput>;
  deletedAt_not?: Maybe<DateTimeInput>;
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_lt?: Maybe<DateTimeInput>;
  deletedAt_lte?: Maybe<DateTimeInput>;
  deletedAt_gt?: Maybe<DateTimeInput>;
  deletedAt_gte?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  endDate_not?: Maybe<DateTimeInput>;
  endDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_lt?: Maybe<DateTimeInput>;
  endDate_lte?: Maybe<DateTimeInput>;
  endDate_gt?: Maybe<DateTimeInput>;
  endDate_gte?: Maybe<DateTimeInput>;
  withdrawnDate?: Maybe<DateTimeInput>;
  withdrawnDate_not?: Maybe<DateTimeInput>;
  withdrawnDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  withdrawnDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  withdrawnDate_lt?: Maybe<DateTimeInput>;
  withdrawnDate_lte?: Maybe<DateTimeInput>;
  withdrawnDate_gt?: Maybe<DateTimeInput>;
  withdrawnDate_gte?: Maybe<DateTimeInput>;
  saleDate?: Maybe<DateTimeInput>;
  saleDate_not?: Maybe<DateTimeInput>;
  saleDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  saleDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  saleDate_lt?: Maybe<DateTimeInput>;
  saleDate_lte?: Maybe<DateTimeInput>;
  saleDate_gt?: Maybe<DateTimeInput>;
  saleDate_gte?: Maybe<DateTimeInput>;
  refundDate?: Maybe<DateTimeInput>;
  refundDate_not?: Maybe<DateTimeInput>;
  refundDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  refundDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  refundDate_lt?: Maybe<DateTimeInput>;
  refundDate_lte?: Maybe<DateTimeInput>;
  refundDate_gt?: Maybe<DateTimeInput>;
  refundDate_gte?: Maybe<DateTimeInput>;
  reserve?: Maybe<Int>;
  reserve_not?: Maybe<Int>;
  reserve_in?: Maybe<Int[] | Int>;
  reserve_not_in?: Maybe<Int[] | Int>;
  reserve_lt?: Maybe<Int>;
  reserve_lte?: Maybe<Int>;
  reserve_gt?: Maybe<Int>;
  reserve_gte?: Maybe<Int>;
  initialPrice?: Maybe<Int>;
  initialPrice_not?: Maybe<Int>;
  initialPrice_in?: Maybe<Int[] | Int>;
  initialPrice_not_in?: Maybe<Int[] | Int>;
  initialPrice_lt?: Maybe<Int>;
  initialPrice_lte?: Maybe<Int>;
  initialPrice_gt?: Maybe<Int>;
  initialPrice_gte?: Maybe<Int>;
  buyoutPrice?: Maybe<Int>;
  buyoutPrice_not?: Maybe<Int>;
  buyoutPrice_in?: Maybe<Int[] | Int>;
  buyoutPrice_not_in?: Maybe<Int[] | Int>;
  buyoutPrice_lt?: Maybe<Int>;
  buyoutPrice_lte?: Maybe<Int>;
  buyoutPrice_gt?: Maybe<Int>;
  buyoutPrice_gte?: Maybe<Int>;
  salePrice?: Maybe<Int>;
  salePrice_not?: Maybe<Int>;
  salePrice_in?: Maybe<Int[] | Int>;
  salePrice_not_in?: Maybe<Int[] | Int>;
  salePrice_lt?: Maybe<Int>;
  salePrice_lte?: Maybe<Int>;
  salePrice_gt?: Maybe<Int>;
  salePrice_gte?: Maybe<Int>;
  AND?: Maybe<
    AuctionArtworkScalarWhereInput[] | AuctionArtworkScalarWhereInput
  >;
  OR?: Maybe<AuctionArtworkScalarWhereInput[] | AuctionArtworkScalarWhereInput>;
  NOT?: Maybe<
    AuctionArtworkScalarWhereInput[] | AuctionArtworkScalarWhereInput
  >;
}

export interface AuctionArtworkUpdateManyWithWhereNestedInput {
  where: AuctionArtworkScalarWhereInput;
  data: AuctionArtworkUpdateManyDataInput;
}

export interface AuctionArtworkUpdateManyDataInput {
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  withdrawnDate?: Maybe<DateTimeInput>;
  saleDate?: Maybe<DateTimeInput>;
  refundDate?: Maybe<DateTimeInput>;
  reserve?: Maybe<Int>;
  initialPrice?: Maybe<Int>;
  buyoutPrice?: Maybe<Int>;
  salePrice?: Maybe<Int>;
}

export interface UserUpdatepermissionsInput {
  set?: Maybe<PermissionsType[] | PermissionsType>;
}

export interface UserUpsertWithoutAuctionArtworkBidInput {
  update: UserUpdateWithoutAuctionArtworkBidDataInput;
  create: UserCreateWithoutAuctionArtworkBidInput;
}

export interface AuctionArtworkBidUpsertWithWhereUniqueWithoutAuctionInput {
  where: AuctionArtworkBidWhereUniqueInput;
  update: AuctionArtworkBidUpdateWithoutAuctionDataInput;
  create: AuctionArtworkBidCreateWithoutAuctionInput;
}

export interface AuctionArtworkBidScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deletedAt?: Maybe<DateTimeInput>;
  deletedAt_not?: Maybe<DateTimeInput>;
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_lt?: Maybe<DateTimeInput>;
  deletedAt_lte?: Maybe<DateTimeInput>;
  deletedAt_gt?: Maybe<DateTimeInput>;
  deletedAt_gte?: Maybe<DateTimeInput>;
  amount?: Maybe<Int>;
  amount_not?: Maybe<Int>;
  amount_in?: Maybe<Int[] | Int>;
  amount_not_in?: Maybe<Int[] | Int>;
  amount_lt?: Maybe<Int>;
  amount_lte?: Maybe<Int>;
  amount_gt?: Maybe<Int>;
  amount_gte?: Maybe<Int>;
  AND?: Maybe<
    AuctionArtworkBidScalarWhereInput[] | AuctionArtworkBidScalarWhereInput
  >;
  OR?: Maybe<
    AuctionArtworkBidScalarWhereInput[] | AuctionArtworkBidScalarWhereInput
  >;
  NOT?: Maybe<
    AuctionArtworkBidScalarWhereInput[] | AuctionArtworkBidScalarWhereInput
  >;
}

export interface AuctionArtworkBidUpdateManyWithWhereNestedInput {
  where: AuctionArtworkBidScalarWhereInput;
  data: AuctionArtworkBidUpdateManyDataInput;
}

export interface AuctionArtworkBidUpdateManyDataInput {
  deletedAt?: Maybe<DateTimeInput>;
  amount?: Maybe<Int>;
}

export interface UserUpdateManyWithoutAuctionArtworkWatcherInput {
  create?: Maybe<
    | UserCreateWithoutAuctionArtworkWatcherInput[]
    | UserCreateWithoutAuctionArtworkWatcherInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutAuctionArtworkWatcherInput[]
    | UserUpdateWithWhereUniqueWithoutAuctionArtworkWatcherInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutAuctionArtworkWatcherInput[]
    | UserUpsertWithWhereUniqueWithoutAuctionArtworkWatcherInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutAuctionArtworkWatcherInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutAuctionArtworkWatcherDataInput;
}

export interface UserUpdateWithoutAuctionArtworkWatcherDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_lcase?: Maybe<String>;
  email?: Maybe<String>;
  email_lcase?: Maybe<String>;
  emailValidated?: Maybe<Boolean>;
  active?: Maybe<Boolean>;
  posts?: Maybe<PostUpdateManyWithoutOwnerInput>;
  comments?: Maybe<CommentUpdateManyWithoutOwnerInput>;
  artistRecords?: Maybe<ArtistUpdateManyWithoutOwnerInput>;
  artworkRecords?: Maybe<ArtworkUpdateManyWithoutOwnerInput>;
  artworkLocationRecords?: Maybe<ArtworkLocationUpdateManyWithoutOwnerInput>;
  auctionArtworkSeller?: Maybe<AuctionArtworkUpdateManyWithoutSellerInput>;
  auctionArtworkBuyer?: Maybe<AuctionArtworkUpdateManyWithoutBuyerInput>;
  auctionArtworkBid?: Maybe<AuctionArtworkBidUpdateManyWithoutBidderInput>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
}

export interface AuctionArtworkBidUpdateManyWithoutBidderInput {
  create?: Maybe<
    | AuctionArtworkBidCreateWithoutBidderInput[]
    | AuctionArtworkBidCreateWithoutBidderInput
  >;
  delete?: Maybe<
    AuctionArtworkBidWhereUniqueInput[] | AuctionArtworkBidWhereUniqueInput
  >;
  connect?: Maybe<
    AuctionArtworkBidWhereUniqueInput[] | AuctionArtworkBidWhereUniqueInput
  >;
  set?: Maybe<
    AuctionArtworkBidWhereUniqueInput[] | AuctionArtworkBidWhereUniqueInput
  >;
  disconnect?: Maybe<
    AuctionArtworkBidWhereUniqueInput[] | AuctionArtworkBidWhereUniqueInput
  >;
  update?: Maybe<
    | AuctionArtworkBidUpdateWithWhereUniqueWithoutBidderInput[]
    | AuctionArtworkBidUpdateWithWhereUniqueWithoutBidderInput
  >;
  upsert?: Maybe<
    | AuctionArtworkBidUpsertWithWhereUniqueWithoutBidderInput[]
    | AuctionArtworkBidUpsertWithWhereUniqueWithoutBidderInput
  >;
  deleteMany?: Maybe<
    AuctionArtworkBidScalarWhereInput[] | AuctionArtworkBidScalarWhereInput
  >;
  updateMany?: Maybe<
    | AuctionArtworkBidUpdateManyWithWhereNestedInput[]
    | AuctionArtworkBidUpdateManyWithWhereNestedInput
  >;
}

export interface AuctionArtworkBidUpdateWithWhereUniqueWithoutBidderInput {
  where: AuctionArtworkBidWhereUniqueInput;
  data: AuctionArtworkBidUpdateWithoutBidderDataInput;
}

export interface AuctionArtworkBidUpdateWithoutBidderDataInput {
  deletedAt?: Maybe<DateTimeInput>;
  auction?: Maybe<AuctionArtworkUpdateOneRequiredWithoutBidsInput>;
  amount?: Maybe<Int>;
}

export interface AuctionArtworkUpdateOneRequiredWithoutBidsInput {
  create?: Maybe<AuctionArtworkCreateWithoutBidsInput>;
  update?: Maybe<AuctionArtworkUpdateWithoutBidsDataInput>;
  upsert?: Maybe<AuctionArtworkUpsertWithoutBidsInput>;
  connect?: Maybe<AuctionArtworkWhereUniqueInput>;
}

export interface AuctionArtworkUpdateWithoutBidsDataInput {
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  withdrawnDate?: Maybe<DateTimeInput>;
  saleDate?: Maybe<DateTimeInput>;
  refundDate?: Maybe<DateTimeInput>;
  reserve?: Maybe<Int>;
  initialPrice?: Maybe<Int>;
  buyoutPrice?: Maybe<Int>;
  salePrice?: Maybe<Int>;
  artwork?: Maybe<ArtworkUpdateOneRequiredWithoutAuctionsInput>;
  seller?: Maybe<UserUpdateOneRequiredWithoutAuctionArtworkSellerInput>;
  buyer?: Maybe<UserUpdateOneWithoutAuctionArtworkBuyerInput>;
  watchers?: Maybe<UserUpdateManyWithoutAuctionArtworkWatcherInput>;
}

export interface AuctionArtworkUpsertWithoutBidsInput {
  update: AuctionArtworkUpdateWithoutBidsDataInput;
  create: AuctionArtworkCreateWithoutBidsInput;
}

export interface AuctionArtworkBidUpsertWithWhereUniqueWithoutBidderInput {
  where: AuctionArtworkBidWhereUniqueInput;
  update: AuctionArtworkBidUpdateWithoutBidderDataInput;
  create: AuctionArtworkBidCreateWithoutBidderInput;
}

export interface UserUpsertWithWhereUniqueWithoutAuctionArtworkWatcherInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutAuctionArtworkWatcherDataInput;
  create: UserCreateWithoutAuctionArtworkWatcherInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  easyId?: Maybe<String>;
  easyId_not?: Maybe<String>;
  easyId_in?: Maybe<String[] | String>;
  easyId_not_in?: Maybe<String[] | String>;
  easyId_lt?: Maybe<String>;
  easyId_lte?: Maybe<String>;
  easyId_gt?: Maybe<String>;
  easyId_gte?: Maybe<String>;
  easyId_contains?: Maybe<String>;
  easyId_not_contains?: Maybe<String>;
  easyId_starts_with?: Maybe<String>;
  easyId_not_starts_with?: Maybe<String>;
  easyId_ends_with?: Maybe<String>;
  easyId_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deletedAt?: Maybe<DateTimeInput>;
  deletedAt_not?: Maybe<DateTimeInput>;
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_lt?: Maybe<DateTimeInput>;
  deletedAt_lte?: Maybe<DateTimeInput>;
  deletedAt_gt?: Maybe<DateTimeInput>;
  deletedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  name_lcase?: Maybe<String>;
  name_lcase_not?: Maybe<String>;
  name_lcase_in?: Maybe<String[] | String>;
  name_lcase_not_in?: Maybe<String[] | String>;
  name_lcase_lt?: Maybe<String>;
  name_lcase_lte?: Maybe<String>;
  name_lcase_gt?: Maybe<String>;
  name_lcase_gte?: Maybe<String>;
  name_lcase_contains?: Maybe<String>;
  name_lcase_not_contains?: Maybe<String>;
  name_lcase_starts_with?: Maybe<String>;
  name_lcase_not_starts_with?: Maybe<String>;
  name_lcase_ends_with?: Maybe<String>;
  name_lcase_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  email_lcase?: Maybe<String>;
  email_lcase_not?: Maybe<String>;
  email_lcase_in?: Maybe<String[] | String>;
  email_lcase_not_in?: Maybe<String[] | String>;
  email_lcase_lt?: Maybe<String>;
  email_lcase_lte?: Maybe<String>;
  email_lcase_gt?: Maybe<String>;
  email_lcase_gte?: Maybe<String>;
  email_lcase_contains?: Maybe<String>;
  email_lcase_not_contains?: Maybe<String>;
  email_lcase_starts_with?: Maybe<String>;
  email_lcase_not_starts_with?: Maybe<String>;
  email_lcase_ends_with?: Maybe<String>;
  email_lcase_not_ends_with?: Maybe<String>;
  emailValidated?: Maybe<Boolean>;
  emailValidated_not?: Maybe<Boolean>;
  active?: Maybe<Boolean>;
  active_not?: Maybe<Boolean>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetToken_not?: Maybe<String>;
  resetToken_in?: Maybe<String[] | String>;
  resetToken_not_in?: Maybe<String[] | String>;
  resetToken_lt?: Maybe<String>;
  resetToken_lte?: Maybe<String>;
  resetToken_gt?: Maybe<String>;
  resetToken_gte?: Maybe<String>;
  resetToken_contains?: Maybe<String>;
  resetToken_not_contains?: Maybe<String>;
  resetToken_starts_with?: Maybe<String>;
  resetToken_not_starts_with?: Maybe<String>;
  resetToken_ends_with?: Maybe<String>;
  resetToken_not_ends_with?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  resetTokenExpiry_not?: Maybe<String>;
  resetTokenExpiry_in?: Maybe<String[] | String>;
  resetTokenExpiry_not_in?: Maybe<String[] | String>;
  resetTokenExpiry_lt?: Maybe<String>;
  resetTokenExpiry_lte?: Maybe<String>;
  resetTokenExpiry_gt?: Maybe<String>;
  resetTokenExpiry_gte?: Maybe<String>;
  resetTokenExpiry_contains?: Maybe<String>;
  resetTokenExpiry_not_contains?: Maybe<String>;
  resetTokenExpiry_starts_with?: Maybe<String>;
  resetTokenExpiry_not_starts_with?: Maybe<String>;
  resetTokenExpiry_ends_with?: Maybe<String>;
  resetTokenExpiry_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_lcase?: Maybe<String>;
  email?: Maybe<String>;
  email_lcase?: Maybe<String>;
  emailValidated?: Maybe<Boolean>;
  active?: Maybe<Boolean>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
}

export interface AuctionArtworkUpsertWithWhereUniqueWithoutBuyerInput {
  where: AuctionArtworkWhereUniqueInput;
  update: AuctionArtworkUpdateWithoutBuyerDataInput;
  create: AuctionArtworkCreateWithoutBuyerInput;
}

export interface UserUpsertWithoutAuctionArtworkSellerInput {
  update: UserUpdateWithoutAuctionArtworkSellerDataInput;
  create: UserCreateWithoutAuctionArtworkSellerInput;
}

export interface AuctionArtworkUpsertWithWhereUniqueWithoutArtworkInput {
  where: AuctionArtworkWhereUniqueInput;
  update: AuctionArtworkUpdateWithoutArtworkDataInput;
  create: AuctionArtworkCreateWithoutArtworkInput;
}

export interface ArtworkUpsertWithWhereUniqueWithoutArtworkLocationInput {
  where: ArtworkWhereUniqueInput;
  update: ArtworkUpdateWithoutArtworkLocationDataInput;
  create: ArtworkCreateWithoutArtworkLocationInput;
}

export interface ArtworkScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  easyId?: Maybe<String>;
  easyId_not?: Maybe<String>;
  easyId_in?: Maybe<String[] | String>;
  easyId_not_in?: Maybe<String[] | String>;
  easyId_lt?: Maybe<String>;
  easyId_lte?: Maybe<String>;
  easyId_gt?: Maybe<String>;
  easyId_gte?: Maybe<String>;
  easyId_contains?: Maybe<String>;
  easyId_not_contains?: Maybe<String>;
  easyId_starts_with?: Maybe<String>;
  easyId_not_starts_with?: Maybe<String>;
  easyId_ends_with?: Maybe<String>;
  easyId_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deletedAt?: Maybe<DateTimeInput>;
  deletedAt_not?: Maybe<DateTimeInput>;
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_lt?: Maybe<DateTimeInput>;
  deletedAt_lte?: Maybe<DateTimeInput>;
  deletedAt_gt?: Maybe<DateTimeInput>;
  deletedAt_gte?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPage_not?: Maybe<String>;
  wikiPage_in?: Maybe<String[] | String>;
  wikiPage_not_in?: Maybe<String[] | String>;
  wikiPage_lt?: Maybe<String>;
  wikiPage_lte?: Maybe<String>;
  wikiPage_gt?: Maybe<String>;
  wikiPage_gte?: Maybe<String>;
  wikiPage_contains?: Maybe<String>;
  wikiPage_not_contains?: Maybe<String>;
  wikiPage_starts_with?: Maybe<String>;
  wikiPage_not_starts_with?: Maybe<String>;
  wikiPage_ends_with?: Maybe<String>;
  wikiPage_not_ends_with?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  wikiPhoto_not?: Maybe<String>;
  wikiPhoto_in?: Maybe<String[] | String>;
  wikiPhoto_not_in?: Maybe<String[] | String>;
  wikiPhoto_lt?: Maybe<String>;
  wikiPhoto_lte?: Maybe<String>;
  wikiPhoto_gt?: Maybe<String>;
  wikiPhoto_gte?: Maybe<String>;
  wikiPhoto_contains?: Maybe<String>;
  wikiPhoto_not_contains?: Maybe<String>;
  wikiPhoto_starts_with?: Maybe<String>;
  wikiPhoto_not_starts_with?: Maybe<String>;
  wikiPhoto_ends_with?: Maybe<String>;
  wikiPhoto_not_ends_with?: Maybe<String>;
  imageLink?: Maybe<String>;
  imageLink_not?: Maybe<String>;
  imageLink_in?: Maybe<String[] | String>;
  imageLink_not_in?: Maybe<String[] | String>;
  imageLink_lt?: Maybe<String>;
  imageLink_lte?: Maybe<String>;
  imageLink_gt?: Maybe<String>;
  imageLink_gte?: Maybe<String>;
  imageLink_contains?: Maybe<String>;
  imageLink_not_contains?: Maybe<String>;
  imageLink_starts_with?: Maybe<String>;
  imageLink_not_starts_with?: Maybe<String>;
  imageLink_ends_with?: Maybe<String>;
  imageLink_not_ends_with?: Maybe<String>;
  notableWork?: Maybe<Boolean>;
  notableWork_not?: Maybe<Boolean>;
  artworkLocationURL?: Maybe<String>;
  artworkLocationURL_not?: Maybe<String>;
  artworkLocationURL_in?: Maybe<String[] | String>;
  artworkLocationURL_not_in?: Maybe<String[] | String>;
  artworkLocationURL_lt?: Maybe<String>;
  artworkLocationURL_lte?: Maybe<String>;
  artworkLocationURL_gt?: Maybe<String>;
  artworkLocationURL_gte?: Maybe<String>;
  artworkLocationURL_contains?: Maybe<String>;
  artworkLocationURL_not_contains?: Maybe<String>;
  artworkLocationURL_starts_with?: Maybe<String>;
  artworkLocationURL_not_starts_with?: Maybe<String>;
  artworkLocationURL_ends_with?: Maybe<String>;
  artworkLocationURL_not_ends_with?: Maybe<String>;
  fileName?: Maybe<String>;
  fileName_not?: Maybe<String>;
  fileName_in?: Maybe<String[] | String>;
  fileName_not_in?: Maybe<String[] | String>;
  fileName_lt?: Maybe<String>;
  fileName_lte?: Maybe<String>;
  fileName_gt?: Maybe<String>;
  fileName_gte?: Maybe<String>;
  fileName_contains?: Maybe<String>;
  fileName_not_contains?: Maybe<String>;
  fileName_starts_with?: Maybe<String>;
  fileName_not_starts_with?: Maybe<String>;
  fileName_ends_with?: Maybe<String>;
  fileName_not_ends_with?: Maybe<String>;
  workName?: Maybe<String>;
  workName_not?: Maybe<String>;
  workName_in?: Maybe<String[] | String>;
  workName_not_in?: Maybe<String[] | String>;
  workName_lt?: Maybe<String>;
  workName_lte?: Maybe<String>;
  workName_gt?: Maybe<String>;
  workName_gte?: Maybe<String>;
  workName_contains?: Maybe<String>;
  workName_not_contains?: Maybe<String>;
  workName_starts_with?: Maybe<String>;
  workName_not_starts_with?: Maybe<String>;
  workName_ends_with?: Maybe<String>;
  workName_not_ends_with?: Maybe<String>;
  workName_english?: Maybe<String>;
  workName_english_not?: Maybe<String>;
  workName_english_in?: Maybe<String[] | String>;
  workName_english_not_in?: Maybe<String[] | String>;
  workName_english_lt?: Maybe<String>;
  workName_english_lte?: Maybe<String>;
  workName_english_gt?: Maybe<String>;
  workName_english_gte?: Maybe<String>;
  workName_english_contains?: Maybe<String>;
  workName_english_not_contains?: Maybe<String>;
  workName_english_starts_with?: Maybe<String>;
  workName_english_not_starts_with?: Maybe<String>;
  workName_english_ends_with?: Maybe<String>;
  workName_english_not_ends_with?: Maybe<String>;
  workName_ascii?: Maybe<String>;
  workName_ascii_not?: Maybe<String>;
  workName_ascii_in?: Maybe<String[] | String>;
  workName_ascii_not_in?: Maybe<String[] | String>;
  workName_ascii_lt?: Maybe<String>;
  workName_ascii_lte?: Maybe<String>;
  workName_ascii_gt?: Maybe<String>;
  workName_ascii_gte?: Maybe<String>;
  workName_ascii_contains?: Maybe<String>;
  workName_ascii_not_contains?: Maybe<String>;
  workName_ascii_starts_with?: Maybe<String>;
  workName_ascii_not_starts_with?: Maybe<String>;
  workName_ascii_ends_with?: Maybe<String>;
  workName_ascii_not_ends_with?: Maybe<String>;
  dateCompleted?: Maybe<String>;
  dateCompleted_not?: Maybe<String>;
  dateCompleted_in?: Maybe<String[] | String>;
  dateCompleted_not_in?: Maybe<String[] | String>;
  dateCompleted_lt?: Maybe<String>;
  dateCompleted_lte?: Maybe<String>;
  dateCompleted_gt?: Maybe<String>;
  dateCompleted_gte?: Maybe<String>;
  dateCompleted_contains?: Maybe<String>;
  dateCompleted_not_contains?: Maybe<String>;
  dateCompleted_starts_with?: Maybe<String>;
  dateCompleted_not_starts_with?: Maybe<String>;
  dateCompleted_ends_with?: Maybe<String>;
  dateCompleted_not_ends_with?: Maybe<String>;
  dateCompletedAccuracy?: Maybe<String>;
  dateCompletedAccuracy_not?: Maybe<String>;
  dateCompletedAccuracy_in?: Maybe<String[] | String>;
  dateCompletedAccuracy_not_in?: Maybe<String[] | String>;
  dateCompletedAccuracy_lt?: Maybe<String>;
  dateCompletedAccuracy_lte?: Maybe<String>;
  dateCompletedAccuracy_gt?: Maybe<String>;
  dateCompletedAccuracy_gte?: Maybe<String>;
  dateCompletedAccuracy_contains?: Maybe<String>;
  dateCompletedAccuracy_not_contains?: Maybe<String>;
  dateCompletedAccuracy_starts_with?: Maybe<String>;
  dateCompletedAccuracy_not_starts_with?: Maybe<String>;
  dateCompletedAccuracy_ends_with?: Maybe<String>;
  dateCompletedAccuracy_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  genre?: Maybe<String>;
  genre_not?: Maybe<String>;
  genre_in?: Maybe<String[] | String>;
  genre_not_in?: Maybe<String[] | String>;
  genre_lt?: Maybe<String>;
  genre_lte?: Maybe<String>;
  genre_gt?: Maybe<String>;
  genre_gte?: Maybe<String>;
  genre_contains?: Maybe<String>;
  genre_not_contains?: Maybe<String>;
  genre_starts_with?: Maybe<String>;
  genre_not_starts_with?: Maybe<String>;
  genre_ends_with?: Maybe<String>;
  genre_not_ends_with?: Maybe<String>;
  medium?: Maybe<String>;
  medium_not?: Maybe<String>;
  medium_in?: Maybe<String[] | String>;
  medium_not_in?: Maybe<String[] | String>;
  medium_lt?: Maybe<String>;
  medium_lte?: Maybe<String>;
  medium_gt?: Maybe<String>;
  medium_gte?: Maybe<String>;
  medium_contains?: Maybe<String>;
  medium_not_contains?: Maybe<String>;
  medium_starts_with?: Maybe<String>;
  medium_not_starts_with?: Maybe<String>;
  medium_ends_with?: Maybe<String>;
  medium_not_ends_with?: Maybe<String>;
  mediumSupport?: Maybe<String>;
  mediumSupport_not?: Maybe<String>;
  mediumSupport_in?: Maybe<String[] | String>;
  mediumSupport_not_in?: Maybe<String[] | String>;
  mediumSupport_lt?: Maybe<String>;
  mediumSupport_lte?: Maybe<String>;
  mediumSupport_gt?: Maybe<String>;
  mediumSupport_gte?: Maybe<String>;
  mediumSupport_contains?: Maybe<String>;
  mediumSupport_not_contains?: Maybe<String>;
  mediumSupport_starts_with?: Maybe<String>;
  mediumSupport_not_starts_with?: Maybe<String>;
  mediumSupport_ends_with?: Maybe<String>;
  mediumSupport_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  descriptionSource?: Maybe<String>;
  descriptionSource_not?: Maybe<String>;
  descriptionSource_in?: Maybe<String[] | String>;
  descriptionSource_not_in?: Maybe<String[] | String>;
  descriptionSource_lt?: Maybe<String>;
  descriptionSource_lte?: Maybe<String>;
  descriptionSource_gt?: Maybe<String>;
  descriptionSource_gte?: Maybe<String>;
  descriptionSource_contains?: Maybe<String>;
  descriptionSource_not_contains?: Maybe<String>;
  descriptionSource_starts_with?: Maybe<String>;
  descriptionSource_not_starts_with?: Maybe<String>;
  descriptionSource_ends_with?: Maybe<String>;
  descriptionSource_not_ends_with?: Maybe<String>;
  accession?: Maybe<String>;
  accession_not?: Maybe<String>;
  accession_in?: Maybe<String[] | String>;
  accession_not_in?: Maybe<String[] | String>;
  accession_lt?: Maybe<String>;
  accession_lte?: Maybe<String>;
  accession_gt?: Maybe<String>;
  accession_gte?: Maybe<String>;
  accession_contains?: Maybe<String>;
  accession_not_contains?: Maybe<String>;
  accession_starts_with?: Maybe<String>;
  accession_not_starts_with?: Maybe<String>;
  accession_ends_with?: Maybe<String>;
  accession_not_ends_with?: Maybe<String>;
  creditLine?: Maybe<String>;
  creditLine_not?: Maybe<String>;
  creditLine_in?: Maybe<String[] | String>;
  creditLine_not_in?: Maybe<String[] | String>;
  creditLine_lt?: Maybe<String>;
  creditLine_lte?: Maybe<String>;
  creditLine_gt?: Maybe<String>;
  creditLine_gte?: Maybe<String>;
  creditLine_contains?: Maybe<String>;
  creditLine_not_contains?: Maybe<String>;
  creditLine_starts_with?: Maybe<String>;
  creditLine_not_starts_with?: Maybe<String>;
  creditLine_ends_with?: Maybe<String>;
  creditLine_not_ends_with?: Maybe<String>;
  dimensionCoreW_mm?: Maybe<Int>;
  dimensionCoreW_mm_not?: Maybe<Int>;
  dimensionCoreW_mm_in?: Maybe<Int[] | Int>;
  dimensionCoreW_mm_not_in?: Maybe<Int[] | Int>;
  dimensionCoreW_mm_lt?: Maybe<Int>;
  dimensionCoreW_mm_lte?: Maybe<Int>;
  dimensionCoreW_mm_gt?: Maybe<Int>;
  dimensionCoreW_mm_gte?: Maybe<Int>;
  dimensionCoreH_mm?: Maybe<Int>;
  dimensionCoreH_mm_not?: Maybe<Int>;
  dimensionCoreH_mm_in?: Maybe<Int[] | Int>;
  dimensionCoreH_mm_not_in?: Maybe<Int[] | Int>;
  dimensionCoreH_mm_lt?: Maybe<Int>;
  dimensionCoreH_mm_lte?: Maybe<Int>;
  dimensionCoreH_mm_gt?: Maybe<Int>;
  dimensionCoreH_mm_gte?: Maybe<Int>;
  dimensionCoreD_mm?: Maybe<Int>;
  dimensionCoreD_mm_not?: Maybe<Int>;
  dimensionCoreD_mm_in?: Maybe<Int[] | Int>;
  dimensionCoreD_mm_not_in?: Maybe<Int[] | Int>;
  dimensionCoreD_mm_lt?: Maybe<Int>;
  dimensionCoreD_mm_lte?: Maybe<Int>;
  dimensionCoreD_mm_gt?: Maybe<Int>;
  dimensionCoreD_mm_gte?: Maybe<Int>;
  dimensionCoreWHD_in?: Maybe<String>;
  dimensionCoreWHD_in_not?: Maybe<String>;
  dimensionCoreWHD_in_in?: Maybe<String[] | String>;
  dimensionCoreWHD_in_not_in?: Maybe<String[] | String>;
  dimensionCoreWHD_in_lt?: Maybe<String>;
  dimensionCoreWHD_in_lte?: Maybe<String>;
  dimensionCoreWHD_in_gt?: Maybe<String>;
  dimensionCoreWHD_in_gte?: Maybe<String>;
  dimensionCoreWHD_in_contains?: Maybe<String>;
  dimensionCoreWHD_in_not_contains?: Maybe<String>;
  dimensionCoreWHD_in_starts_with?: Maybe<String>;
  dimensionCoreWHD_in_not_starts_with?: Maybe<String>;
  dimensionCoreWHD_in_ends_with?: Maybe<String>;
  dimensionCoreWHD_in_not_ends_with?: Maybe<String>;
  dimensionFramedW_mm?: Maybe<Int>;
  dimensionFramedW_mm_not?: Maybe<Int>;
  dimensionFramedW_mm_in?: Maybe<Int[] | Int>;
  dimensionFramedW_mm_not_in?: Maybe<Int[] | Int>;
  dimensionFramedW_mm_lt?: Maybe<Int>;
  dimensionFramedW_mm_lte?: Maybe<Int>;
  dimensionFramedW_mm_gt?: Maybe<Int>;
  dimensionFramedW_mm_gte?: Maybe<Int>;
  dimensionFramedH_mm?: Maybe<Int>;
  dimensionFramedH_mm_not?: Maybe<Int>;
  dimensionFramedH_mm_in?: Maybe<Int[] | Int>;
  dimensionFramedH_mm_not_in?: Maybe<Int[] | Int>;
  dimensionFramedH_mm_lt?: Maybe<Int>;
  dimensionFramedH_mm_lte?: Maybe<Int>;
  dimensionFramedH_mm_gt?: Maybe<Int>;
  dimensionFramedH_mm_gte?: Maybe<Int>;
  dimensionFramedD_mm?: Maybe<Int>;
  dimensionFramedD_mm_not?: Maybe<Int>;
  dimensionFramedD_mm_in?: Maybe<Int[] | Int>;
  dimensionFramedD_mm_not_in?: Maybe<Int[] | Int>;
  dimensionFramedD_mm_lt?: Maybe<Int>;
  dimensionFramedD_mm_lte?: Maybe<Int>;
  dimensionFramedD_mm_gt?: Maybe<Int>;
  dimensionFramedD_mm_gte?: Maybe<Int>;
  dimensionFramedWHD_in?: Maybe<String>;
  dimensionFramedWHD_in_not?: Maybe<String>;
  dimensionFramedWHD_in_in?: Maybe<String[] | String>;
  dimensionFramedWHD_in_not_in?: Maybe<String[] | String>;
  dimensionFramedWHD_in_lt?: Maybe<String>;
  dimensionFramedWHD_in_lte?: Maybe<String>;
  dimensionFramedWHD_in_gt?: Maybe<String>;
  dimensionFramedWHD_in_gte?: Maybe<String>;
  dimensionFramedWHD_in_contains?: Maybe<String>;
  dimensionFramedWHD_in_not_contains?: Maybe<String>;
  dimensionFramedWHD_in_starts_with?: Maybe<String>;
  dimensionFramedWHD_in_not_starts_with?: Maybe<String>;
  dimensionFramedWHD_in_ends_with?: Maybe<String>;
  dimensionFramedWHD_in_not_ends_with?: Maybe<String>;
  signature?: Maybe<String>;
  signature_not?: Maybe<String>;
  signature_in?: Maybe<String[] | String>;
  signature_not_in?: Maybe<String[] | String>;
  signature_lt?: Maybe<String>;
  signature_lte?: Maybe<String>;
  signature_gt?: Maybe<String>;
  signature_gte?: Maybe<String>;
  signature_contains?: Maybe<String>;
  signature_not_contains?: Maybe<String>;
  signature_starts_with?: Maybe<String>;
  signature_not_starts_with?: Maybe<String>;
  signature_ends_with?: Maybe<String>;
  signature_not_ends_with?: Maybe<String>;
  onviewAt?: Maybe<String>;
  onviewAt_not?: Maybe<String>;
  onviewAt_in?: Maybe<String[] | String>;
  onviewAt_not_in?: Maybe<String[] | String>;
  onviewAt_lt?: Maybe<String>;
  onviewAt_lte?: Maybe<String>;
  onviewAt_gt?: Maybe<String>;
  onviewAt_gte?: Maybe<String>;
  onviewAt_contains?: Maybe<String>;
  onviewAt_not_contains?: Maybe<String>;
  onviewAt_starts_with?: Maybe<String>;
  onviewAt_not_starts_with?: Maybe<String>;
  onviewAt_ends_with?: Maybe<String>;
  onviewAt_not_ends_with?: Maybe<String>;
  otherDescription?: Maybe<String>;
  otherDescription_not?: Maybe<String>;
  otherDescription_in?: Maybe<String[] | String>;
  otherDescription_not_in?: Maybe<String[] | String>;
  otherDescription_lt?: Maybe<String>;
  otherDescription_lte?: Maybe<String>;
  otherDescription_gt?: Maybe<String>;
  otherDescription_gte?: Maybe<String>;
  otherDescription_contains?: Maybe<String>;
  otherDescription_not_contains?: Maybe<String>;
  otherDescription_starts_with?: Maybe<String>;
  otherDescription_not_starts_with?: Maybe<String>;
  otherDescription_ends_with?: Maybe<String>;
  otherDescription_not_ends_with?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxName_not?: Maybe<String>;
  imageMaxName_in?: Maybe<String[] | String>;
  imageMaxName_not_in?: Maybe<String[] | String>;
  imageMaxName_lt?: Maybe<String>;
  imageMaxName_lte?: Maybe<String>;
  imageMaxName_gt?: Maybe<String>;
  imageMaxName_gte?: Maybe<String>;
  imageMaxName_contains?: Maybe<String>;
  imageMaxName_not_contains?: Maybe<String>;
  imageMaxName_starts_with?: Maybe<String>;
  imageMaxName_not_starts_with?: Maybe<String>;
  imageMaxName_ends_with?: Maybe<String>;
  imageMaxName_not_ends_with?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxWidth_not?: Maybe<Int>;
  imageMaxWidth_in?: Maybe<Int[] | Int>;
  imageMaxWidth_not_in?: Maybe<Int[] | Int>;
  imageMaxWidth_lt?: Maybe<Int>;
  imageMaxWidth_lte?: Maybe<Int>;
  imageMaxWidth_gt?: Maybe<Int>;
  imageMaxWidth_gte?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageMaxHeight_not?: Maybe<Int>;
  imageMaxHeight_in?: Maybe<Int[] | Int>;
  imageMaxHeight_not_in?: Maybe<Int[] | Int>;
  imageMaxHeight_lt?: Maybe<Int>;
  imageMaxHeight_lte?: Maybe<Int>;
  imageMaxHeight_gt?: Maybe<Int>;
  imageMaxHeight_gte?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptName_not?: Maybe<String>;
  imageOptName_in?: Maybe<String[] | String>;
  imageOptName_not_in?: Maybe<String[] | String>;
  imageOptName_lt?: Maybe<String>;
  imageOptName_lte?: Maybe<String>;
  imageOptName_gt?: Maybe<String>;
  imageOptName_gte?: Maybe<String>;
  imageOptName_contains?: Maybe<String>;
  imageOptName_not_contains?: Maybe<String>;
  imageOptName_starts_with?: Maybe<String>;
  imageOptName_not_starts_with?: Maybe<String>;
  imageOptName_ends_with?: Maybe<String>;
  imageOptName_not_ends_with?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptWidth_not?: Maybe<Int>;
  imageOptWidth_in?: Maybe<Int[] | Int>;
  imageOptWidth_not_in?: Maybe<Int[] | Int>;
  imageOptWidth_lt?: Maybe<Int>;
  imageOptWidth_lte?: Maybe<Int>;
  imageOptWidth_gt?: Maybe<Int>;
  imageOptWidth_gte?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageOptHeight_not?: Maybe<Int>;
  imageOptHeight_in?: Maybe<Int[] | Int>;
  imageOptHeight_not_in?: Maybe<Int[] | Int>;
  imageOptHeight_lt?: Maybe<Int>;
  imageOptHeight_lte?: Maybe<Int>;
  imageOptHeight_gt?: Maybe<Int>;
  imageOptHeight_gte?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmName_not?: Maybe<String>;
  imageThmName_in?: Maybe<String[] | String>;
  imageThmName_not_in?: Maybe<String[] | String>;
  imageThmName_lt?: Maybe<String>;
  imageThmName_lte?: Maybe<String>;
  imageThmName_gt?: Maybe<String>;
  imageThmName_gte?: Maybe<String>;
  imageThmName_contains?: Maybe<String>;
  imageThmName_not_contains?: Maybe<String>;
  imageThmName_starts_with?: Maybe<String>;
  imageThmName_not_starts_with?: Maybe<String>;
  imageThmName_ends_with?: Maybe<String>;
  imageThmName_not_ends_with?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmWidth_not?: Maybe<Int>;
  imageThmWidth_in?: Maybe<Int[] | Int>;
  imageThmWidth_not_in?: Maybe<Int[] | Int>;
  imageThmWidth_lt?: Maybe<Int>;
  imageThmWidth_lte?: Maybe<Int>;
  imageThmWidth_gt?: Maybe<Int>;
  imageThmWidth_gte?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
  imageThmHeight_not?: Maybe<Int>;
  imageThmHeight_in?: Maybe<Int[] | Int>;
  imageThmHeight_not_in?: Maybe<Int[] | Int>;
  imageThmHeight_lt?: Maybe<Int>;
  imageThmHeight_lte?: Maybe<Int>;
  imageThmHeight_gt?: Maybe<Int>;
  imageThmHeight_gte?: Maybe<Int>;
  AND?: Maybe<ArtworkScalarWhereInput[] | ArtworkScalarWhereInput>;
  OR?: Maybe<ArtworkScalarWhereInput[] | ArtworkScalarWhereInput>;
  NOT?: Maybe<ArtworkScalarWhereInput[] | ArtworkScalarWhereInput>;
}

export interface ArtworkUpdateManyWithWhereNestedInput {
  where: ArtworkScalarWhereInput;
  data: ArtworkUpdateManyDataInput;
}

export interface ArtworkUpdateManyDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  notableWork?: Maybe<Boolean>;
  artworkLocationURL?: Maybe<String>;
  fileName?: Maybe<String>;
  workName?: Maybe<String>;
  workName_english?: Maybe<String>;
  workName_ascii?: Maybe<String>;
  dateCompleted?: Maybe<String>;
  dateCompletedAccuracy?: Maybe<String>;
  type?: Maybe<String>;
  genre?: Maybe<String>;
  medium?: Maybe<String>;
  mediumSupport?: Maybe<String>;
  description?: Maybe<String>;
  descriptionSource?: Maybe<String>;
  accession?: Maybe<String>;
  creditLine?: Maybe<String>;
  dimensionCoreW_mm?: Maybe<Int>;
  dimensionCoreH_mm?: Maybe<Int>;
  dimensionCoreD_mm?: Maybe<Int>;
  dimensionCoreWHD_in?: Maybe<String>;
  dimensionFramedW_mm?: Maybe<Int>;
  dimensionFramedH_mm?: Maybe<Int>;
  dimensionFramedD_mm?: Maybe<Int>;
  dimensionFramedWHD_in?: Maybe<String>;
  signature?: Maybe<String>;
  onviewAt?: Maybe<String>;
  otherDescription?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
}

export interface ArtworkLocationUpsertWithWhereUniqueWithoutOwnerInput {
  where: ArtworkLocationWhereUniqueInput;
  update: ArtworkLocationUpdateWithoutOwnerDataInput;
  create: ArtworkLocationCreateWithoutOwnerInput;
}

export interface ArtworkLocationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  easyId?: Maybe<String>;
  easyId_not?: Maybe<String>;
  easyId_in?: Maybe<String[] | String>;
  easyId_not_in?: Maybe<String[] | String>;
  easyId_lt?: Maybe<String>;
  easyId_lte?: Maybe<String>;
  easyId_gt?: Maybe<String>;
  easyId_gte?: Maybe<String>;
  easyId_contains?: Maybe<String>;
  easyId_not_contains?: Maybe<String>;
  easyId_starts_with?: Maybe<String>;
  easyId_not_starts_with?: Maybe<String>;
  easyId_ends_with?: Maybe<String>;
  easyId_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deletedAt?: Maybe<DateTimeInput>;
  deletedAt_not?: Maybe<DateTimeInput>;
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_lt?: Maybe<DateTimeInput>;
  deletedAt_lte?: Maybe<DateTimeInput>;
  deletedAt_gt?: Maybe<DateTimeInput>;
  deletedAt_gte?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPage_not?: Maybe<String>;
  wikiPage_in?: Maybe<String[] | String>;
  wikiPage_not_in?: Maybe<String[] | String>;
  wikiPage_lt?: Maybe<String>;
  wikiPage_lte?: Maybe<String>;
  wikiPage_gt?: Maybe<String>;
  wikiPage_gte?: Maybe<String>;
  wikiPage_contains?: Maybe<String>;
  wikiPage_not_contains?: Maybe<String>;
  wikiPage_starts_with?: Maybe<String>;
  wikiPage_not_starts_with?: Maybe<String>;
  wikiPage_ends_with?: Maybe<String>;
  wikiPage_not_ends_with?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  wikiPhoto_not?: Maybe<String>;
  wikiPhoto_in?: Maybe<String[] | String>;
  wikiPhoto_not_in?: Maybe<String[] | String>;
  wikiPhoto_lt?: Maybe<String>;
  wikiPhoto_lte?: Maybe<String>;
  wikiPhoto_gt?: Maybe<String>;
  wikiPhoto_gte?: Maybe<String>;
  wikiPhoto_contains?: Maybe<String>;
  wikiPhoto_not_contains?: Maybe<String>;
  wikiPhoto_starts_with?: Maybe<String>;
  wikiPhoto_not_starts_with?: Maybe<String>;
  wikiPhoto_ends_with?: Maybe<String>;
  wikiPhoto_not_ends_with?: Maybe<String>;
  imageLink?: Maybe<String>;
  imageLink_not?: Maybe<String>;
  imageLink_in?: Maybe<String[] | String>;
  imageLink_not_in?: Maybe<String[] | String>;
  imageLink_lt?: Maybe<String>;
  imageLink_lte?: Maybe<String>;
  imageLink_gt?: Maybe<String>;
  imageLink_gte?: Maybe<String>;
  imageLink_contains?: Maybe<String>;
  imageLink_not_contains?: Maybe<String>;
  imageLink_starts_with?: Maybe<String>;
  imageLink_not_starts_with?: Maybe<String>;
  imageLink_ends_with?: Maybe<String>;
  imageLink_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  nickname?: Maybe<String>;
  nickname_not?: Maybe<String>;
  nickname_in?: Maybe<String[] | String>;
  nickname_not_in?: Maybe<String[] | String>;
  nickname_lt?: Maybe<String>;
  nickname_lte?: Maybe<String>;
  nickname_gt?: Maybe<String>;
  nickname_gte?: Maybe<String>;
  nickname_contains?: Maybe<String>;
  nickname_not_contains?: Maybe<String>;
  nickname_starts_with?: Maybe<String>;
  nickname_not_starts_with?: Maybe<String>;
  nickname_ends_with?: Maybe<String>;
  nickname_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  dateFirstOpened?: Maybe<String>;
  dateFirstOpened_not?: Maybe<String>;
  dateFirstOpened_in?: Maybe<String[] | String>;
  dateFirstOpened_not_in?: Maybe<String[] | String>;
  dateFirstOpened_lt?: Maybe<String>;
  dateFirstOpened_lte?: Maybe<String>;
  dateFirstOpened_gt?: Maybe<String>;
  dateFirstOpened_gte?: Maybe<String>;
  dateFirstOpened_contains?: Maybe<String>;
  dateFirstOpened_not_contains?: Maybe<String>;
  dateFirstOpened_starts_with?: Maybe<String>;
  dateFirstOpened_not_starts_with?: Maybe<String>;
  dateFirstOpened_ends_with?: Maybe<String>;
  dateFirstOpened_not_ends_with?: Maybe<String>;
  streetAddress?: Maybe<String>;
  streetAddress_not?: Maybe<String>;
  streetAddress_in?: Maybe<String[] | String>;
  streetAddress_not_in?: Maybe<String[] | String>;
  streetAddress_lt?: Maybe<String>;
  streetAddress_lte?: Maybe<String>;
  streetAddress_gt?: Maybe<String>;
  streetAddress_gte?: Maybe<String>;
  streetAddress_contains?: Maybe<String>;
  streetAddress_not_contains?: Maybe<String>;
  streetAddress_starts_with?: Maybe<String>;
  streetAddress_not_starts_with?: Maybe<String>;
  streetAddress_ends_with?: Maybe<String>;
  streetAddress_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  postalCode?: Maybe<String>;
  postalCode_not?: Maybe<String>;
  postalCode_in?: Maybe<String[] | String>;
  postalCode_not_in?: Maybe<String[] | String>;
  postalCode_lt?: Maybe<String>;
  postalCode_lte?: Maybe<String>;
  postalCode_gt?: Maybe<String>;
  postalCode_gte?: Maybe<String>;
  postalCode_contains?: Maybe<String>;
  postalCode_not_contains?: Maybe<String>;
  postalCode_starts_with?: Maybe<String>;
  postalCode_not_starts_with?: Maybe<String>;
  postalCode_ends_with?: Maybe<String>;
  postalCode_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  coorE?: Maybe<Int>;
  coorE_not?: Maybe<Int>;
  coorE_in?: Maybe<Int[] | Int>;
  coorE_not_in?: Maybe<Int[] | Int>;
  coorE_lt?: Maybe<Int>;
  coorE_lte?: Maybe<Int>;
  coorE_gt?: Maybe<Int>;
  coorE_gte?: Maybe<Int>;
  coorN?: Maybe<Int>;
  coorN_not?: Maybe<Int>;
  coorN_in?: Maybe<Int[] | Int>;
  coorN_not_in?: Maybe<Int[] | Int>;
  coorN_lt?: Maybe<Int>;
  coorN_lte?: Maybe<Int>;
  coorN_gt?: Maybe<Int>;
  coorN_gte?: Maybe<Int>;
  website?: Maybe<String>;
  website_not?: Maybe<String>;
  website_in?: Maybe<String[] | String>;
  website_not_in?: Maybe<String[] | String>;
  website_lt?: Maybe<String>;
  website_lte?: Maybe<String>;
  website_gt?: Maybe<String>;
  website_gte?: Maybe<String>;
  website_contains?: Maybe<String>;
  website_not_contains?: Maybe<String>;
  website_starts_with?: Maybe<String>;
  website_not_starts_with?: Maybe<String>;
  website_ends_with?: Maybe<String>;
  website_not_ends_with?: Maybe<String>;
  isMuseum?: Maybe<Boolean>;
  isMuseum_not?: Maybe<Boolean>;
  imageMaxName?: Maybe<String>;
  imageMaxName_not?: Maybe<String>;
  imageMaxName_in?: Maybe<String[] | String>;
  imageMaxName_not_in?: Maybe<String[] | String>;
  imageMaxName_lt?: Maybe<String>;
  imageMaxName_lte?: Maybe<String>;
  imageMaxName_gt?: Maybe<String>;
  imageMaxName_gte?: Maybe<String>;
  imageMaxName_contains?: Maybe<String>;
  imageMaxName_not_contains?: Maybe<String>;
  imageMaxName_starts_with?: Maybe<String>;
  imageMaxName_not_starts_with?: Maybe<String>;
  imageMaxName_ends_with?: Maybe<String>;
  imageMaxName_not_ends_with?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxWidth_not?: Maybe<Int>;
  imageMaxWidth_in?: Maybe<Int[] | Int>;
  imageMaxWidth_not_in?: Maybe<Int[] | Int>;
  imageMaxWidth_lt?: Maybe<Int>;
  imageMaxWidth_lte?: Maybe<Int>;
  imageMaxWidth_gt?: Maybe<Int>;
  imageMaxWidth_gte?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageMaxHeight_not?: Maybe<Int>;
  imageMaxHeight_in?: Maybe<Int[] | Int>;
  imageMaxHeight_not_in?: Maybe<Int[] | Int>;
  imageMaxHeight_lt?: Maybe<Int>;
  imageMaxHeight_lte?: Maybe<Int>;
  imageMaxHeight_gt?: Maybe<Int>;
  imageMaxHeight_gte?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptName_not?: Maybe<String>;
  imageOptName_in?: Maybe<String[] | String>;
  imageOptName_not_in?: Maybe<String[] | String>;
  imageOptName_lt?: Maybe<String>;
  imageOptName_lte?: Maybe<String>;
  imageOptName_gt?: Maybe<String>;
  imageOptName_gte?: Maybe<String>;
  imageOptName_contains?: Maybe<String>;
  imageOptName_not_contains?: Maybe<String>;
  imageOptName_starts_with?: Maybe<String>;
  imageOptName_not_starts_with?: Maybe<String>;
  imageOptName_ends_with?: Maybe<String>;
  imageOptName_not_ends_with?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptWidth_not?: Maybe<Int>;
  imageOptWidth_in?: Maybe<Int[] | Int>;
  imageOptWidth_not_in?: Maybe<Int[] | Int>;
  imageOptWidth_lt?: Maybe<Int>;
  imageOptWidth_lte?: Maybe<Int>;
  imageOptWidth_gt?: Maybe<Int>;
  imageOptWidth_gte?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageOptHeight_not?: Maybe<Int>;
  imageOptHeight_in?: Maybe<Int[] | Int>;
  imageOptHeight_not_in?: Maybe<Int[] | Int>;
  imageOptHeight_lt?: Maybe<Int>;
  imageOptHeight_lte?: Maybe<Int>;
  imageOptHeight_gt?: Maybe<Int>;
  imageOptHeight_gte?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmName_not?: Maybe<String>;
  imageThmName_in?: Maybe<String[] | String>;
  imageThmName_not_in?: Maybe<String[] | String>;
  imageThmName_lt?: Maybe<String>;
  imageThmName_lte?: Maybe<String>;
  imageThmName_gt?: Maybe<String>;
  imageThmName_gte?: Maybe<String>;
  imageThmName_contains?: Maybe<String>;
  imageThmName_not_contains?: Maybe<String>;
  imageThmName_starts_with?: Maybe<String>;
  imageThmName_not_starts_with?: Maybe<String>;
  imageThmName_ends_with?: Maybe<String>;
  imageThmName_not_ends_with?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmWidth_not?: Maybe<Int>;
  imageThmWidth_in?: Maybe<Int[] | Int>;
  imageThmWidth_not_in?: Maybe<Int[] | Int>;
  imageThmWidth_lt?: Maybe<Int>;
  imageThmWidth_lte?: Maybe<Int>;
  imageThmWidth_gt?: Maybe<Int>;
  imageThmWidth_gte?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
  imageThmHeight_not?: Maybe<Int>;
  imageThmHeight_in?: Maybe<Int[] | Int>;
  imageThmHeight_not_in?: Maybe<Int[] | Int>;
  imageThmHeight_lt?: Maybe<Int>;
  imageThmHeight_lte?: Maybe<Int>;
  imageThmHeight_gt?: Maybe<Int>;
  imageThmHeight_gte?: Maybe<Int>;
  AND?: Maybe<
    ArtworkLocationScalarWhereInput[] | ArtworkLocationScalarWhereInput
  >;
  OR?: Maybe<
    ArtworkLocationScalarWhereInput[] | ArtworkLocationScalarWhereInput
  >;
  NOT?: Maybe<
    ArtworkLocationScalarWhereInput[] | ArtworkLocationScalarWhereInput
  >;
}

export interface ArtworkLocationUpdateManyWithWhereNestedInput {
  where: ArtworkLocationScalarWhereInput;
  data: ArtworkLocationUpdateManyDataInput;
}

export interface ArtworkLocationUpdateManyDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  name?: Maybe<String>;
  nickname?: Maybe<String>;
  description?: Maybe<String>;
  dateFirstOpened?: Maybe<String>;
  streetAddress?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  postalCode?: Maybe<String>;
  country?: Maybe<String>;
  coorE?: Maybe<Int>;
  coorN?: Maybe<Int>;
  website?: Maybe<String>;
  isMuseum?: Maybe<Boolean>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
}

export interface UserUpsertWithoutAuctionArtworkBuyerInput {
  update: UserUpdateWithoutAuctionArtworkBuyerDataInput;
  create: UserCreateWithoutAuctionArtworkBuyerInput;
}

export interface AuctionArtworkUpsertWithWhereUniqueWithoutSellerInput {
  where: AuctionArtworkWhereUniqueInput;
  update: AuctionArtworkUpdateWithoutSellerDataInput;
  create: AuctionArtworkCreateWithoutSellerInput;
}

export interface UserUpsertWithoutArtworkLocationRecordsInput {
  update: UserUpdateWithoutArtworkLocationRecordsDataInput;
  create: UserCreateWithoutArtworkLocationRecordsInput;
}

export interface ArtworkLocationUpsertWithWhereUniqueWithoutArtistsInput {
  where: ArtworkLocationWhereUniqueInput;
  update: ArtworkLocationUpdateWithoutArtistsDataInput;
  create: ArtworkLocationCreateWithoutArtistsInput;
}

export interface ArtistUpsertWithoutArtworksInput {
  update: ArtistUpdateWithoutArtworksDataInput;
  create: ArtistCreateWithoutArtworksInput;
}

export interface ArtworkUpsertWithWhereUniqueWithoutOwnerInput {
  where: ArtworkWhereUniqueInput;
  update: ArtworkUpdateWithoutOwnerDataInput;
  create: ArtworkCreateWithoutOwnerInput;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput;
  create: PostCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutOwnerInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutOwnerDataInput;
  create: CommentCreateWithoutOwnerInput;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  easyId?: Maybe<String>;
  easyId_not?: Maybe<String>;
  easyId_in?: Maybe<String[] | String>;
  easyId_not_in?: Maybe<String[] | String>;
  easyId_lt?: Maybe<String>;
  easyId_lte?: Maybe<String>;
  easyId_gt?: Maybe<String>;
  easyId_gte?: Maybe<String>;
  easyId_contains?: Maybe<String>;
  easyId_not_contains?: Maybe<String>;
  easyId_starts_with?: Maybe<String>;
  easyId_not_starts_with?: Maybe<String>;
  easyId_ends_with?: Maybe<String>;
  easyId_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deletedAt?: Maybe<DateTimeInput>;
  deletedAt_not?: Maybe<DateTimeInput>;
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_lt?: Maybe<DateTimeInput>;
  deletedAt_lte?: Maybe<DateTimeInput>;
  deletedAt_gt?: Maybe<DateTimeInput>;
  deletedAt_gte?: Maybe<DateTimeInput>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  text_lcase?: Maybe<String>;
  text_lcase_not?: Maybe<String>;
  text_lcase_in?: Maybe<String[] | String>;
  text_lcase_not_in?: Maybe<String[] | String>;
  text_lcase_lt?: Maybe<String>;
  text_lcase_lte?: Maybe<String>;
  text_lcase_gt?: Maybe<String>;
  text_lcase_gte?: Maybe<String>;
  text_lcase_contains?: Maybe<String>;
  text_lcase_not_contains?: Maybe<String>;
  text_lcase_starts_with?: Maybe<String>;
  text_lcase_not_starts_with?: Maybe<String>;
  text_lcase_ends_with?: Maybe<String>;
  text_lcase_not_ends_with?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  text?: Maybe<String>;
  text_lcase?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
}

export interface UserUpsertWithoutArtworkRecordsInput {
  update: UserUpdateWithoutArtworkRecordsDataInput;
  create: UserCreateWithoutArtworkRecordsInput;
}

export interface ArtworkUpsertWithWhereUniqueWithoutArtistInput {
  where: ArtworkWhereUniqueInput;
  update: ArtworkUpdateWithoutArtistDataInput;
  create: ArtworkCreateWithoutArtistInput;
}

export interface ArtistUpsertWithWhereUniqueWithoutOwnerInput {
  where: ArtistWhereUniqueInput;
  update: ArtistUpdateWithoutOwnerDataInput;
  create: ArtistCreateWithoutOwnerInput;
}

export interface UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput;
  create: UserCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutPostDataInput;
  create: CommentCreateWithoutPostInput;
}

export interface PostUpsertWithWhereUniqueWithoutOwnerInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutOwnerDataInput;
  create: PostCreateWithoutOwnerInput;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  easyId?: Maybe<String>;
  easyId_not?: Maybe<String>;
  easyId_in?: Maybe<String[] | String>;
  easyId_not_in?: Maybe<String[] | String>;
  easyId_lt?: Maybe<String>;
  easyId_lte?: Maybe<String>;
  easyId_gt?: Maybe<String>;
  easyId_gte?: Maybe<String>;
  easyId_contains?: Maybe<String>;
  easyId_not_contains?: Maybe<String>;
  easyId_starts_with?: Maybe<String>;
  easyId_not_starts_with?: Maybe<String>;
  easyId_ends_with?: Maybe<String>;
  easyId_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deletedAt?: Maybe<DateTimeInput>;
  deletedAt_not?: Maybe<DateTimeInput>;
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_lt?: Maybe<DateTimeInput>;
  deletedAt_lte?: Maybe<DateTimeInput>;
  deletedAt_gt?: Maybe<DateTimeInput>;
  deletedAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  title_lcase?: Maybe<String>;
  title_lcase_not?: Maybe<String>;
  title_lcase_in?: Maybe<String[] | String>;
  title_lcase_not_in?: Maybe<String[] | String>;
  title_lcase_lt?: Maybe<String>;
  title_lcase_lte?: Maybe<String>;
  title_lcase_gt?: Maybe<String>;
  title_lcase_gte?: Maybe<String>;
  title_lcase_contains?: Maybe<String>;
  title_lcase_not_contains?: Maybe<String>;
  title_lcase_starts_with?: Maybe<String>;
  title_lcase_not_starts_with?: Maybe<String>;
  title_lcase_ends_with?: Maybe<String>;
  title_lcase_not_ends_with?: Maybe<String>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  body_lcase?: Maybe<String>;
  body_lcase_not?: Maybe<String>;
  body_lcase_in?: Maybe<String[] | String>;
  body_lcase_not_in?: Maybe<String[] | String>;
  body_lcase_lt?: Maybe<String>;
  body_lcase_lte?: Maybe<String>;
  body_lcase_gt?: Maybe<String>;
  body_lcase_gte?: Maybe<String>;
  body_lcase_contains?: Maybe<String>;
  body_lcase_not_contains?: Maybe<String>;
  body_lcase_starts_with?: Maybe<String>;
  body_lcase_not_starts_with?: Maybe<String>;
  body_lcase_ends_with?: Maybe<String>;
  body_lcase_not_ends_with?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_lcase?: Maybe<String>;
  body?: Maybe<String>;
  body_lcase?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
}

export interface UserUpsertWithoutArtistRecordsInput {
  update: UserUpdateWithoutArtistRecordsDataInput;
  create: UserCreateWithoutArtistRecordsInput;
}

export interface ArtistUpdateManyMutationInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  birthName?: Maybe<String>;
  commonName?: Maybe<String>;
  dateOfBirth?: Maybe<String>;
  dateOfBirthAccuracy?: Maybe<String>;
  dateOfDeath?: Maybe<String>;
  dateOfDeathAccuracy?: Maybe<String>;
  nationality?: Maybe<String>;
  knownFor?: Maybe<String>;
  movements?: Maybe<String>;
  gender?: Maybe<String>;
  deceased?: Maybe<Boolean>;
  birthCountry?: Maybe<String>;
  birthLocation?: Maybe<String>;
  birthLocationDetails?: Maybe<String>;
  deathCountry?: Maybe<String>;
  deathLocation?: Maybe<String>;
  deathLocationDetails?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
}

export interface ArtworkCreateInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  owner: UserCreateOneWithoutArtworkRecordsInput;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  artist: ArtistCreateOneWithoutArtworksInput;
  notableWork?: Maybe<Boolean>;
  artworkLocation: ArtworkLocationCreateOneWithoutArtworksInput;
  artworkLocationURL?: Maybe<String>;
  fileName?: Maybe<String>;
  workName?: Maybe<String>;
  workName_english?: Maybe<String>;
  workName_ascii?: Maybe<String>;
  dateCompleted?: Maybe<String>;
  dateCompletedAccuracy?: Maybe<String>;
  type?: Maybe<String>;
  genre?: Maybe<String>;
  medium?: Maybe<String>;
  mediumSupport?: Maybe<String>;
  description?: Maybe<String>;
  descriptionSource?: Maybe<String>;
  accession?: Maybe<String>;
  creditLine?: Maybe<String>;
  dimensionCoreW_mm?: Maybe<Int>;
  dimensionCoreH_mm?: Maybe<Int>;
  dimensionCoreD_mm?: Maybe<Int>;
  dimensionCoreWHD_in?: Maybe<String>;
  dimensionFramedW_mm?: Maybe<Int>;
  dimensionFramedH_mm?: Maybe<Int>;
  dimensionFramedD_mm?: Maybe<Int>;
  dimensionFramedWHD_in?: Maybe<String>;
  signature?: Maybe<String>;
  onviewAt?: Maybe<String>;
  otherDescription?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
  auctions?: Maybe<AuctionArtworkCreateManyWithoutArtworkInput>;
}

export interface ArtworkUpdateInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  owner?: Maybe<UserUpdateOneRequiredWithoutArtworkRecordsInput>;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  artist?: Maybe<ArtistUpdateOneRequiredWithoutArtworksInput>;
  notableWork?: Maybe<Boolean>;
  artworkLocation?: Maybe<ArtworkLocationUpdateOneRequiredWithoutArtworksInput>;
  artworkLocationURL?: Maybe<String>;
  fileName?: Maybe<String>;
  workName?: Maybe<String>;
  workName_english?: Maybe<String>;
  workName_ascii?: Maybe<String>;
  dateCompleted?: Maybe<String>;
  dateCompletedAccuracy?: Maybe<String>;
  type?: Maybe<String>;
  genre?: Maybe<String>;
  medium?: Maybe<String>;
  mediumSupport?: Maybe<String>;
  description?: Maybe<String>;
  descriptionSource?: Maybe<String>;
  accession?: Maybe<String>;
  creditLine?: Maybe<String>;
  dimensionCoreW_mm?: Maybe<Int>;
  dimensionCoreH_mm?: Maybe<Int>;
  dimensionCoreD_mm?: Maybe<Int>;
  dimensionCoreWHD_in?: Maybe<String>;
  dimensionFramedW_mm?: Maybe<Int>;
  dimensionFramedH_mm?: Maybe<Int>;
  dimensionFramedD_mm?: Maybe<Int>;
  dimensionFramedWHD_in?: Maybe<String>;
  signature?: Maybe<String>;
  onviewAt?: Maybe<String>;
  otherDescription?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
  auctions?: Maybe<AuctionArtworkUpdateManyWithoutArtworkInput>;
}

export interface ArtworkUpdateManyMutationInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  notableWork?: Maybe<Boolean>;
  artworkLocationURL?: Maybe<String>;
  fileName?: Maybe<String>;
  workName?: Maybe<String>;
  workName_english?: Maybe<String>;
  workName_ascii?: Maybe<String>;
  dateCompleted?: Maybe<String>;
  dateCompletedAccuracy?: Maybe<String>;
  type?: Maybe<String>;
  genre?: Maybe<String>;
  medium?: Maybe<String>;
  mediumSupport?: Maybe<String>;
  description?: Maybe<String>;
  descriptionSource?: Maybe<String>;
  accession?: Maybe<String>;
  creditLine?: Maybe<String>;
  dimensionCoreW_mm?: Maybe<Int>;
  dimensionCoreH_mm?: Maybe<Int>;
  dimensionCoreD_mm?: Maybe<Int>;
  dimensionCoreWHD_in?: Maybe<String>;
  dimensionFramedW_mm?: Maybe<Int>;
  dimensionFramedH_mm?: Maybe<Int>;
  dimensionFramedD_mm?: Maybe<Int>;
  dimensionFramedWHD_in?: Maybe<String>;
  signature?: Maybe<String>;
  onviewAt?: Maybe<String>;
  otherDescription?: Maybe<String>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
}

export interface ArtworkLocationCreateInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  owner: UserCreateOneWithoutArtworkLocationRecordsInput;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  name: String;
  nickname?: Maybe<String>;
  description?: Maybe<String>;
  dateFirstOpened?: Maybe<String>;
  streetAddress?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  postalCode?: Maybe<String>;
  country?: Maybe<String>;
  coorE?: Maybe<Int>;
  coorN?: Maybe<Int>;
  website?: Maybe<String>;
  isMuseum?: Maybe<Boolean>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
  artworks?: Maybe<ArtworkCreateManyWithoutArtworkLocationInput>;
  artists?: Maybe<ArtistCreateManyWithoutArtworkLocationsInput>;
}

export interface ArtworkLocationUpdateInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  owner?: Maybe<UserUpdateOneRequiredWithoutArtworkLocationRecordsInput>;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  name?: Maybe<String>;
  nickname?: Maybe<String>;
  description?: Maybe<String>;
  dateFirstOpened?: Maybe<String>;
  streetAddress?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  postalCode?: Maybe<String>;
  country?: Maybe<String>;
  coorE?: Maybe<Int>;
  coorN?: Maybe<Int>;
  website?: Maybe<String>;
  isMuseum?: Maybe<Boolean>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
  artworks?: Maybe<ArtworkUpdateManyWithoutArtworkLocationInput>;
  artists?: Maybe<ArtistUpdateManyWithoutArtworkLocationsInput>;
}

export interface ArtworkLocationUpdateManyMutationInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  wikiPage?: Maybe<String>;
  wikiPhoto?: Maybe<String>;
  imageLink?: Maybe<String>;
  name?: Maybe<String>;
  nickname?: Maybe<String>;
  description?: Maybe<String>;
  dateFirstOpened?: Maybe<String>;
  streetAddress?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  postalCode?: Maybe<String>;
  country?: Maybe<String>;
  coorE?: Maybe<Int>;
  coorN?: Maybe<Int>;
  website?: Maybe<String>;
  isMuseum?: Maybe<Boolean>;
  imageMaxName?: Maybe<String>;
  imageMaxWidth?: Maybe<Int>;
  imageMaxHeight?: Maybe<Int>;
  imageOptName?: Maybe<String>;
  imageOptWidth?: Maybe<Int>;
  imageOptHeight?: Maybe<Int>;
  imageThmName?: Maybe<String>;
  imageThmWidth?: Maybe<Int>;
  imageThmHeight?: Maybe<Int>;
}

export interface AuctionArtworkCreateInput {
  id?: Maybe<ID_Input>;
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  withdrawnDate?: Maybe<DateTimeInput>;
  saleDate?: Maybe<DateTimeInput>;
  refundDate?: Maybe<DateTimeInput>;
  reserve?: Maybe<Int>;
  initialPrice?: Maybe<Int>;
  buyoutPrice?: Maybe<Int>;
  salePrice?: Maybe<Int>;
  artwork: ArtworkCreateOneWithoutAuctionsInput;
  seller: UserCreateOneWithoutAuctionArtworkSellerInput;
  buyer?: Maybe<UserCreateOneWithoutAuctionArtworkBuyerInput>;
  bids?: Maybe<AuctionArtworkBidCreateManyWithoutAuctionInput>;
  watchers?: Maybe<UserCreateManyWithoutAuctionArtworkWatcherInput>;
}

export interface AuctionArtworkUpdateInput {
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  withdrawnDate?: Maybe<DateTimeInput>;
  saleDate?: Maybe<DateTimeInput>;
  refundDate?: Maybe<DateTimeInput>;
  reserve?: Maybe<Int>;
  initialPrice?: Maybe<Int>;
  buyoutPrice?: Maybe<Int>;
  salePrice?: Maybe<Int>;
  artwork?: Maybe<ArtworkUpdateOneRequiredWithoutAuctionsInput>;
  seller?: Maybe<UserUpdateOneRequiredWithoutAuctionArtworkSellerInput>;
  buyer?: Maybe<UserUpdateOneWithoutAuctionArtworkBuyerInput>;
  bids?: Maybe<AuctionArtworkBidUpdateManyWithoutAuctionInput>;
  watchers?: Maybe<UserUpdateManyWithoutAuctionArtworkWatcherInput>;
}

export interface AuctionArtworkUpdateManyMutationInput {
  deletedAt?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  withdrawnDate?: Maybe<DateTimeInput>;
  saleDate?: Maybe<DateTimeInput>;
  refundDate?: Maybe<DateTimeInput>;
  reserve?: Maybe<Int>;
  initialPrice?: Maybe<Int>;
  buyoutPrice?: Maybe<Int>;
  salePrice?: Maybe<Int>;
}

export interface AuctionArtworkBidCreateInput {
  id?: Maybe<ID_Input>;
  deletedAt?: Maybe<DateTimeInput>;
  auction: AuctionArtworkCreateOneWithoutBidsInput;
  bidder?: Maybe<UserCreateOneWithoutAuctionArtworkBidInput>;
  amount?: Maybe<Int>;
}

export interface AuctionArtworkBidUpdateInput {
  deletedAt?: Maybe<DateTimeInput>;
  auction?: Maybe<AuctionArtworkUpdateOneRequiredWithoutBidsInput>;
  bidder?: Maybe<UserUpdateOneWithoutAuctionArtworkBidInput>;
  amount?: Maybe<Int>;
}

export interface AuctionArtworkBidUpdateManyMutationInput {
  deletedAt?: Maybe<DateTimeInput>;
  amount?: Maybe<Int>;
}

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  owner: UserCreateOneWithoutCommentsInput;
  post: PostCreateOneWithoutCommentsInput;
  text: String;
  text_lcase: String;
  isPublished?: Maybe<Boolean>;
}

export interface CommentUpdateInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  owner?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
  post?: Maybe<PostUpdateOneRequiredWithoutCommentsInput>;
  text?: Maybe<String>;
  text_lcase?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
}

export interface CommentUpdateManyMutationInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  text?: Maybe<String>;
  text_lcase?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  owner: UserCreateOneWithoutPostsInput;
  title: String;
  title_lcase: String;
  body: String;
  body_lcase: String;
  isPublished?: Maybe<Boolean>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
}

export interface PostUpdateInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  owner?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  title?: Maybe<String>;
  title_lcase?: Maybe<String>;
  body?: Maybe<String>;
  body_lcase?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
}

export interface PostUpdateManyMutationInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_lcase?: Maybe<String>;
  body?: Maybe<String>;
  body_lcase?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  easyId: String;
  deletedAt?: Maybe<DateTimeInput>;
  name: String;
  name_lcase: String;
  email: String;
  email_lcase: String;
  emailValidated?: Maybe<Boolean>;
  active?: Maybe<Boolean>;
  posts?: Maybe<PostCreateManyWithoutOwnerInput>;
  comments?: Maybe<CommentCreateManyWithoutOwnerInput>;
  artistRecords?: Maybe<ArtistCreateManyWithoutOwnerInput>;
  artworkRecords?: Maybe<ArtworkCreateManyWithoutOwnerInput>;
  artworkLocationRecords?: Maybe<ArtworkLocationCreateManyWithoutOwnerInput>;
  auctionArtworkSeller?: Maybe<AuctionArtworkCreateManyWithoutSellerInput>;
  auctionArtworkBuyer?: Maybe<AuctionArtworkCreateManyWithoutBuyerInput>;
  auctionArtworkWatcher?: Maybe<AuctionArtworkCreateManyWithoutWatchersInput>;
  auctionArtworkBid?: Maybe<AuctionArtworkBidCreateManyWithoutBidderInput>;
  password: String;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserCreatepermissionsInput>;
}

export interface UserUpdateInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_lcase?: Maybe<String>;
  email?: Maybe<String>;
  email_lcase?: Maybe<String>;
  emailValidated?: Maybe<Boolean>;
  active?: Maybe<Boolean>;
  posts?: Maybe<PostUpdateManyWithoutOwnerInput>;
  comments?: Maybe<CommentUpdateManyWithoutOwnerInput>;
  artistRecords?: Maybe<ArtistUpdateManyWithoutOwnerInput>;
  artworkRecords?: Maybe<ArtworkUpdateManyWithoutOwnerInput>;
  artworkLocationRecords?: Maybe<ArtworkLocationUpdateManyWithoutOwnerInput>;
  auctionArtworkSeller?: Maybe<AuctionArtworkUpdateManyWithoutSellerInput>;
  auctionArtworkBuyer?: Maybe<AuctionArtworkUpdateManyWithoutBuyerInput>;
  auctionArtworkWatcher?: Maybe<AuctionArtworkUpdateManyWithoutWatchersInput>;
  auctionArtworkBid?: Maybe<AuctionArtworkBidUpdateManyWithoutBidderInput>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
}

export interface UserUpdateManyMutationInput {
  easyId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_lcase?: Maybe<String>;
  email?: Maybe<String>;
  email_lcase?: Maybe<String>;
  emailValidated?: Maybe<Boolean>;
  active?: Maybe<Boolean>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
}

export interface ArtistSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ArtistWhereInput>;
  AND?: Maybe<ArtistSubscriptionWhereInput[] | ArtistSubscriptionWhereInput>;
  OR?: Maybe<ArtistSubscriptionWhereInput[] | ArtistSubscriptionWhereInput>;
  NOT?: Maybe<ArtistSubscriptionWhereInput[] | ArtistSubscriptionWhereInput>;
}

export interface ArtworkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ArtworkWhereInput>;
  AND?: Maybe<ArtworkSubscriptionWhereInput[] | ArtworkSubscriptionWhereInput>;
  OR?: Maybe<ArtworkSubscriptionWhereInput[] | ArtworkSubscriptionWhereInput>;
  NOT?: Maybe<ArtworkSubscriptionWhereInput[] | ArtworkSubscriptionWhereInput>;
}

export interface ArtworkLocationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ArtworkLocationWhereInput>;
  AND?: Maybe<
    | ArtworkLocationSubscriptionWhereInput[]
    | ArtworkLocationSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ArtworkLocationSubscriptionWhereInput[]
    | ArtworkLocationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ArtworkLocationSubscriptionWhereInput[]
    | ArtworkLocationSubscriptionWhereInput
  >;
}

export interface AuctionArtworkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AuctionArtworkWhereInput>;
  AND?: Maybe<
    | AuctionArtworkSubscriptionWhereInput[]
    | AuctionArtworkSubscriptionWhereInput
  >;
  OR?: Maybe<
    | AuctionArtworkSubscriptionWhereInput[]
    | AuctionArtworkSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | AuctionArtworkSubscriptionWhereInput[]
    | AuctionArtworkSubscriptionWhereInput
  >;
}

export interface AuctionArtworkBidSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AuctionArtworkBidWhereInput>;
  AND?: Maybe<
    | AuctionArtworkBidSubscriptionWhereInput[]
    | AuctionArtworkBidSubscriptionWhereInput
  >;
  OR?: Maybe<
    | AuctionArtworkBidSubscriptionWhereInput[]
    | AuctionArtworkBidSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | AuctionArtworkBidSubscriptionWhereInput[]
    | AuctionArtworkBidSubscriptionWhereInput
  >;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Artist {
  id: ID_Output;
  easyId: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
  isPublished: Boolean;
  wikiPage?: String;
  wikiPhoto?: String;
  imageLink?: String;
  birthName?: String;
  commonName?: String;
  dateOfBirth?: String;
  dateOfBirthAccuracy?: String;
  dateOfDeath?: String;
  dateOfDeathAccuracy?: String;
  nationality?: String;
  knownFor?: String;
  movements?: String;
  gender?: String;
  deceased: Boolean;
  birthCountry?: String;
  birthLocation?: String;
  birthLocationDetails?: String;
  deathCountry?: String;
  deathLocation?: String;
  deathLocationDetails?: String;
  imageMaxName?: String;
  imageMaxWidth?: Int;
  imageMaxHeight?: Int;
  imageOptName?: String;
  imageOptWidth?: Int;
  imageOptHeight?: Int;
  imageThmName?: String;
  imageThmWidth?: Int;
  imageThmHeight?: Int;
}

export interface ArtistPromise extends Promise<Artist>, Fragmentable {
  id: () => Promise<ID_Output>;
  easyId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  isPublished: () => Promise<Boolean>;
  wikiPage: () => Promise<String>;
  wikiPhoto: () => Promise<String>;
  imageLink: () => Promise<String>;
  birthName: () => Promise<String>;
  commonName: () => Promise<String>;
  dateOfBirth: () => Promise<String>;
  dateOfBirthAccuracy: () => Promise<String>;
  dateOfDeath: () => Promise<String>;
  dateOfDeathAccuracy: () => Promise<String>;
  nationality: () => Promise<String>;
  knownFor: () => Promise<String>;
  movements: () => Promise<String>;
  gender: () => Promise<String>;
  artworks: <T = FragmentableArray<Artwork>>(args?: {
    where?: ArtworkWhereInput;
    orderBy?: ArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  artworkLocations: <T = FragmentableArray<ArtworkLocation>>(args?: {
    where?: ArtworkLocationWhereInput;
    orderBy?: ArtworkLocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  deceased: () => Promise<Boolean>;
  birthCountry: () => Promise<String>;
  birthLocation: () => Promise<String>;
  birthLocationDetails: () => Promise<String>;
  deathCountry: () => Promise<String>;
  deathLocation: () => Promise<String>;
  deathLocationDetails: () => Promise<String>;
  imageMaxName: () => Promise<String>;
  imageMaxWidth: () => Promise<Int>;
  imageMaxHeight: () => Promise<Int>;
  imageOptName: () => Promise<String>;
  imageOptWidth: () => Promise<Int>;
  imageOptHeight: () => Promise<Int>;
  imageThmName: () => Promise<String>;
  imageThmWidth: () => Promise<Int>;
  imageThmHeight: () => Promise<Int>;
}

export interface ArtistSubscription
  extends Promise<AsyncIterator<Artist>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  easyId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  owner: <T = UserSubscription>() => T;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  wikiPage: () => Promise<AsyncIterator<String>>;
  wikiPhoto: () => Promise<AsyncIterator<String>>;
  imageLink: () => Promise<AsyncIterator<String>>;
  birthName: () => Promise<AsyncIterator<String>>;
  commonName: () => Promise<AsyncIterator<String>>;
  dateOfBirth: () => Promise<AsyncIterator<String>>;
  dateOfBirthAccuracy: () => Promise<AsyncIterator<String>>;
  dateOfDeath: () => Promise<AsyncIterator<String>>;
  dateOfDeathAccuracy: () => Promise<AsyncIterator<String>>;
  nationality: () => Promise<AsyncIterator<String>>;
  knownFor: () => Promise<AsyncIterator<String>>;
  movements: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  artworks: <T = Promise<AsyncIterator<ArtworkSubscription>>>(args?: {
    where?: ArtworkWhereInput;
    orderBy?: ArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  artworkLocations: <
    T = Promise<AsyncIterator<ArtworkLocationSubscription>>
  >(args?: {
    where?: ArtworkLocationWhereInput;
    orderBy?: ArtworkLocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  deceased: () => Promise<AsyncIterator<Boolean>>;
  birthCountry: () => Promise<AsyncIterator<String>>;
  birthLocation: () => Promise<AsyncIterator<String>>;
  birthLocationDetails: () => Promise<AsyncIterator<String>>;
  deathCountry: () => Promise<AsyncIterator<String>>;
  deathLocation: () => Promise<AsyncIterator<String>>;
  deathLocationDetails: () => Promise<AsyncIterator<String>>;
  imageMaxName: () => Promise<AsyncIterator<String>>;
  imageMaxWidth: () => Promise<AsyncIterator<Int>>;
  imageMaxHeight: () => Promise<AsyncIterator<Int>>;
  imageOptName: () => Promise<AsyncIterator<String>>;
  imageOptWidth: () => Promise<AsyncIterator<Int>>;
  imageOptHeight: () => Promise<AsyncIterator<Int>>;
  imageThmName: () => Promise<AsyncIterator<String>>;
  imageThmWidth: () => Promise<AsyncIterator<Int>>;
  imageThmHeight: () => Promise<AsyncIterator<Int>>;
}

export interface ArtistNullablePromise
  extends Promise<Artist | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  easyId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  isPublished: () => Promise<Boolean>;
  wikiPage: () => Promise<String>;
  wikiPhoto: () => Promise<String>;
  imageLink: () => Promise<String>;
  birthName: () => Promise<String>;
  commonName: () => Promise<String>;
  dateOfBirth: () => Promise<String>;
  dateOfBirthAccuracy: () => Promise<String>;
  dateOfDeath: () => Promise<String>;
  dateOfDeathAccuracy: () => Promise<String>;
  nationality: () => Promise<String>;
  knownFor: () => Promise<String>;
  movements: () => Promise<String>;
  gender: () => Promise<String>;
  artworks: <T = FragmentableArray<Artwork>>(args?: {
    where?: ArtworkWhereInput;
    orderBy?: ArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  artworkLocations: <T = FragmentableArray<ArtworkLocation>>(args?: {
    where?: ArtworkLocationWhereInput;
    orderBy?: ArtworkLocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  deceased: () => Promise<Boolean>;
  birthCountry: () => Promise<String>;
  birthLocation: () => Promise<String>;
  birthLocationDetails: () => Promise<String>;
  deathCountry: () => Promise<String>;
  deathLocation: () => Promise<String>;
  deathLocationDetails: () => Promise<String>;
  imageMaxName: () => Promise<String>;
  imageMaxWidth: () => Promise<Int>;
  imageMaxHeight: () => Promise<Int>;
  imageOptName: () => Promise<String>;
  imageOptWidth: () => Promise<Int>;
  imageOptHeight: () => Promise<Int>;
  imageThmName: () => Promise<String>;
  imageThmWidth: () => Promise<Int>;
  imageThmHeight: () => Promise<Int>;
}

export interface User {
  id: ID_Output;
  easyId: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
  name: String;
  name_lcase: String;
  email: String;
  email_lcase: String;
  emailValidated: Boolean;
  active: Boolean;
  password: String;
  resetToken?: String;
  resetTokenExpiry?: String;
  permissions: PermissionsType[];
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  easyId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  name_lcase: () => Promise<String>;
  email: () => Promise<String>;
  email_lcase: () => Promise<String>;
  emailValidated: () => Promise<Boolean>;
  active: () => Promise<Boolean>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  artistRecords: <T = FragmentableArray<Artist>>(args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  artworkRecords: <T = FragmentableArray<Artwork>>(args?: {
    where?: ArtworkWhereInput;
    orderBy?: ArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  artworkLocationRecords: <T = FragmentableArray<ArtworkLocation>>(args?: {
    where?: ArtworkLocationWhereInput;
    orderBy?: ArtworkLocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  auctionArtworkSeller: <T = FragmentableArray<AuctionArtwork>>(args?: {
    where?: AuctionArtworkWhereInput;
    orderBy?: AuctionArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  auctionArtworkBuyer: <T = FragmentableArray<AuctionArtwork>>(args?: {
    where?: AuctionArtworkWhereInput;
    orderBy?: AuctionArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  auctionArtworkWatcher: <T = FragmentableArray<AuctionArtwork>>(args?: {
    where?: AuctionArtworkWhereInput;
    orderBy?: AuctionArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  auctionArtworkBid: <T = FragmentableArray<AuctionArtworkBid>>(args?: {
    where?: AuctionArtworkBidWhereInput;
    orderBy?: AuctionArtworkBidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<String>;
  permissions: () => Promise<PermissionsType[]>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  easyId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  name_lcase: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  email_lcase: () => Promise<AsyncIterator<String>>;
  emailValidated: () => Promise<AsyncIterator<Boolean>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  artistRecords: <T = Promise<AsyncIterator<ArtistSubscription>>>(args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  artworkRecords: <T = Promise<AsyncIterator<ArtworkSubscription>>>(args?: {
    where?: ArtworkWhereInput;
    orderBy?: ArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  artworkLocationRecords: <
    T = Promise<AsyncIterator<ArtworkLocationSubscription>>
  >(args?: {
    where?: ArtworkLocationWhereInput;
    orderBy?: ArtworkLocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  auctionArtworkSeller: <
    T = Promise<AsyncIterator<AuctionArtworkSubscription>>
  >(args?: {
    where?: AuctionArtworkWhereInput;
    orderBy?: AuctionArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  auctionArtworkBuyer: <
    T = Promise<AsyncIterator<AuctionArtworkSubscription>>
  >(args?: {
    where?: AuctionArtworkWhereInput;
    orderBy?: AuctionArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  auctionArtworkWatcher: <
    T = Promise<AsyncIterator<AuctionArtworkSubscription>>
  >(args?: {
    where?: AuctionArtworkWhereInput;
    orderBy?: AuctionArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  auctionArtworkBid: <
    T = Promise<AsyncIterator<AuctionArtworkBidSubscription>>
  >(args?: {
    where?: AuctionArtworkBidWhereInput;
    orderBy?: AuctionArtworkBidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  password: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<PermissionsType[]>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  easyId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  name_lcase: () => Promise<String>;
  email: () => Promise<String>;
  email_lcase: () => Promise<String>;
  emailValidated: () => Promise<Boolean>;
  active: () => Promise<Boolean>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  artistRecords: <T = FragmentableArray<Artist>>(args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  artworkRecords: <T = FragmentableArray<Artwork>>(args?: {
    where?: ArtworkWhereInput;
    orderBy?: ArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  artworkLocationRecords: <T = FragmentableArray<ArtworkLocation>>(args?: {
    where?: ArtworkLocationWhereInput;
    orderBy?: ArtworkLocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  auctionArtworkSeller: <T = FragmentableArray<AuctionArtwork>>(args?: {
    where?: AuctionArtworkWhereInput;
    orderBy?: AuctionArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  auctionArtworkBuyer: <T = FragmentableArray<AuctionArtwork>>(args?: {
    where?: AuctionArtworkWhereInput;
    orderBy?: AuctionArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  auctionArtworkWatcher: <T = FragmentableArray<AuctionArtwork>>(args?: {
    where?: AuctionArtworkWhereInput;
    orderBy?: AuctionArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  auctionArtworkBid: <T = FragmentableArray<AuctionArtworkBid>>(args?: {
    where?: AuctionArtworkBidWhereInput;
    orderBy?: AuctionArtworkBidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<String>;
  permissions: () => Promise<PermissionsType[]>;
}

export interface Post {
  id: ID_Output;
  easyId: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
  title: String;
  title_lcase: String;
  body: String;
  body_lcase: String;
  isPublished: Boolean;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  easyId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  title: () => Promise<String>;
  title_lcase: () => Promise<String>;
  body: () => Promise<String>;
  body_lcase: () => Promise<String>;
  isPublished: () => Promise<Boolean>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  easyId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  owner: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  title_lcase: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
  body_lcase: () => Promise<AsyncIterator<String>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  easyId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  title: () => Promise<String>;
  title_lcase: () => Promise<String>;
  body: () => Promise<String>;
  body_lcase: () => Promise<String>;
  isPublished: () => Promise<Boolean>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Comment {
  id: ID_Output;
  easyId: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
  text: String;
  text_lcase: String;
  isPublished: Boolean;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  easyId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  text: () => Promise<String>;
  text_lcase: () => Promise<String>;
  isPublished: () => Promise<Boolean>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  easyId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  owner: <T = UserSubscription>() => T;
  post: <T = PostSubscription>() => T;
  text: () => Promise<AsyncIterator<String>>;
  text_lcase: () => Promise<AsyncIterator<String>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  easyId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  text: () => Promise<String>;
  text_lcase: () => Promise<String>;
  isPublished: () => Promise<Boolean>;
}

export interface Artwork {
  id: ID_Output;
  easyId: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
  isPublished: Boolean;
  wikiPage?: String;
  wikiPhoto?: String;
  imageLink?: String;
  notableWork: Boolean;
  artworkLocationURL?: String;
  fileName?: String;
  workName?: String;
  workName_english?: String;
  workName_ascii?: String;
  dateCompleted?: String;
  dateCompletedAccuracy?: String;
  type?: String;
  genre?: String;
  medium?: String;
  mediumSupport?: String;
  description?: String;
  descriptionSource?: String;
  accession?: String;
  creditLine?: String;
  dimensionCoreW_mm?: Int;
  dimensionCoreH_mm?: Int;
  dimensionCoreD_mm?: Int;
  dimensionCoreWHD_in?: String;
  dimensionFramedW_mm?: Int;
  dimensionFramedH_mm?: Int;
  dimensionFramedD_mm?: Int;
  dimensionFramedWHD_in?: String;
  signature?: String;
  onviewAt?: String;
  otherDescription?: String;
  imageMaxName?: String;
  imageMaxWidth?: Int;
  imageMaxHeight?: Int;
  imageOptName?: String;
  imageOptWidth?: Int;
  imageOptHeight?: Int;
  imageThmName?: String;
  imageThmWidth?: Int;
  imageThmHeight?: Int;
}

export interface ArtworkPromise extends Promise<Artwork>, Fragmentable {
  id: () => Promise<ID_Output>;
  easyId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  isPublished: () => Promise<Boolean>;
  wikiPage: () => Promise<String>;
  wikiPhoto: () => Promise<String>;
  imageLink: () => Promise<String>;
  artist: <T = ArtistPromise>() => T;
  notableWork: () => Promise<Boolean>;
  artworkLocation: <T = ArtworkLocationPromise>() => T;
  artworkLocationURL: () => Promise<String>;
  fileName: () => Promise<String>;
  workName: () => Promise<String>;
  workName_english: () => Promise<String>;
  workName_ascii: () => Promise<String>;
  dateCompleted: () => Promise<String>;
  dateCompletedAccuracy: () => Promise<String>;
  type: () => Promise<String>;
  genre: () => Promise<String>;
  medium: () => Promise<String>;
  mediumSupport: () => Promise<String>;
  description: () => Promise<String>;
  descriptionSource: () => Promise<String>;
  accession: () => Promise<String>;
  creditLine: () => Promise<String>;
  dimensionCoreW_mm: () => Promise<Int>;
  dimensionCoreH_mm: () => Promise<Int>;
  dimensionCoreD_mm: () => Promise<Int>;
  dimensionCoreWHD_in: () => Promise<String>;
  dimensionFramedW_mm: () => Promise<Int>;
  dimensionFramedH_mm: () => Promise<Int>;
  dimensionFramedD_mm: () => Promise<Int>;
  dimensionFramedWHD_in: () => Promise<String>;
  signature: () => Promise<String>;
  onviewAt: () => Promise<String>;
  otherDescription: () => Promise<String>;
  imageMaxName: () => Promise<String>;
  imageMaxWidth: () => Promise<Int>;
  imageMaxHeight: () => Promise<Int>;
  imageOptName: () => Promise<String>;
  imageOptWidth: () => Promise<Int>;
  imageOptHeight: () => Promise<Int>;
  imageThmName: () => Promise<String>;
  imageThmWidth: () => Promise<Int>;
  imageThmHeight: () => Promise<Int>;
  auctions: <T = FragmentableArray<AuctionArtwork>>(args?: {
    where?: AuctionArtworkWhereInput;
    orderBy?: AuctionArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ArtworkSubscription
  extends Promise<AsyncIterator<Artwork>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  easyId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  owner: <T = UserSubscription>() => T;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  wikiPage: () => Promise<AsyncIterator<String>>;
  wikiPhoto: () => Promise<AsyncIterator<String>>;
  imageLink: () => Promise<AsyncIterator<String>>;
  artist: <T = ArtistSubscription>() => T;
  notableWork: () => Promise<AsyncIterator<Boolean>>;
  artworkLocation: <T = ArtworkLocationSubscription>() => T;
  artworkLocationURL: () => Promise<AsyncIterator<String>>;
  fileName: () => Promise<AsyncIterator<String>>;
  workName: () => Promise<AsyncIterator<String>>;
  workName_english: () => Promise<AsyncIterator<String>>;
  workName_ascii: () => Promise<AsyncIterator<String>>;
  dateCompleted: () => Promise<AsyncIterator<String>>;
  dateCompletedAccuracy: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  genre: () => Promise<AsyncIterator<String>>;
  medium: () => Promise<AsyncIterator<String>>;
  mediumSupport: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  descriptionSource: () => Promise<AsyncIterator<String>>;
  accession: () => Promise<AsyncIterator<String>>;
  creditLine: () => Promise<AsyncIterator<String>>;
  dimensionCoreW_mm: () => Promise<AsyncIterator<Int>>;
  dimensionCoreH_mm: () => Promise<AsyncIterator<Int>>;
  dimensionCoreD_mm: () => Promise<AsyncIterator<Int>>;
  dimensionCoreWHD_in: () => Promise<AsyncIterator<String>>;
  dimensionFramedW_mm: () => Promise<AsyncIterator<Int>>;
  dimensionFramedH_mm: () => Promise<AsyncIterator<Int>>;
  dimensionFramedD_mm: () => Promise<AsyncIterator<Int>>;
  dimensionFramedWHD_in: () => Promise<AsyncIterator<String>>;
  signature: () => Promise<AsyncIterator<String>>;
  onviewAt: () => Promise<AsyncIterator<String>>;
  otherDescription: () => Promise<AsyncIterator<String>>;
  imageMaxName: () => Promise<AsyncIterator<String>>;
  imageMaxWidth: () => Promise<AsyncIterator<Int>>;
  imageMaxHeight: () => Promise<AsyncIterator<Int>>;
  imageOptName: () => Promise<AsyncIterator<String>>;
  imageOptWidth: () => Promise<AsyncIterator<Int>>;
  imageOptHeight: () => Promise<AsyncIterator<Int>>;
  imageThmName: () => Promise<AsyncIterator<String>>;
  imageThmWidth: () => Promise<AsyncIterator<Int>>;
  imageThmHeight: () => Promise<AsyncIterator<Int>>;
  auctions: <T = Promise<AsyncIterator<AuctionArtworkSubscription>>>(args?: {
    where?: AuctionArtworkWhereInput;
    orderBy?: AuctionArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ArtworkNullablePromise
  extends Promise<Artwork | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  easyId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  isPublished: () => Promise<Boolean>;
  wikiPage: () => Promise<String>;
  wikiPhoto: () => Promise<String>;
  imageLink: () => Promise<String>;
  artist: <T = ArtistPromise>() => T;
  notableWork: () => Promise<Boolean>;
  artworkLocation: <T = ArtworkLocationPromise>() => T;
  artworkLocationURL: () => Promise<String>;
  fileName: () => Promise<String>;
  workName: () => Promise<String>;
  workName_english: () => Promise<String>;
  workName_ascii: () => Promise<String>;
  dateCompleted: () => Promise<String>;
  dateCompletedAccuracy: () => Promise<String>;
  type: () => Promise<String>;
  genre: () => Promise<String>;
  medium: () => Promise<String>;
  mediumSupport: () => Promise<String>;
  description: () => Promise<String>;
  descriptionSource: () => Promise<String>;
  accession: () => Promise<String>;
  creditLine: () => Promise<String>;
  dimensionCoreW_mm: () => Promise<Int>;
  dimensionCoreH_mm: () => Promise<Int>;
  dimensionCoreD_mm: () => Promise<Int>;
  dimensionCoreWHD_in: () => Promise<String>;
  dimensionFramedW_mm: () => Promise<Int>;
  dimensionFramedH_mm: () => Promise<Int>;
  dimensionFramedD_mm: () => Promise<Int>;
  dimensionFramedWHD_in: () => Promise<String>;
  signature: () => Promise<String>;
  onviewAt: () => Promise<String>;
  otherDescription: () => Promise<String>;
  imageMaxName: () => Promise<String>;
  imageMaxWidth: () => Promise<Int>;
  imageMaxHeight: () => Promise<Int>;
  imageOptName: () => Promise<String>;
  imageOptWidth: () => Promise<Int>;
  imageOptHeight: () => Promise<Int>;
  imageThmName: () => Promise<String>;
  imageThmWidth: () => Promise<Int>;
  imageThmHeight: () => Promise<Int>;
  auctions: <T = FragmentableArray<AuctionArtwork>>(args?: {
    where?: AuctionArtworkWhereInput;
    orderBy?: AuctionArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ArtworkLocation {
  id: ID_Output;
  easyId: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
  isPublished: Boolean;
  wikiPage?: String;
  wikiPhoto?: String;
  imageLink?: String;
  name: String;
  nickname?: String;
  description?: String;
  dateFirstOpened?: String;
  streetAddress?: String;
  city?: String;
  state?: String;
  postalCode?: String;
  country?: String;
  coorE?: Int;
  coorN?: Int;
  website?: String;
  isMuseum: Boolean;
  imageMaxName?: String;
  imageMaxWidth?: Int;
  imageMaxHeight?: Int;
  imageOptName?: String;
  imageOptWidth?: Int;
  imageOptHeight?: Int;
  imageThmName?: String;
  imageThmWidth?: Int;
  imageThmHeight?: Int;
}

export interface ArtworkLocationPromise
  extends Promise<ArtworkLocation>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  easyId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  isPublished: () => Promise<Boolean>;
  wikiPage: () => Promise<String>;
  wikiPhoto: () => Promise<String>;
  imageLink: () => Promise<String>;
  name: () => Promise<String>;
  nickname: () => Promise<String>;
  description: () => Promise<String>;
  dateFirstOpened: () => Promise<String>;
  streetAddress: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  postalCode: () => Promise<String>;
  country: () => Promise<String>;
  coorE: () => Promise<Int>;
  coorN: () => Promise<Int>;
  website: () => Promise<String>;
  isMuseum: () => Promise<Boolean>;
  imageMaxName: () => Promise<String>;
  imageMaxWidth: () => Promise<Int>;
  imageMaxHeight: () => Promise<Int>;
  imageOptName: () => Promise<String>;
  imageOptWidth: () => Promise<Int>;
  imageOptHeight: () => Promise<Int>;
  imageThmName: () => Promise<String>;
  imageThmWidth: () => Promise<Int>;
  imageThmHeight: () => Promise<Int>;
  artworks: <T = FragmentableArray<Artwork>>(args?: {
    where?: ArtworkWhereInput;
    orderBy?: ArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  artists: <T = FragmentableArray<Artist>>(args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ArtworkLocationSubscription
  extends Promise<AsyncIterator<ArtworkLocation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  easyId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  owner: <T = UserSubscription>() => T;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  wikiPage: () => Promise<AsyncIterator<String>>;
  wikiPhoto: () => Promise<AsyncIterator<String>>;
  imageLink: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  dateFirstOpened: () => Promise<AsyncIterator<String>>;
  streetAddress: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  postalCode: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  coorE: () => Promise<AsyncIterator<Int>>;
  coorN: () => Promise<AsyncIterator<Int>>;
  website: () => Promise<AsyncIterator<String>>;
  isMuseum: () => Promise<AsyncIterator<Boolean>>;
  imageMaxName: () => Promise<AsyncIterator<String>>;
  imageMaxWidth: () => Promise<AsyncIterator<Int>>;
  imageMaxHeight: () => Promise<AsyncIterator<Int>>;
  imageOptName: () => Promise<AsyncIterator<String>>;
  imageOptWidth: () => Promise<AsyncIterator<Int>>;
  imageOptHeight: () => Promise<AsyncIterator<Int>>;
  imageThmName: () => Promise<AsyncIterator<String>>;
  imageThmWidth: () => Promise<AsyncIterator<Int>>;
  imageThmHeight: () => Promise<AsyncIterator<Int>>;
  artworks: <T = Promise<AsyncIterator<ArtworkSubscription>>>(args?: {
    where?: ArtworkWhereInput;
    orderBy?: ArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  artists: <T = Promise<AsyncIterator<ArtistSubscription>>>(args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ArtworkLocationNullablePromise
  extends Promise<ArtworkLocation | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  easyId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  isPublished: () => Promise<Boolean>;
  wikiPage: () => Promise<String>;
  wikiPhoto: () => Promise<String>;
  imageLink: () => Promise<String>;
  name: () => Promise<String>;
  nickname: () => Promise<String>;
  description: () => Promise<String>;
  dateFirstOpened: () => Promise<String>;
  streetAddress: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  postalCode: () => Promise<String>;
  country: () => Promise<String>;
  coorE: () => Promise<Int>;
  coorN: () => Promise<Int>;
  website: () => Promise<String>;
  isMuseum: () => Promise<Boolean>;
  imageMaxName: () => Promise<String>;
  imageMaxWidth: () => Promise<Int>;
  imageMaxHeight: () => Promise<Int>;
  imageOptName: () => Promise<String>;
  imageOptWidth: () => Promise<Int>;
  imageOptHeight: () => Promise<Int>;
  imageThmName: () => Promise<String>;
  imageThmWidth: () => Promise<Int>;
  imageThmHeight: () => Promise<Int>;
  artworks: <T = FragmentableArray<Artwork>>(args?: {
    where?: ArtworkWhereInput;
    orderBy?: ArtworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  artists: <T = FragmentableArray<Artist>>(args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AuctionArtwork {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
  isPublished: Boolean;
  startDate?: DateTimeOutput;
  endDate?: DateTimeOutput;
  withdrawnDate?: DateTimeOutput;
  saleDate?: DateTimeOutput;
  refundDate?: DateTimeOutput;
  reserve?: Int;
  initialPrice?: Int;
  buyoutPrice?: Int;
  salePrice?: Int;
}

export interface AuctionArtworkPromise
  extends Promise<AuctionArtwork>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  withdrawnDate: () => Promise<DateTimeOutput>;
  saleDate: () => Promise<DateTimeOutput>;
  refundDate: () => Promise<DateTimeOutput>;
  reserve: () => Promise<Int>;
  initialPrice: () => Promise<Int>;
  buyoutPrice: () => Promise<Int>;
  salePrice: () => Promise<Int>;
  artwork: <T = ArtworkPromise>() => T;
  seller: <T = UserPromise>() => T;
  buyer: <T = UserPromise>() => T;
  bids: <T = FragmentableArray<AuctionArtworkBid>>(args?: {
    where?: AuctionArtworkBidWhereInput;
    orderBy?: AuctionArtworkBidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  watchers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AuctionArtworkSubscription
  extends Promise<AsyncIterator<AuctionArtwork>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  withdrawnDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  saleDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  refundDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  reserve: () => Promise<AsyncIterator<Int>>;
  initialPrice: () => Promise<AsyncIterator<Int>>;
  buyoutPrice: () => Promise<AsyncIterator<Int>>;
  salePrice: () => Promise<AsyncIterator<Int>>;
  artwork: <T = ArtworkSubscription>() => T;
  seller: <T = UserSubscription>() => T;
  buyer: <T = UserSubscription>() => T;
  bids: <T = Promise<AsyncIterator<AuctionArtworkBidSubscription>>>(args?: {
    where?: AuctionArtworkBidWhereInput;
    orderBy?: AuctionArtworkBidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  watchers: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AuctionArtworkNullablePromise
  extends Promise<AuctionArtwork | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  withdrawnDate: () => Promise<DateTimeOutput>;
  saleDate: () => Promise<DateTimeOutput>;
  refundDate: () => Promise<DateTimeOutput>;
  reserve: () => Promise<Int>;
  initialPrice: () => Promise<Int>;
  buyoutPrice: () => Promise<Int>;
  salePrice: () => Promise<Int>;
  artwork: <T = ArtworkPromise>() => T;
  seller: <T = UserPromise>() => T;
  buyer: <T = UserPromise>() => T;
  bids: <T = FragmentableArray<AuctionArtworkBid>>(args?: {
    where?: AuctionArtworkBidWhereInput;
    orderBy?: AuctionArtworkBidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  watchers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AuctionArtworkBid {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
  amount?: Int;
}

export interface AuctionArtworkBidPromise
  extends Promise<AuctionArtworkBid>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  auction: <T = AuctionArtworkPromise>() => T;
  bidder: <T = UserPromise>() => T;
  amount: () => Promise<Int>;
}

export interface AuctionArtworkBidSubscription
  extends Promise<AsyncIterator<AuctionArtworkBid>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  auction: <T = AuctionArtworkSubscription>() => T;
  bidder: <T = UserSubscription>() => T;
  amount: () => Promise<AsyncIterator<Int>>;
}

export interface AuctionArtworkBidNullablePromise
  extends Promise<AuctionArtworkBid | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  auction: <T = AuctionArtworkPromise>() => T;
  bidder: <T = UserPromise>() => T;
  amount: () => Promise<Int>;
}

export interface ArtistConnection {
  pageInfo: PageInfo;
  edges: ArtistEdge[];
}

export interface ArtistConnectionPromise
  extends Promise<ArtistConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ArtistEdge>>() => T;
  aggregate: <T = AggregateArtistPromise>() => T;
}

export interface ArtistConnectionSubscription
  extends Promise<AsyncIterator<ArtistConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ArtistEdgeSubscription>>>() => T;
  aggregate: <T = AggregateArtistSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ArtistEdge {
  node: Artist;
  cursor: String;
}

export interface ArtistEdgePromise extends Promise<ArtistEdge>, Fragmentable {
  node: <T = ArtistPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ArtistEdgeSubscription
  extends Promise<AsyncIterator<ArtistEdge>>,
    Fragmentable {
  node: <T = ArtistSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateArtist {
  count: Int;
}

export interface AggregateArtistPromise
  extends Promise<AggregateArtist>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateArtistSubscription
  extends Promise<AsyncIterator<AggregateArtist>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ArtworkConnection {
  pageInfo: PageInfo;
  edges: ArtworkEdge[];
}

export interface ArtworkConnectionPromise
  extends Promise<ArtworkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ArtworkEdge>>() => T;
  aggregate: <T = AggregateArtworkPromise>() => T;
}

export interface ArtworkConnectionSubscription
  extends Promise<AsyncIterator<ArtworkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ArtworkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateArtworkSubscription>() => T;
}

export interface ArtworkEdge {
  node: Artwork;
  cursor: String;
}

export interface ArtworkEdgePromise extends Promise<ArtworkEdge>, Fragmentable {
  node: <T = ArtworkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ArtworkEdgeSubscription
  extends Promise<AsyncIterator<ArtworkEdge>>,
    Fragmentable {
  node: <T = ArtworkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateArtwork {
  count: Int;
}

export interface AggregateArtworkPromise
  extends Promise<AggregateArtwork>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateArtworkSubscription
  extends Promise<AsyncIterator<AggregateArtwork>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ArtworkLocationConnection {
  pageInfo: PageInfo;
  edges: ArtworkLocationEdge[];
}

export interface ArtworkLocationConnectionPromise
  extends Promise<ArtworkLocationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ArtworkLocationEdge>>() => T;
  aggregate: <T = AggregateArtworkLocationPromise>() => T;
}

export interface ArtworkLocationConnectionSubscription
  extends Promise<AsyncIterator<ArtworkLocationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ArtworkLocationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateArtworkLocationSubscription>() => T;
}

export interface ArtworkLocationEdge {
  node: ArtworkLocation;
  cursor: String;
}

export interface ArtworkLocationEdgePromise
  extends Promise<ArtworkLocationEdge>,
    Fragmentable {
  node: <T = ArtworkLocationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ArtworkLocationEdgeSubscription
  extends Promise<AsyncIterator<ArtworkLocationEdge>>,
    Fragmentable {
  node: <T = ArtworkLocationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateArtworkLocation {
  count: Int;
}

export interface AggregateArtworkLocationPromise
  extends Promise<AggregateArtworkLocation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateArtworkLocationSubscription
  extends Promise<AsyncIterator<AggregateArtworkLocation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AuctionArtworkConnection {
  pageInfo: PageInfo;
  edges: AuctionArtworkEdge[];
}

export interface AuctionArtworkConnectionPromise
  extends Promise<AuctionArtworkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AuctionArtworkEdge>>() => T;
  aggregate: <T = AggregateAuctionArtworkPromise>() => T;
}

export interface AuctionArtworkConnectionSubscription
  extends Promise<AsyncIterator<AuctionArtworkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AuctionArtworkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAuctionArtworkSubscription>() => T;
}

export interface AuctionArtworkEdge {
  node: AuctionArtwork;
  cursor: String;
}

export interface AuctionArtworkEdgePromise
  extends Promise<AuctionArtworkEdge>,
    Fragmentable {
  node: <T = AuctionArtworkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AuctionArtworkEdgeSubscription
  extends Promise<AsyncIterator<AuctionArtworkEdge>>,
    Fragmentable {
  node: <T = AuctionArtworkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAuctionArtwork {
  count: Int;
}

export interface AggregateAuctionArtworkPromise
  extends Promise<AggregateAuctionArtwork>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAuctionArtworkSubscription
  extends Promise<AsyncIterator<AggregateAuctionArtwork>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AuctionArtworkBidConnection {
  pageInfo: PageInfo;
  edges: AuctionArtworkBidEdge[];
}

export interface AuctionArtworkBidConnectionPromise
  extends Promise<AuctionArtworkBidConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AuctionArtworkBidEdge>>() => T;
  aggregate: <T = AggregateAuctionArtworkBidPromise>() => T;
}

export interface AuctionArtworkBidConnectionSubscription
  extends Promise<AsyncIterator<AuctionArtworkBidConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AuctionArtworkBidEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAuctionArtworkBidSubscription>() => T;
}

export interface AuctionArtworkBidEdge {
  node: AuctionArtworkBid;
  cursor: String;
}

export interface AuctionArtworkBidEdgePromise
  extends Promise<AuctionArtworkBidEdge>,
    Fragmentable {
  node: <T = AuctionArtworkBidPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AuctionArtworkBidEdgeSubscription
  extends Promise<AsyncIterator<AuctionArtworkBidEdge>>,
    Fragmentable {
  node: <T = AuctionArtworkBidSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAuctionArtworkBid {
  count: Int;
}

export interface AggregateAuctionArtworkBidPromise
  extends Promise<AggregateAuctionArtworkBid>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAuctionArtworkBidSubscription
  extends Promise<AsyncIterator<AggregateAuctionArtworkBid>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ArtistSubscriptionPayload {
  mutation: MutationType;
  node: Artist;
  updatedFields: String[];
  previousValues: ArtistPreviousValues;
}

export interface ArtistSubscriptionPayloadPromise
  extends Promise<ArtistSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ArtistPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ArtistPreviousValuesPromise>() => T;
}

export interface ArtistSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ArtistSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ArtistSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ArtistPreviousValuesSubscription>() => T;
}

export interface ArtistPreviousValues {
  id: ID_Output;
  easyId: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
  isPublished: Boolean;
  wikiPage?: String;
  wikiPhoto?: String;
  imageLink?: String;
  birthName?: String;
  commonName?: String;
  dateOfBirth?: String;
  dateOfBirthAccuracy?: String;
  dateOfDeath?: String;
  dateOfDeathAccuracy?: String;
  nationality?: String;
  knownFor?: String;
  movements?: String;
  gender?: String;
  deceased: Boolean;
  birthCountry?: String;
  birthLocation?: String;
  birthLocationDetails?: String;
  deathCountry?: String;
  deathLocation?: String;
  deathLocationDetails?: String;
  imageMaxName?: String;
  imageMaxWidth?: Int;
  imageMaxHeight?: Int;
  imageOptName?: String;
  imageOptWidth?: Int;
  imageOptHeight?: Int;
  imageThmName?: String;
  imageThmWidth?: Int;
  imageThmHeight?: Int;
}

export interface ArtistPreviousValuesPromise
  extends Promise<ArtistPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  easyId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  wikiPage: () => Promise<String>;
  wikiPhoto: () => Promise<String>;
  imageLink: () => Promise<String>;
  birthName: () => Promise<String>;
  commonName: () => Promise<String>;
  dateOfBirth: () => Promise<String>;
  dateOfBirthAccuracy: () => Promise<String>;
  dateOfDeath: () => Promise<String>;
  dateOfDeathAccuracy: () => Promise<String>;
  nationality: () => Promise<String>;
  knownFor: () => Promise<String>;
  movements: () => Promise<String>;
  gender: () => Promise<String>;
  deceased: () => Promise<Boolean>;
  birthCountry: () => Promise<String>;
  birthLocation: () => Promise<String>;
  birthLocationDetails: () => Promise<String>;
  deathCountry: () => Promise<String>;
  deathLocation: () => Promise<String>;
  deathLocationDetails: () => Promise<String>;
  imageMaxName: () => Promise<String>;
  imageMaxWidth: () => Promise<Int>;
  imageMaxHeight: () => Promise<Int>;
  imageOptName: () => Promise<String>;
  imageOptWidth: () => Promise<Int>;
  imageOptHeight: () => Promise<Int>;
  imageThmName: () => Promise<String>;
  imageThmWidth: () => Promise<Int>;
  imageThmHeight: () => Promise<Int>;
}

export interface ArtistPreviousValuesSubscription
  extends Promise<AsyncIterator<ArtistPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  easyId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  wikiPage: () => Promise<AsyncIterator<String>>;
  wikiPhoto: () => Promise<AsyncIterator<String>>;
  imageLink: () => Promise<AsyncIterator<String>>;
  birthName: () => Promise<AsyncIterator<String>>;
  commonName: () => Promise<AsyncIterator<String>>;
  dateOfBirth: () => Promise<AsyncIterator<String>>;
  dateOfBirthAccuracy: () => Promise<AsyncIterator<String>>;
  dateOfDeath: () => Promise<AsyncIterator<String>>;
  dateOfDeathAccuracy: () => Promise<AsyncIterator<String>>;
  nationality: () => Promise<AsyncIterator<String>>;
  knownFor: () => Promise<AsyncIterator<String>>;
  movements: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  deceased: () => Promise<AsyncIterator<Boolean>>;
  birthCountry: () => Promise<AsyncIterator<String>>;
  birthLocation: () => Promise<AsyncIterator<String>>;
  birthLocationDetails: () => Promise<AsyncIterator<String>>;
  deathCountry: () => Promise<AsyncIterator<String>>;
  deathLocation: () => Promise<AsyncIterator<String>>;
  deathLocationDetails: () => Promise<AsyncIterator<String>>;
  imageMaxName: () => Promise<AsyncIterator<String>>;
  imageMaxWidth: () => Promise<AsyncIterator<Int>>;
  imageMaxHeight: () => Promise<AsyncIterator<Int>>;
  imageOptName: () => Promise<AsyncIterator<String>>;
  imageOptWidth: () => Promise<AsyncIterator<Int>>;
  imageOptHeight: () => Promise<AsyncIterator<Int>>;
  imageThmName: () => Promise<AsyncIterator<String>>;
  imageThmWidth: () => Promise<AsyncIterator<Int>>;
  imageThmHeight: () => Promise<AsyncIterator<Int>>;
}

export interface ArtworkSubscriptionPayload {
  mutation: MutationType;
  node: Artwork;
  updatedFields: String[];
  previousValues: ArtworkPreviousValues;
}

export interface ArtworkSubscriptionPayloadPromise
  extends Promise<ArtworkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ArtworkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ArtworkPreviousValuesPromise>() => T;
}

export interface ArtworkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ArtworkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ArtworkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ArtworkPreviousValuesSubscription>() => T;
}

export interface ArtworkPreviousValues {
  id: ID_Output;
  easyId: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
  isPublished: Boolean;
  wikiPage?: String;
  wikiPhoto?: String;
  imageLink?: String;
  notableWork: Boolean;
  artworkLocationURL?: String;
  fileName?: String;
  workName?: String;
  workName_english?: String;
  workName_ascii?: String;
  dateCompleted?: String;
  dateCompletedAccuracy?: String;
  type?: String;
  genre?: String;
  medium?: String;
  mediumSupport?: String;
  description?: String;
  descriptionSource?: String;
  accession?: String;
  creditLine?: String;
  dimensionCoreW_mm?: Int;
  dimensionCoreH_mm?: Int;
  dimensionCoreD_mm?: Int;
  dimensionCoreWHD_in?: String;
  dimensionFramedW_mm?: Int;
  dimensionFramedH_mm?: Int;
  dimensionFramedD_mm?: Int;
  dimensionFramedWHD_in?: String;
  signature?: String;
  onviewAt?: String;
  otherDescription?: String;
  imageMaxName?: String;
  imageMaxWidth?: Int;
  imageMaxHeight?: Int;
  imageOptName?: String;
  imageOptWidth?: Int;
  imageOptHeight?: Int;
  imageThmName?: String;
  imageThmWidth?: Int;
  imageThmHeight?: Int;
}

export interface ArtworkPreviousValuesPromise
  extends Promise<ArtworkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  easyId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  wikiPage: () => Promise<String>;
  wikiPhoto: () => Promise<String>;
  imageLink: () => Promise<String>;
  notableWork: () => Promise<Boolean>;
  artworkLocationURL: () => Promise<String>;
  fileName: () => Promise<String>;
  workName: () => Promise<String>;
  workName_english: () => Promise<String>;
  workName_ascii: () => Promise<String>;
  dateCompleted: () => Promise<String>;
  dateCompletedAccuracy: () => Promise<String>;
  type: () => Promise<String>;
  genre: () => Promise<String>;
  medium: () => Promise<String>;
  mediumSupport: () => Promise<String>;
  description: () => Promise<String>;
  descriptionSource: () => Promise<String>;
  accession: () => Promise<String>;
  creditLine: () => Promise<String>;
  dimensionCoreW_mm: () => Promise<Int>;
  dimensionCoreH_mm: () => Promise<Int>;
  dimensionCoreD_mm: () => Promise<Int>;
  dimensionCoreWHD_in: () => Promise<String>;
  dimensionFramedW_mm: () => Promise<Int>;
  dimensionFramedH_mm: () => Promise<Int>;
  dimensionFramedD_mm: () => Promise<Int>;
  dimensionFramedWHD_in: () => Promise<String>;
  signature: () => Promise<String>;
  onviewAt: () => Promise<String>;
  otherDescription: () => Promise<String>;
  imageMaxName: () => Promise<String>;
  imageMaxWidth: () => Promise<Int>;
  imageMaxHeight: () => Promise<Int>;
  imageOptName: () => Promise<String>;
  imageOptWidth: () => Promise<Int>;
  imageOptHeight: () => Promise<Int>;
  imageThmName: () => Promise<String>;
  imageThmWidth: () => Promise<Int>;
  imageThmHeight: () => Promise<Int>;
}

export interface ArtworkPreviousValuesSubscription
  extends Promise<AsyncIterator<ArtworkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  easyId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  wikiPage: () => Promise<AsyncIterator<String>>;
  wikiPhoto: () => Promise<AsyncIterator<String>>;
  imageLink: () => Promise<AsyncIterator<String>>;
  notableWork: () => Promise<AsyncIterator<Boolean>>;
  artworkLocationURL: () => Promise<AsyncIterator<String>>;
  fileName: () => Promise<AsyncIterator<String>>;
  workName: () => Promise<AsyncIterator<String>>;
  workName_english: () => Promise<AsyncIterator<String>>;
  workName_ascii: () => Promise<AsyncIterator<String>>;
  dateCompleted: () => Promise<AsyncIterator<String>>;
  dateCompletedAccuracy: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  genre: () => Promise<AsyncIterator<String>>;
  medium: () => Promise<AsyncIterator<String>>;
  mediumSupport: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  descriptionSource: () => Promise<AsyncIterator<String>>;
  accession: () => Promise<AsyncIterator<String>>;
  creditLine: () => Promise<AsyncIterator<String>>;
  dimensionCoreW_mm: () => Promise<AsyncIterator<Int>>;
  dimensionCoreH_mm: () => Promise<AsyncIterator<Int>>;
  dimensionCoreD_mm: () => Promise<AsyncIterator<Int>>;
  dimensionCoreWHD_in: () => Promise<AsyncIterator<String>>;
  dimensionFramedW_mm: () => Promise<AsyncIterator<Int>>;
  dimensionFramedH_mm: () => Promise<AsyncIterator<Int>>;
  dimensionFramedD_mm: () => Promise<AsyncIterator<Int>>;
  dimensionFramedWHD_in: () => Promise<AsyncIterator<String>>;
  signature: () => Promise<AsyncIterator<String>>;
  onviewAt: () => Promise<AsyncIterator<String>>;
  otherDescription: () => Promise<AsyncIterator<String>>;
  imageMaxName: () => Promise<AsyncIterator<String>>;
  imageMaxWidth: () => Promise<AsyncIterator<Int>>;
  imageMaxHeight: () => Promise<AsyncIterator<Int>>;
  imageOptName: () => Promise<AsyncIterator<String>>;
  imageOptWidth: () => Promise<AsyncIterator<Int>>;
  imageOptHeight: () => Promise<AsyncIterator<Int>>;
  imageThmName: () => Promise<AsyncIterator<String>>;
  imageThmWidth: () => Promise<AsyncIterator<Int>>;
  imageThmHeight: () => Promise<AsyncIterator<Int>>;
}

export interface ArtworkLocationSubscriptionPayload {
  mutation: MutationType;
  node: ArtworkLocation;
  updatedFields: String[];
  previousValues: ArtworkLocationPreviousValues;
}

export interface ArtworkLocationSubscriptionPayloadPromise
  extends Promise<ArtworkLocationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ArtworkLocationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ArtworkLocationPreviousValuesPromise>() => T;
}

export interface ArtworkLocationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ArtworkLocationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ArtworkLocationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ArtworkLocationPreviousValuesSubscription>() => T;
}

export interface ArtworkLocationPreviousValues {
  id: ID_Output;
  easyId: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
  isPublished: Boolean;
  wikiPage?: String;
  wikiPhoto?: String;
  imageLink?: String;
  name: String;
  nickname?: String;
  description?: String;
  dateFirstOpened?: String;
  streetAddress?: String;
  city?: String;
  state?: String;
  postalCode?: String;
  country?: String;
  coorE?: Int;
  coorN?: Int;
  website?: String;
  isMuseum: Boolean;
  imageMaxName?: String;
  imageMaxWidth?: Int;
  imageMaxHeight?: Int;
  imageOptName?: String;
  imageOptWidth?: Int;
  imageOptHeight?: Int;
  imageThmName?: String;
  imageThmWidth?: Int;
  imageThmHeight?: Int;
}

export interface ArtworkLocationPreviousValuesPromise
  extends Promise<ArtworkLocationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  easyId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  wikiPage: () => Promise<String>;
  wikiPhoto: () => Promise<String>;
  imageLink: () => Promise<String>;
  name: () => Promise<String>;
  nickname: () => Promise<String>;
  description: () => Promise<String>;
  dateFirstOpened: () => Promise<String>;
  streetAddress: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  postalCode: () => Promise<String>;
  country: () => Promise<String>;
  coorE: () => Promise<Int>;
  coorN: () => Promise<Int>;
  website: () => Promise<String>;
  isMuseum: () => Promise<Boolean>;
  imageMaxName: () => Promise<String>;
  imageMaxWidth: () => Promise<Int>;
  imageMaxHeight: () => Promise<Int>;
  imageOptName: () => Promise<String>;
  imageOptWidth: () => Promise<Int>;
  imageOptHeight: () => Promise<Int>;
  imageThmName: () => Promise<String>;
  imageThmWidth: () => Promise<Int>;
  imageThmHeight: () => Promise<Int>;
}

export interface ArtworkLocationPreviousValuesSubscription
  extends Promise<AsyncIterator<ArtworkLocationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  easyId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  wikiPage: () => Promise<AsyncIterator<String>>;
  wikiPhoto: () => Promise<AsyncIterator<String>>;
  imageLink: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  dateFirstOpened: () => Promise<AsyncIterator<String>>;
  streetAddress: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  postalCode: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  coorE: () => Promise<AsyncIterator<Int>>;
  coorN: () => Promise<AsyncIterator<Int>>;
  website: () => Promise<AsyncIterator<String>>;
  isMuseum: () => Promise<AsyncIterator<Boolean>>;
  imageMaxName: () => Promise<AsyncIterator<String>>;
  imageMaxWidth: () => Promise<AsyncIterator<Int>>;
  imageMaxHeight: () => Promise<AsyncIterator<Int>>;
  imageOptName: () => Promise<AsyncIterator<String>>;
  imageOptWidth: () => Promise<AsyncIterator<Int>>;
  imageOptHeight: () => Promise<AsyncIterator<Int>>;
  imageThmName: () => Promise<AsyncIterator<String>>;
  imageThmWidth: () => Promise<AsyncIterator<Int>>;
  imageThmHeight: () => Promise<AsyncIterator<Int>>;
}

export interface AuctionArtworkSubscriptionPayload {
  mutation: MutationType;
  node: AuctionArtwork;
  updatedFields: String[];
  previousValues: AuctionArtworkPreviousValues;
}

export interface AuctionArtworkSubscriptionPayloadPromise
  extends Promise<AuctionArtworkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AuctionArtworkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AuctionArtworkPreviousValuesPromise>() => T;
}

export interface AuctionArtworkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AuctionArtworkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AuctionArtworkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AuctionArtworkPreviousValuesSubscription>() => T;
}

export interface AuctionArtworkPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
  isPublished: Boolean;
  startDate?: DateTimeOutput;
  endDate?: DateTimeOutput;
  withdrawnDate?: DateTimeOutput;
  saleDate?: DateTimeOutput;
  refundDate?: DateTimeOutput;
  reserve?: Int;
  initialPrice?: Int;
  buyoutPrice?: Int;
  salePrice?: Int;
}

export interface AuctionArtworkPreviousValuesPromise
  extends Promise<AuctionArtworkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  withdrawnDate: () => Promise<DateTimeOutput>;
  saleDate: () => Promise<DateTimeOutput>;
  refundDate: () => Promise<DateTimeOutput>;
  reserve: () => Promise<Int>;
  initialPrice: () => Promise<Int>;
  buyoutPrice: () => Promise<Int>;
  salePrice: () => Promise<Int>;
}

export interface AuctionArtworkPreviousValuesSubscription
  extends Promise<AsyncIterator<AuctionArtworkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  withdrawnDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  saleDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  refundDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  reserve: () => Promise<AsyncIterator<Int>>;
  initialPrice: () => Promise<AsyncIterator<Int>>;
  buyoutPrice: () => Promise<AsyncIterator<Int>>;
  salePrice: () => Promise<AsyncIterator<Int>>;
}

export interface AuctionArtworkBidSubscriptionPayload {
  mutation: MutationType;
  node: AuctionArtworkBid;
  updatedFields: String[];
  previousValues: AuctionArtworkBidPreviousValues;
}

export interface AuctionArtworkBidSubscriptionPayloadPromise
  extends Promise<AuctionArtworkBidSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AuctionArtworkBidPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AuctionArtworkBidPreviousValuesPromise>() => T;
}

export interface AuctionArtworkBidSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AuctionArtworkBidSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AuctionArtworkBidSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AuctionArtworkBidPreviousValuesSubscription>() => T;
}

export interface AuctionArtworkBidPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
  amount?: Int;
}

export interface AuctionArtworkBidPreviousValuesPromise
  extends Promise<AuctionArtworkBidPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  amount: () => Promise<Int>;
}

export interface AuctionArtworkBidPreviousValuesSubscription
  extends Promise<AsyncIterator<AuctionArtworkBidPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  amount: () => Promise<AsyncIterator<Int>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  easyId: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
  text: String;
  text_lcase: String;
  isPublished: Boolean;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  easyId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
  text_lcase: () => Promise<String>;
  isPublished: () => Promise<Boolean>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  easyId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
  text_lcase: () => Promise<AsyncIterator<String>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  easyId: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
  title: String;
  title_lcase: String;
  body: String;
  body_lcase: String;
  isPublished: Boolean;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  easyId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  title_lcase: () => Promise<String>;
  body: () => Promise<String>;
  body_lcase: () => Promise<String>;
  isPublished: () => Promise<Boolean>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  easyId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  title_lcase: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
  body_lcase: () => Promise<AsyncIterator<String>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  easyId: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
  name: String;
  name_lcase: String;
  email: String;
  email_lcase: String;
  emailValidated: Boolean;
  active: Boolean;
  password: String;
  resetToken?: String;
  resetTokenExpiry?: String;
  permissions: PermissionsType[];
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  easyId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  name_lcase: () => Promise<String>;
  email: () => Promise<String>;
  email_lcase: () => Promise<String>;
  emailValidated: () => Promise<Boolean>;
  active: () => Promise<Boolean>;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<String>;
  permissions: () => Promise<PermissionsType[]>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  easyId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  name_lcase: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  email_lcase: () => Promise<AsyncIterator<String>>;
  emailValidated: () => Promise<AsyncIterator<Boolean>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  password: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<PermissionsType[]>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "Artist",
    embedded: false
  },
  {
    name: "ArtworkLocation",
    embedded: false
  },
  {
    name: "Artwork",
    embedded: false
  },
  {
    name: "AuctionArtwork",
    embedded: false
  },
  {
    name: "AuctionArtworkBid",
    embedded: false
  },
  {
    name: "PermissionsType",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://whistler-02db6224af.herokuapp.com/ah/prod`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
